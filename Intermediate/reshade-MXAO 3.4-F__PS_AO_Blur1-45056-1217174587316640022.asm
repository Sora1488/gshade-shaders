//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float fMXAOAmbientOcclusionAmount; // Offset:    0 Size:     4 [unused]
//   float fMXAOSampleRadius;           // Offset:    4 Size:     4 [unused]
//   float iMXAOSampleCount;            // Offset:    8 Size:     4 [unused]
//   float iMXAOBayerDitherLevel;       // Offset:   12 Size:     4 [unused]
//   float fMXAONormalBias;             // Offset:   16 Size:     4 [unused]
//   bool bMXAOSmoothNormalsEnable;     // Offset:   20 Size:     4 [unused]
//   float fMXAOBlurSharpness;          // Offset:   24 Size:     4
//   float fMXAOBlurSteps;              // Offset:   28 Size:     4
//   bool bMXAODebugViewEnable;         // Offset:   32 Size:     4 [unused]
//   float fMXAOFadeoutStart;           // Offset:   36 Size:     4 [unused]
//   float fMXAOFadeoutEnd;             // Offset:   40 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__texDistance                  texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t6.xyzw, s0, l(0.000000)
mul r0.w, r0.w, l(0.500000)
mad r2.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mov r2.z, l(1.000000)
mul r1.yzw, r1.xxxx, r2.xxyz
dp3 r2.x, r1.yzwy, r1.yzwy
rsq r2.x, r2.x
mul r1.yzw, r1.yyzw, r2.xxxx
dp3 r1.y, r0.xyzx, r1.yzwy
mov_sat r1.y, -r1.y
round_z r1.z, cb0[1].w
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r2.xyz, r0.xyzx, r1.wwww
mov r3.x, l(0.500000)
mov r3.y, r0.w
mov r1.w, l(-1)
loop 
  ilt r2.w, l(1), r1.w
  breakc_nz r2.w
  itof r2.w, r1.w
  mov r3.zw, r3.xxxy
  mov r4.x, l(1.000000)
  loop 
    lt r4.y, r1.z, r4.x
    breakc_nz r4.y
    mad r4.y, r4.x, l(2.000000), l(-0.500000)
    mul r4.y, r2.w, r4.y
    mad r4.yz, r4.yyyy, l(0.000000, 0.000521, 0.000000, 0.000000), v1.xxyx
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r4.yzyy, t0.xyzw, s0, l(0.000000)
    mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r4.y, r4.yzyy, t6.yxzw, s0, l(0.000000)
    add r4.y, -r1.x, r4.y
    dp3 r4.z, r5.xyzx, r5.xyzx
    rsq r4.z, r4.z
    mul r5.xyz, r4.zzzz, r5.xyzx
    dp3_sat r4.z, r5.xyzx, r2.xyzx
    add r4.z, -r4.z, l(1.000000)
    mul r4.y, |r4.y|, cb0[1].z
    mul r4.y, r1.y, r4.y
    mul r4.y, r4.y, l(5.000000)
    rcp r4.y, r4.y
    mul r4.z, r4.z, cb0[1].z
    mul r4.z, r4.z, l(10.000000)
    rcp r4.z, r4.z
    mov_sat r4.yz, r4.yyzy
    min r4.y, r4.y, r4.z
    mad r3.w, r5.w, r4.y, r3.w
    add r3.z, r3.z, r4.y
    add r4.x, r4.x, l(1.000000)
  endloop 
  mov r3.xy, r3.zwzz
  iadd r1.w, r1.w, l(2)
endloop 
mad o0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
div o0.w, r3.y, r3.x
ret 
// Approximately 59 instruction slots used
