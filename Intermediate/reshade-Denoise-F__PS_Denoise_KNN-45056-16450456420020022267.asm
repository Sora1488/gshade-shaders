//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
mov r0.w, l(0)
mov r1.xyzw, l(0,0,0,0)
mov r2.x, l(-3)
loop 
  ilt r2.y, l(3), r2.x
  breakc_nz r2.y
  itof r3.x, r2.x
  mov r2.yzw, r1.xxyz
  mov r3.z, r0.w
  mov r3.w, r1.w
  mov r4.x, l(-3)
  loop 
    ilt r4.y, l(3), r4.x
    breakc_nz r4.y
    itof r3.y, r4.x
    mad r4.yz, r3.xxyx, l(0.000000, 0.000521, 0.000926, 0.000000), v1.xxyx
    sample_l_indexable(texture2d)(float,float,float,float) r4.yzw, r4.yzyy, t0.wxyz, s0, l(0.000000)
    add r5.xyz, r0.xyzx, -r4.yzwy
    dp3 r3.y, r5.xyzx, r5.xyzx
    imul null, r5.x, r4.x, r4.x
    imad r5.x, r2.x, r2.x, r5.x
    itof r5.x, r5.x
    mul r5.x, r5.x, l(0.020000)
    mad r3.y, r3.y, l(6.666667), r5.x
    mul r3.y, r3.y, l(-1.442695)
    exp r3.y, r3.y
    lt r5.x, l(0.030000), r3.y
    and r5.x, r5.x, l(0x3f800000)
    add r3.z, r3.z, r5.x
    add r3.w, r3.y, r3.w
    mad r2.yzw, r4.yyzw, r3.yyyy, r2.yyzw
    iadd r4.x, r4.x, l(1)
  endloop 
  mov r1.xyz, r2.yzwy
  mov r0.w, r3.z
  mov r1.w, r3.w
  iadd r2.x, r2.x, l(1)
endloop 
div r1.xyz, r1.xyzx, r1.wwww
lt r0.w, l(2.450000), r0.w
if_nz r0.w
  add r2.xyz, r0.xyzx, -r1.xyzx
  mad o0.xyz, r2.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r1.xyzx
  ret 
else 
  add r0.xyz, r0.xyzx, -r1.xyzx
  mad o0.xyz, r0.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000), r1.xyzx
  ret 
endif 
ret 
// Approximately 51 instruction slots used
