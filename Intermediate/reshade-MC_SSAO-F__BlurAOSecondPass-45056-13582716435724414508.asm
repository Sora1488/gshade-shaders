//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float Strength;                    // Offset:    0 Size:     4 [unused]
//   int SampleDistance;                // Offset:    4 Size:     4 [unused]
//   int Quality;                       // Offset:    8 Size:     4 [unused]
//   float StartFade;                   // Offset:   12 Size:     4
//   float EndFade;                     // Offset:   16 Size:     4
//   float NormalBias;                  // Offset:   20 Size:     4
//   int DebugEnabled;                  // Offset:   24 Size:     4
//   int Bilateral;                     // Offset:   28 Size:     4
//   int BlurRadius;                    // Offset:   32 Size:     4
//   float BlurQuality;                 // Offset:   36 Size:     4
//   float Gamma;                       // Offset:   40 Size:     4 [unused]
//   float NormalPower;                 // Offset:   44 Size:     4
//   int FOV;                           // Offset:   48 Size:     4 [unused]
//   float DepthShrink;                 // Offset:   52 Size:     4 [unused]
//   int DepthEndFade;                  // Offset:   56 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__AOTex                        texture  float4          2d            t12      1 
// __V__AOTex2                       texture  float4          2d            t14      1 
// __V__NormalTex                    texture  float4          2d            t16      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t16
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 8
dcl_indexableTemp x0[32], 4
imax r0.x, cb0[1].z, l(0)
imin r0.x, r0.x, l(2)
ieq r0.y, r0.x, l(2)
if_nz r0.y
  sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t14.yxzw, s0
  mov o0.xyz, r0.yyyy
  ret 
endif 
imax r0.y, cb0[1].w, l(0)
mov_sat r0.z, cb0[1].y
imax r0.w, cb0[2].x, l(1)
imin r0.yw, r0.yyyw, l(0, 2, 0, 32)
itof r0.w, r0.w
add r1.x, -cb0[0].w, cb0[1].x
mul r1.y, r0.w, r0.w
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul r1.yz, r1.yyyy, l(0.000000, 0.721348, 1.442695, 0.000000)
exp r1.yz, r1.yyzy
sample_indexable(texture2d)(float,float,float,float) r1.w, v1.xyxx, t12.yzwx, s0
mov_sat r2.x, cb0[2].y
mul r0.w, r0.w, r2.x
mul r0.w, r0.w, l(3.000000)
if_nz r0.y
  sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t16.wxyz, s0, l(0.000000)
  mad r2.yzw, r2.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
else 
  mov r2.xyzw, l(0,0,0,0)
endif 
ieq r3.x, cb0[1].w, l(2)
movc r3.xy, r3.xxxx, l(0.000521,0,0,0), l(0,0.000926,0,0)
mov x0[0].x, l(1.000000)
div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul r1.y, r1.z, r1.y
mov x0[1].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[2].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[3].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[4].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[5].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[6].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[7].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[8].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[9].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[10].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[11].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[12].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[13].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[14].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[15].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[16].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[17].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[18].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[19].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[20].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[21].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[22].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[23].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[24].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[25].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[26].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[27].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[28].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[29].x, r3.z
div r3.z, r3.z, r1.y
mul r1.y, r1.z, r1.y
mov x0[30].x, r3.z
div r1.y, r3.z, r1.y
mov x0[31].x, r1.y
mov r4.x, r1.w
mov r4.y, l(1.000000)
mov r1.y, l(1)
loop 
  itof r1.z, r1.y
  ge r3.z, r1.z, r0.w
  breakc_nz r3.z
  imax r3.z, -r1.y, r1.y
  mov r3.z, x0[r3.z + 0].x
  if_nz r0.y
    mad r4.zw, r3.xxxy, r1.zzzz, v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r4.zwzz, t16.xyzw, s0, l(0.000000)
    mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r3.w, r2.yzwy, r5.xyzx
    max r3.w, r3.w, l(0.000000)
    mul r3.w, r3.w, r3.z
    add r5.x, r2.x, -r5.w
    mul r5.y, |r5.x|, |r5.x|
    ge r5.y, r5.y, cb0[0].w
    mad r5.x, |r5.x|, |r5.x|, -cb0[0].w
    div r5.x, r5.x, r1.x
    add_sat r5.x, -r5.x, l(1.000000)
    mul r5.x, r5.x, r5.x
    mul r5.x, r3.w, r5.x
    movc r3.w, r5.y, r5.x, r3.w
    sample_l_indexable(texture2d)(float,float,float,float) r4.z, r4.zwzz, t14.yzxw, s0, l(0.000000)
    mad r4.x, r4.z, r3.w, r4.x
    add r4.y, r3.w, r4.y
  else 
    mad r4.zw, r3.xxxy, r1.zzzz, v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r4.zwzz, t14.yzxw, s0, l(0.000000)
    mad r4.x, r1.z, r3.z, r4.x
    add r4.y, r3.z, r4.y
  endif 
  iadd r1.y, r1.y, l(1)
endloop 
add r1.y, -r0.z, l(1.000000)
mov r1.zw, r4.xxxy
mov r3.z, l(1)
loop 
  itof r3.w, r3.z
  ge r4.z, r3.w, r0.w
  breakc_nz r4.z
  imax r4.z, -r3.z, r3.z
  mov r4.z, x0[r4.z + 0].x
  if_nz r0.y
    mad r5.xy, -r3.xyxx, r3.wwww, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t16.xyzw, s0, l(0.000000)
    mad r7.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r4.w, r2.yzwy, r7.xyzx
    add r4.w, -r0.z, r4.w
    div_sat r4.w, r4.w, r1.y
    log r4.w, r4.w
    mul r4.w, r4.w, cb0[2].w
    exp r4.w, r4.w
    mad r6.xyzw, r6.xyzw, l(2.000000, 2.000000, 2.000000, 1.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r6.xyz, r4.wwww, r6.xyzx
    dp3 r5.z, r2.yzwy, r6.xyzx
    add r5.z, -r0.z, r5.z
    div_sat r5.z, r5.z, r1.y
    mul r5.z, r4.z, r5.z
    mad r4.w, -r6.w, r4.w, r2.x
    ge r5.w, |r4.w|, cb0[0].w
    add r4.w, |r4.w|, -cb0[0].w
    div r4.w, r4.w, r1.x
    add_sat r4.w, -r4.w, l(1.000000)
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, r5.z
    movc r4.w, r5.w, r4.w, r5.z
    sample_l_indexable(texture2d)(float,float,float,float) r5.x, r5.xyxx, t14.xyzw, s0, l(0.000000)
    mad r1.z, r5.x, r4.w, r1.z
    add r1.w, r1.w, r4.w
  else 
    mad r5.xy, -r3.xyxx, r3.wwww, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t14.yzwx, s0, l(0.000000)
    mad r1.z, r3.w, r4.z, r1.z
    add r1.w, r1.w, r4.z
  endif 
  iadd r3.z, r3.z, l(1)
endloop 
if_nz r0.x
  div o0.xyz, r1.zzzz, r1.wwww
  ret 
else 
  sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
  mul r0.xyz, r1.zzzz, r0.xyzx
  div o0.xyz, r0.xyzx, r1.wwww
  ret 
endif 
ret 
// Approximately 213 instruction slots used
