//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.750000, 0.250000, 0.250000, 0},
                              { 0.750000, 0.500000, 0.250000, 30.000000},
                              { 0.750000, 0.750000, 0.250000, 60.000000},
                              { 0.250000, 0.750000, 0.250000, 120.000000},
                              { 0.250000, 0.750000, 0.750000, 180.000000},
                              { 0.250000, 0.250000, 0.750000, 240.000000},
                              { 0.500000, 0.250000, 0.750000, 270.000000},
                              { 0.750000, 0.250000, 0.750000, 300.000000},
                              { 0.750000, 0.250000, 0.250000, 360.000000} }
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
max r0.w, r0.z, r0.y
max r0.w, r0.w, r0.x
min r1.x, r0.z, r0.y
min r1.x, r0.x, r1.x
add r1.x, r0.w, -r1.x
mad r1.y, -r1.x, l(0.500000), r0.w
ne r1.z, r1.x, l(0.000000)
add r2.xyz, -r0.xyzx, r0.zxyz
div r2.xyz, r2.xyzx, r1.xxxx
add r2.xyz, r2.xyzx, l(2.000000, 4.000000, 6.000000, 0.000000)
ge r0.xyz, r0.yzxy, r0.wwww
and r0.xyz, r0.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r0.xyz, r0.xyzx, r2.xyzx
max r0.y, r0.z, r0.y
max r0.x, r0.y, r0.x
mul r0.x, r0.x, l(0.166667)
frc r0.x, r0.x
eq r0.z, r1.y, l(1.000000)
mad r0.w, r1.y, l(2.000000), l(-1.000000)
add r0.w, -|r0.w|, l(1.000000)
div r0.w, r1.x, r0.w
movc r0.y, r0.z, l(0), r0.w
and r0.xy, r0.xyxx, r1.zzzz
mul r0.z, r0.x, l(360.000000)
mov r0.w, l(0)
mov r1.x, l(0)
loop 
  ige r1.z, r1.x, l(8)
  breakc_nz r1.z
  lt r1.z, icb[r1.x + 0].w, r0.z
  movc r0.w, r1.z, r1.x, r0.w
  iadd r1.x, r1.x, l(1)
endloop 
mad r0.x, r0.x, l(360.000000), -icb[r0.w + 0].w
add r0.z, -icb[r0.w + 0].w, icb[r0.w + 1].w
div_sat r0.x, r0.x, r0.z
max r0.z, icb[r0.w + 0].z, icb[r0.w + 0].y
max r0.z, r0.z, icb[r0.w + 0].x
min r1.x, icb[r0.w + 0].z, icb[r0.w + 0].y
min r1.x, r1.x, icb[r0.w + 0].x
add r1.x, r0.z, -r1.x
mad r2.z, -r1.x, l(0.500000), r0.z
ne r1.z, r1.x, l(0.000000)
add r3.xyz, -icb[r0.w + 0].xyzx, icb[r0.w + 0].zxyz
div r3.xyz, r3.xyzx, r1.xxxx
add r3.xyz, r3.xyzx, l(2.000000, 4.000000, 6.000000, 0.000000)
ge r4.xyz, icb[r0.w + 0].yzxy, r0.zzzz
and r4.xyz, r4.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r3.xyz, r3.xyzx, r4.xyzx
max r0.z, r3.z, r3.y
max r0.z, r0.z, r3.x
mul r0.z, r0.z, l(0.166667)
frc r3.x, r0.z
eq r0.z, r2.z, l(1.000000)
mad r1.w, r2.z, l(2.000000), l(-1.000000)
add r1.w, -|r1.w|, l(1.000000)
div r1.x, r1.x, r1.w
movc r3.y, r0.z, l(0), r1.x
and r2.xy, r1.zzzz, r3.xyxx
max r0.z, icb[r0.w + 1].z, icb[r0.w + 1].y
max r0.z, r0.z, icb[r0.w + 1].x
min r1.x, icb[r0.w + 1].z, icb[r0.w + 1].y
min r1.x, r1.x, icb[r0.w + 1].x
add r1.x, r0.z, -r1.x
mad r3.w, -r1.x, l(0.500000), r0.z
ne r1.z, r1.x, l(0.000000)
add r4.xyz, -icb[r0.w + 1].xyzx, icb[r0.w + 1].zxyz
div r4.xyz, r4.xyzx, r1.xxxx
add r4.xyz, r4.xyzx, l(2.000000, 4.000000, 6.000000, 0.000000)
ge r5.xyz, icb[r0.w + 1].yzxy, r0.zzzz
and r5.xyz, r5.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r4.xyz, r4.xyzx, r5.xyzx
max r0.z, r4.z, r4.y
max r0.z, r0.z, r4.x
mul r0.z, r0.z, l(0.166667)
frc r4.y, r0.z
eq r0.z, r3.w, l(1.000000)
mad r0.w, r3.w, l(2.000000), l(-1.000000)
add r0.w, -|r0.w|, l(1.000000)
div r0.w, r1.x, r0.w
movc r4.z, r0.z, l(0), r0.w
and r3.yz, r1.zzzz, r4.yyzy
lt r0.z, r3.y, r2.x
add r0.w, r3.y, l(1.000000)
movc r3.x, r0.z, r0.w, r3.y
add r1.xzw, -r2.xxyz, r3.xxzw
mad r0.xzw, r0.xxxx, r1.xxzw, r2.xxyz
frc r0.xzw, r0.xxzw
max r1.x, r0.y, l(0.000000)
add r1.z, -r1.y, l(1.000000)
max r1.z, r1.z, l(0.000000)
mul r1.x, r1.z, r1.x
add r0.w, r0.w, l(-0.500000)
mad r1.x, r1.x, l(0.950000), l(0.050000)
dp2 r0.w, r0.wwww, r1.xxxx
dp2_sat r0.y, r0.zzzz, r0.yyyy
add r0.z, r0.w, l(1.000000)
mul_sat r0.z, r0.z, r1.y
mov_sat r0.x, r0.x
mad r1.xyz, r0.xxxx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)
mad_sat r1.xyz, |r1.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)
add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mad r0.x, r0.z, l(2.000000), l(-1.000000)
add r0.x, -|r0.x|, l(1.000000)
mul r1.xyz, r0.xxxx, r1.xyzx
mad o0.xyz, r1.xyzx, r0.yyyy, r0.zzzz
mov o0.w, l(1.000000)
ret 
// Approximately 109 instruction slots used
