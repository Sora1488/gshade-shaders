//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__texGravitySeedMap            texture  float4          2d             t4      1 
// V__storageGravityMain                 UAV  float4          2d             u0      1 
// V__storageGravityDepth                UAV   float          2d             u1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_typed_texture2d (float,float,float,float) u1
dcl_input vThreadID.x
dcl_temps 5
dcl_tgsm_structured g0, 4, 768
dcl_tgsm_structured g1, 4, 768
dcl_tgsm_structured g2, 4, 768
dcl_tgsm_structured g3, 4, 768
dcl_thread_group 1, 1, 1
utof r0.x, vThreadID.x
add r0.y, r0.x, l(0.500000)
mul r1.x, r0.y, l(0.000521)
mov r0.y, l(0)
loop 
  uge r0.z, r0.y, l(768)
  breakc_nz r0.z
  store_structured g0.x, r0.y, l(0), r0.y
  imul null, r0.z, r0.y, l(1080)
  udiv r0.z, null, r0.z, l(768)
  utof r0.z, r0.z
  add r0.z, r0.z, l(0.500000)
  mul r1.y, r0.z, l(0.000926)
  sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s0, l(0.000000)
  mad r0.w, -r0.z, l(999.000000), l(1000.000000)
  div r0.z, r0.z, r0.w
  store_structured g2.x, r0.y, l(0), r0.z
  store_structured g1.x, r0.y, l(0), r0.z
  iadd r0.y, r0.y, l(1)
endloop 
mov r1.x, vThreadID.x
mov r1.zw, l(0,0,0,0)
mov r1.y, l(0)
loop 
  ige r0.y, r1.y, l(768)
  breakc_nz r0.y
  ld_structured r0.y, r1.y, l(0), g1.xxxx
  ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzw, t4.yzxw
  mul r0.w, r0.z, l(153.199997)
  ftou r0.w, r0.w
  store_structured g3.x, r1.y, l(0), r0.w
  itof r0.w, r1.y
  mad r0.z, r0.z, l(153.199997), r0.w
  min r0.z, r0.z, l(768.000000)
  ftou r0.z, r0.z
  iadd r0.w, r1.y, l(1)
  mov r2.x, r0.w
  loop 
    ult r2.y, r0.z, r2.x
    breakc_nz r2.y
    ld_structured r2.y, r2.x, l(0), g2.xxxx
    lt r2.z, r0.y, r2.y
    ld_structured r2.w, r2.x, l(0), g0.xxxx
    movc r2.z, r2.z, r1.y, r2.w
    store_structured g0.x, r2.x, l(0), r2.z
    min r2.y, r0.y, r2.y
    store_structured g2.x, r2.x, l(0), r2.y
    iadd r2.x, r2.x, l(1)
  endloop 
  mov r1.y, r0.w
endloop 
mov r1.x, vThreadID.x
mov r1.zw, l(0,0,0,0)
ftoi r0.x, r0.x
mov r2.x, l(0)
loop 
  uge r2.y, r2.x, l(768)
  breakc_nz r2.y
  ld_structured r2.y, r2.x, l(0), g0.xxxx
  ine r2.z, r2.y, r2.x
  if_nz r2.z
    imul null, r2.z, r2.y, l(1080)
    udiv r1.y, null, r2.z, l(768)
    ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyzw, t0.xyzw
    utof r1.y, r2.x
    utof r2.z, r2.y
    add r2.z, -r1.y, r2.z
    ld_structured r2.y, r2.y, l(0), g3.xxxx
    utof r2.y, r2.y
    div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
    mul_sat r2.y, r2.y, |r2.z|
    mad r2.z, r2.y, l(-2.000000), l(3.000000)
    mul r2.y, r2.y, r2.y
    mul r2.y, r2.y, r2.z
    add r4.xyzw, -r3.xyzw, l(0.550000, 1.000000, 0.950000, 1.000000)
    mad r3.xyzw, r2.yyyy, r4.xyzw, r3.xyzw
    ftoi r0.yzw, r1.yyyy
    store_uav_typed u0.xyzw, r0.xwww, r3.xyzw
    ld_structured r1.y, r2.x, l(0), g2.xxxx
    store_uav_typed u1.xyzw, r0.xyzw, r1.yyyy
  endif 
  iadd r2.x, r2.x, l(1)
endloop 
ret 
// Approximately 84 instruction slots used
