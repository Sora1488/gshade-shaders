//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float HardRedCutoff;               // Offset:    0 Size:     4
//   float SoftRedCutoff;               // Offset:    4 Size:     4
//   float HardGreenCutoff;             // Offset:    8 Size:     4
//   float SoftGreenCutoff;             // Offset:   12 Size:     4
//   float BlueCutoff;                  // Offset:   16 Size:     4
//   bool Yellow;                       // Offset:   20 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
ge r0.w, r0.x, cb0[0].x
ge r1.x, cb0[0].z, r0.y
and r0.w, r0.w, r1.x
ge r1.x, cb0[1].x, r0.z
and r0.w, r0.w, r1.x
if_nz r0.w
  if_nz cb0[1].y
    mov o0.xyz, r0.xxzx
    ret 
  else 
    mov o0.xyz, r0.yxzy
    ret 
  endif 
endif 
ge r0.w, r0.x, cb0[0].y
ge r1.y, cb0[0].w, r0.y
and r0.w, r0.w, r1.y
and r0.w, r1.x, r0.w
if_nz r0.w
  add r0.w, r0.x, -cb0[0].y
  add r1.x, -cb0[0].y, cb0[0].x
  div r0.w, r0.w, r1.x
  if_nz cb0[1].y
    add r1.xyz, -r0.xyzx, r0.xxzx
    mad o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
    ret 
  else 
    add r1.xyz, -r0.xyzx, r0.yxzy
    mad o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
    ret 
  endif 
endif 
mov o0.xyz, r0.xyzx
ret 
// Approximately 35 instruction slots used
