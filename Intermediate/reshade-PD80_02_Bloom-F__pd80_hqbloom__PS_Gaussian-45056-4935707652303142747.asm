//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float2 pp;                         // Offset:    0 Size:     8
//   bool debugBloom;                   // Offset:    8 Size:     4
//   float dither_strength;             // Offset:   12 Size:     4
//   float BloomMix;                    // Offset:   16 Size:     4
//   float BloomLimit;                  // Offset:   20 Size:     4
//   float GreyValue;                   // Offset:   24 Size:     4 [unused]
//   float bExposure;                   // Offset:   28 Size:     4 [unused]
//   float BlurSigma;                   // Offset:   32 Size:     4 [unused]
//   float BloomSaturation;             // Offset:   36 Size:     4
//   bool enableBKelvin;                // Offset:   40 Size:     4
//   uint BKelvin;                      // Offset:   44 Size:     4
//   float frametime;                   // Offset:   48 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__texNoiseRGB                  texture  float4          2d             t6      1 
// __V__pd80_hqbloom__texBloomAll    texture  float4          2d            t24      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t24
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t24.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
add r0.w, -cb0[1].y, l(1.000000)
add r0.w, -r0.w, l(2.000000)
mul r2.xy, v1.xyxx, l(3.750000, 2.109375, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t6.xyzw, s1
mul r1.w, cb0[0].w, l(0.003922)
mad r2.xyz, cb0[0].xxxx, l(0.618034, 0.618034, 0.618034, 0.000000), r2.xyzx
frc r2.xyz, r2.xyzx
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r2.xyz, r0.wwww, r2.xyzx
mul r2.xyz, r1.wwww, r2.xyzx
mul_sat r3.xyz, r0.xyzx, l(83.333336, 83.333336, 83.333336, 0.000000)
mad r4.xyz, r3.xyzx, l(-2.000000, -2.000000, -2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
mul r3.xyz, r3.xyzx, r3.xyzx
mul r3.xyz, r3.xyzx, r4.xyzx
mad_sat r0.xyz, r2.xyzx, r3.xyzx, r0.xyzx
if_nz cb0[2].z
  utof r0.w, cb0[2].w
  max r0.w, r0.w, l(1000.000000)
  min r0.w, r0.w, l(40000.000000)
  mul r1.w, r0.w, l(0.010000)
  ge r2.x, l(6600.000000), r0.w
  log r1.w, r1.w
  mad r1.w, r1.w, l(0.270384), l(-0.631841)
  min r3.y, r1.w, l(1.000000)
  mad r2.yz, r0.wwww, l(0.000000, 0.010000, 0.010000, 0.000000), l(0.000000, -60.000000, -10.000000, 0.000000)
  max r1.w, r2.y, l(0.000000)
  log r1.w, r1.w
  mul r2.yw, r1.wwww, l(0.000000, -0.133205, 0.000000, -0.075515)
  exp r2.yw, r2.yyyw
  mul r2.yw, r2.yyyw, l(0.000000, 1.292936, 0.000000, 1.129891)
  min r2.yw, r2.yyyw, l(0.000000, 1.000000, 0.000000, 1.000000)
  mov r3.x, l(1.000000)
  movc r3.xy, r2.xxxx, r3.xyxx, r2.ywyy
  ge r1.w, r0.w, l(6600.000000)
  lt r0.w, r0.w, l(1900.000000)
  log r2.x, r2.z
  mad_sat r2.x, r2.x, l(0.376522), l(-1.196254)
  movc r0.w, r0.w, l(0), r2.x
  movc r3.z, r1.w, l(1.000000), r0.w
  max r2.xyz, r0.yzxy, l(0.000001, 0.000001, 0.000001, 0.000000)
  lt r0.w, r2.x, r2.y
  movc r2.xy, r0.wwww, r2.yxyy, r2.xyxx
  lt r0.w, r2.z, r2.x
  movc r2.xyz, r0.wwww, r2.xyzx, r2.zyxz
  min r0.w, r2.y, r2.z
  add r0.w, -r0.w, r2.x
  mad r0.w, -r0.w, l(0.500000), r2.x
  mul r2.xyz, r0.xyzx, r3.xyzx
  max r2.xyw, r2.yzyx, l(0.000001, 0.000001, 0.000000, 0.000001)
  lt r1.w, r2.x, r2.y
  mov r3.xy, r2.yxyy
  mov r3.zw, l(0,0,-1.000000,0.666667)
  mov r4.xy, r3.yxyy
  mov r4.zw, l(0,0,0,-0.333333)
  movc r3.xyzw, r1.wwww, r3.xyzw, r4.xyzw
  lt r1.w, r2.w, r3.x
  mov r2.xyz, r3.xywx
  mov r3.xyw, r2.wywx
  movc r2.xyzw, r1.wwww, r2.xyzw, r3.xyzw
  min r1.w, r2.y, r2.w
  add r1.w, -r1.w, r2.x
  add r2.y, -r2.y, r2.w
  mad r2.w, r1.w, l(6.000000), l(0.000001)
  div r2.y, r2.y, r2.w
  add r2.y, r2.z, r2.y
  mad r2.x, -r1.w, l(0.500000), r2.x
  mad r2.x, r2.x, l(2.000000), l(-1.000000)
  add r2.x, -|r2.x|, l(1.000001)
  div r1.w, r1.w, r2.x
  mad r2.xyz, |r2.yyyy|, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)
  mad_sat r2.xyz, |r2.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)
  mad r2.w, r0.w, l(2.000000), l(-1.000000)
  add r2.w, -|r2.w|, l(1.000000)
  mul r1.w, r1.w, r2.w
  add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  mad r0.xyz, r2.xyzx, r1.wwww, r0.wwww
endif 
min r0.w, r0.y, r0.x
min r0.w, r0.z, r0.w
max r1.w, r0.y, r0.x
max r1.w, r0.z, r1.w
add r0.w, -r0.w, r1.w
dp3 r1.w, r0.xyzx, l(0.212656, 0.715158, 0.072186, 0.000000)
add r0.w, -r0.w, l(1.000000)
mad r0.w, cb0[2].y, r0.w, l(1.000000)
add r0.xyz, r0.xyzx, -r1.wwww
mad_sat r0.xyz, r0.wwww, r0.xyzx, r1.wwww
add r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r3.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, -r2.xyzx, r3.xyzx, -r1.xyzx
add r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r1.xyz, cb0[1].xxxx, r2.xyzx, r1.xyzx
movc o0.xyz, cb0[0].zzzz, r0.xyzx, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 97 instruction slots used
