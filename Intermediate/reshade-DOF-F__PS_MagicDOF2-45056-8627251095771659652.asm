//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float2 MouseCoords;                // Offset:    0 Size:     8
//   float Timer;                       // Offset:    8 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__texHDR2                      texture  float4          2d             t2      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t4      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t4.xyzw, s0
sample_l_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t6.yzwx, s0, l(0.000000)
mad r1.x, -r0.w, l(999.000000), l(1000.000000)
div_sat r0.w, r0.w, r1.x
mul r1.xy, cb0[0].xyxx, l(0.000521, 0.000926, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t6.xyzw, s0, l(0.000000)
mad r1.y, -r1.x, l(999.000000), l(1000.000000)
div r1.x, r1.x, r1.y
mov r1.yz, l(0,0,5,0)
loop 
  ige r1.w, l(0), r1.z
  breakc_nz r1.w
  add r1.y, r1.x, r1.y
  iadd r1.z, r1.z, l(-1)
endloop 
mul_sat r1.x, r1.y, l(0.200000)
mad r1.y, r1.x, l(-2.000000), l(3.000000)
mul r1.x, r1.x, r1.x
mul r1.x, r1.x, r1.y
mad r1.y, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r1.z, r0.w, r1.y
lt r1.z, r1.z, r1.x
mad r0.w, r1.y, r0.w, -r1.x
div r1.y, r0.w, r1.x
mul r1.x, r1.x, l(3.228072)
div_sat r0.w, r0.w, r1.x
movc r0.w, r1.z, r1.y, r0.w
mad_sat r0.w, r0.w, l(0.500000), l(0.500000)
mad r1.x, r0.w, l(2.000000), l(-1.000000)
lt r1.y, r0.w, l(0.500000)
mul r1.xz, |r1.xxxx|, l(26.500002, 0.000000, 0.082596, 0.000000)
movc r1.x, r1.y, r1.z, r1.x
lt r1.y, r1.x, l(1.200000)
if_nz r1.y
  mov o0.xyz, r0.xyzx
  mov o0.w, r0.w
  ret 
endif 
mov r1.yzw, l(0,0,0,0)
mov r0.w, l(0)
mov r2.x, l(-8)
loop 
  itof r2.y, r2.x
  lt r2.z, l(8.000000), r2.y
  breakc_nz r2.z
  mul r3.xy, r2.yyyy, l(0.500000, 0.866000, 0.000000, 0.000000)
  mul r2.yz, r1.xxxx, r3.xxyx
  mad r2.yz, r2.yyzy, l(0.000000, 0.000065, 0.000116, 0.000000), v1.xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r2.yzw, r2.yzyy, t2.wxyz, s0, l(0.000000)
  mov r3.z, -r3.x
  mul r3.xy, r1.xxxx, r3.zyzz
  mad r3.xy, r3.xyxx, l(0.000065, 0.000116, 0.000000, 0.000000), v1.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t2.xyzw, s0, l(0.000000)
  min r2.yzw, r2.yyzw, r3.xxyz
  mul r2.yzw, |r2.yyzw|, |r2.yyzw|
  mad r1.yzw, r2.yyzw, r2.yyzw, r1.yyzw
  add r0.w, r0.w, l(1.000000)
  iadd r2.x, r2.x, l(1)
endloop 
div_sat r1.yzw, r1.yyzw, r0.wwww
log r1.yzw, r1.yyzw
mul r1.yzw, r1.yyzw, l(0.000000, 0.250000, 0.250000, 0.250000)
exp r1.yzw, r1.yyzw
add r1.x, r1.x, l(-1.200000)
mul_sat r1.x, r1.x, l(1.250000)
mad r2.x, r1.x, l(-2.000000), l(3.000000)
mul r1.x, r1.x, r1.x
mul r1.x, r1.x, r2.x
add r1.yzw, -r0.xxyz, r1.yyzw
mad o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 73 instruction slots used
