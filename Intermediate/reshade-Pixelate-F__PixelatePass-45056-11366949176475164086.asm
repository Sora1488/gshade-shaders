//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int cell_size;                     // Offset:    0 Size:     4
//   float avg_amount;                  // Offset:    4 Size:     4
//   int stats;                         // Offset:    8 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__Texttex                      texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
dcl_indexableTemp x0[13], 4
dcl_indexableTemp x1[13], 4
mul r0.xy, v1.xyxx, l(1920.000000, 1080.000000, 0.000000, 0.000000)
itof r0.z, cb0[0].x
div r0.xy, r0.xyxx, r0.zzzz
round_ni r0.xy, r0.xyxx
mul r1.xy, r0.zzzz, r0.xyxx
mad r0.xy, r0.xyxx, r0.zzzz, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, l(0.000521, 0.000926, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
lt r0.x, l(0.100000), cb0[0].y
if_nz r0.x
  mul r0.x, r0.z, l(0.250000)
  mov r3.xyzw, l(0,0,0,0)
  mov r0.y, l(0)
  loop 
    ige r0.w, r0.y, l(4)
    breakc_nz r0.w
    itof r0.w, r0.y
    mad r4.x, r0.w, r0.x, r1.x
    mov r5.xyzw, r3.xyzw
    mov r0.w, l(0)
    loop 
      ige r1.z, r0.w, l(4)
      breakc_nz r1.z
      itof r1.z, r0.w
      mad r4.y, r1.z, r0.x, r1.y
      add r1.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
      mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000521, 0.000926)
      sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
      add r5.xyzw, r5.xyzw, r6.xyzw
      iadd r0.w, r0.w, l(1)
    endloop 
    mov r3.xyzw, r5.xyzw
    iadd r0.y, r0.y, l(1)
  endloop 
  mul r1.xyzw, r3.xyzw, cb0[0].yyyy
  add r0.x, -cb0[0].y, l(1.000000)
  mul r3.xyzw, r0.xxxx, r2.xyzw
  mad r2.xyzw, r1.xyzw, l(0.062500, 0.062500, 0.062500, 0.062500), r3.xyzw
  mov o0.yzw, r2.yyzw
else 
  mov o0.yzw, r2.yyzw
endif 
if_nz cb0[0].z
  div r0.xy, l(1920.000000, 1080.000000, 0.000000, 0.000000), r0.zzzz
  mov x0[0].x, l(16)
  mov x0[1].x, l(17)
  mov x0[2].x, l(18)
  mov x0[3].x, l(19)
  mov x0[4].x, l(20)
  mov x0[5].x, l(21)
  mov x0[6].x, l(22)
  mov x0[7].x, l(23)
  mov x0[8].x, l(24)
  mov x0[9].x, l(25)
  mov x0[10].x, l(13)
  mov x0[11].x, l(0)
  mov x0[12].x, l(14)
  mad r1.xyzw, v1.xyxy, l(1920.000000, 1080.000000, 1920.000000, 1080.000000), l(-1664.000000, -128.000000, -1664.000000, -192.000000)
  mul r0.zw, r1.xxxz, l(0.000000, 0.000000, 0.031250, 0.031250)
  round_ni r2.yz, |r0.xxyx|
  ne r2.yz, l(0.000000, 0.000000, 0.000000, 0.000000), r2.yyzy
  log r3.xy, |r0.xyxx|
  mul r3.xy, r3.xyxx, l(0.301030, 0.301030, 0.000000, 0.000000)
  round_pi r3.xy, r3.xyxx
  ftoi r3.xy, r3.xyxx
  and r2.yz, r2.yyzy, r3.xxyx
  lt r1.xz, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xxzx
  iadd r3.xy, r2.yzyy, l(1, 1, 0, 0)
  itof r3.xy, r3.xyxx
  lt r3.xy, r3.xyxx, -r0.zwzz
  or r1.xz, r1.xxzx, r3.xxyx
  if_z r1.x
    mul_sat r1.x, r1.y, l(0.015625)
    round_ni r1.y, r0.z
    lt r1.y, l(0.000000), r1.y
    if_nz r1.y
      round_pi r1.y, -r0.z
      ftoi r1.y, r1.y
      mov r2.w, |r0.x|
      mov r3.x, r1.y
      loop 
        ige r3.y, r3.x, l(0)
        breakc_nz r3.y
        mul r2.w, r2.w, l(10.000000)
        iadd r3.x, r3.x, l(1)
      endloop 
    else 
      round_pi r1.y, r0.z
      ftoi r1.y, r1.y
      mov r2.w, |r0.x|
      mov r3.x, r1.y
      loop 
        ige r3.y, r3.x, l(0)
        breakc_nz r3.y
        mul r2.w, r2.w, l(0.100000)
        iadd r3.x, r3.x, l(1)
      endloop 
    endif 
    ieq r1.y, r2.y, l(0)
    iadd r1.y, r1.y, -r2.y
    itof r1.y, r1.y
    ge r1.y, r0.z, r1.y
    mul r2.y, r2.w, l(10.000000)
    ge r2.y, r2.y, -r2.y
    movc r3.xy, r2.yyyy, l(10.000000,0.100000,0,0), l(-10.000000,-0.100000,0,0)
    mul r2.y, r2.w, r3.y
    frc r2.y, r2.y
    mul r2.y, r2.y, r3.x
    ge r0.x, r0.x, l(0.000000)
    movc r0.x, r0.x, l(11.000000), l(10.000000)
    movc r0.x, r1.y, r2.y, r0.x
    ftou r0.x, r0.x
    mov r0.x, x0[r0.x + 0].x
    itof r0.x, r0.x
    frc r3.x, r0.z
    frc r3.y, r1.x
    mul r0.x, r0.x, l(0.071429)
    frc r0.z, r0.x
    mul r1.x, r0.z, l(14.000000)
    round_z r1.y, r0.x
    add r0.xz, r1.xxyx, r3.xxyx
    mul r0.xz, r0.xxzx, l(0.071429, 0.000000, 0.142857, 0.000000)
    sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xzxx, t4.xyzw, s0
    add r2.x, r0.x, r2.x
  endif 
  mov x1[0].x, l(16)
  mov x1[1].x, l(17)
  mov x1[2].x, l(18)
  mov x1[3].x, l(19)
  mov x1[4].x, l(20)
  mov x1[5].x, l(21)
  mov x1[6].x, l(22)
  mov x1[7].x, l(23)
  mov x1[8].x, l(24)
  mov x1[9].x, l(25)
  mov x1[10].x, l(13)
  mov x1[11].x, l(0)
  mov x1[12].x, l(14)
  if_z r1.z
    mul_sat r0.x, r1.w, l(0.015625)
    round_ni r0.z, r0.w
    lt r0.z, l(0.000000), r0.z
    if_nz r0.z
      round_pi r0.z, -r0.w
      ftoi r0.z, r0.z
      mov r1.x, |r0.y|
      mov r1.y, r0.z
      loop 
        ige r1.z, r1.y, l(0)
        breakc_nz r1.z
        mul r1.x, r1.x, l(10.000000)
        iadd r1.y, r1.y, l(1)
      endloop 
    else 
      round_pi r0.z, r0.w
      ftoi r0.z, r0.z
      mov r1.x, |r0.y|
      mov r1.y, r0.z
      loop 
        ige r1.z, r1.y, l(0)
        breakc_nz r1.z
        mul r1.x, r1.x, l(0.100000)
        iadd r1.y, r1.y, l(1)
      endloop 
    endif 
    ieq r0.z, r2.z, l(0)
    iadd r0.z, r0.z, -r2.z
    itof r0.z, r0.z
    ge r0.z, r0.w, r0.z
    mul r1.y, r1.x, l(10.000000)
    ge r1.y, r1.y, -r1.y
    movc r1.yz, r1.yyyy, l(0,10.000000,0.100000,0), l(0,-10.000000,-0.100000,0)
    mul r1.x, r1.z, r1.x
    frc r1.x, r1.x
    mul r1.x, r1.x, r1.y
    ge r0.y, r0.y, l(0.000000)
    movc r0.y, r0.y, l(11.000000), l(10.000000)
    movc r0.y, r0.z, r1.x, r0.y
    ftou r0.y, r0.y
    mov r0.y, x1[r0.y + 0].x
    itof r0.y, r0.y
    frc r1.x, r0.w
    frc r1.y, r0.x
    mul r0.x, r0.y, l(0.071429)
    frc r0.y, r0.x
    mul r3.x, r0.y, l(14.000000)
    round_z r3.y, r0.x
    add r0.xy, r1.xyxx, r3.xyxx
    mul r0.xy, r0.xyxx, l(0.071429, 0.142857, 0.000000, 0.000000)
    sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t4.xyzw, s0
    add o0.x, r0.x, r2.x
  else 
    mov o0.x, r2.x
  endif 
else 
  mov o0.x, r2.x
endif 
ret 
// Approximately 198 instruction slots used
