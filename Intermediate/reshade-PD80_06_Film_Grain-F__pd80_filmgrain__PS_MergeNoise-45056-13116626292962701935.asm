//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool enable_test;                  // Offset:    0 Size:     4
//   int grainMotion;                   // Offset:    4 Size:     4 [unused]
//   float grainAdjust;                 // Offset:    8 Size:     4 [unused]
//   int grainSize;                     // Offset:   12 Size:     4 [unused]
//   int grainOrigColor;                // Offset:   16 Size:     4
//   bool use_negnoise;                 // Offset:   20 Size:     4
//   float grainColor;                  // Offset:   24 Size:     4 [unused]
//   float grainAmount;                 // Offset:   28 Size:     4
//   float grainIntensity;              // Offset:   32 Size:     4 [unused]
//   float grainDensity;                // Offset:   36 Size:     4 [unused]
//   float grainIntHigh;                // Offset:   40 Size:     4
//   float grainIntLow;                 // Offset:   44 Size:     4
//   bool enable_depth;                 // Offset:   48 Size:     4
//   bool display_depth;                // Offset:   52 Size:     4
//   float depthStart;                  // Offset:   56 Size:     4
//   float depthEnd;                    // Offset:   60 Size:     4
//   float depthCurve;                  // Offset:   64 Size:     4
//   float Timer;                       // Offset:   68 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__pd80_filmgrain__texNoise     texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
mov r0.zw, l(0,0,-1.000000,0.666667)
mov r1.zw, l(0,0,0,-0.333333)
mov r2.yz, l(0,0,0,0)
mov r2.x, v1.x
lt r3.xyz, v1.yyyy, l(0.250000, 0.500000, 0.750000, 0.000000)
movc r4.xyz, r3.zzzz, r2.zxzz, r2.zzxz
movc r2.xyz, r3.yyyy, r2.xyzx, r4.xyzx
movc r2.xyz, r3.xxxx, v1.xxxx, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t0.xyzw, s0
movc r2.xyz, cb0[0].xxxx, r2.xyzx, r3.xyzx
mov r0.xy, r2.zyzz
mov r1.xy, r0.yxyy
lt r2.w, r0.y, r2.z
movc r1.xyzw, r2.wwww, r0.xyzw, r1.xyzw
lt r0.x, r2.x, r1.x
mov r3.xyz, r1.xywx
mov r3.w, r2.x
mov r1.xyw, r3.wywx
movc r1.xyzw, r0.xxxx, r3.xyzw, r1.xyzw
min r0.x, r1.y, r1.w
add r0.x, -r0.x, r1.x
mad r0.x, r0.x, l(6.000000), l(0.000000)
add r0.z, -r1.y, r1.w
div r0.x, r0.z, r0.x
add r0.x, r0.x, r1.z
add r0.xz, |r0.xxxx|, l(-0.166667, 0.000000, -0.333333, 0.000000)
mul r0.xz, r0.xxzx, l(6.000000, 0.000000, 6.000000, 0.000000)
add r0.xz, -|r0.xxzx|, l(1.000000, 0.000000, 1.000000, 0.000000)
max r0.xz, r0.xxzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r0.xz, r0.xxzx, l(1.200000, 0.000000, 0.833333, 0.000000)
add r0.x, r0.z, r0.x
mul r0.z, r0.x, l(0.833333)
mad r0.x, -r0.x, l(1.666667), l(3.000000)
mul r0.z, r0.z, r0.z
mul_sat r0.x, r0.x, r0.z
min r0.z, r0.y, r2.x
min r0.z, r2.z, r0.z
max r0.y, r0.y, r2.x
max r0.y, r2.z, r0.y
add r1.xy, r0.yyyy, l(0.000000, -0.200000, 0.000000, 0.000000)
add r0.z, -r0.z, r1.x
mul_sat r0.w, r1.y, l(1.250000)
div r0.z, r0.z, r0.y
add_sat r0.z, r0.z, l(0.000000)
mul r0.x, r0.z, r0.x
mad_sat r0.z, -r0.y, l(5.000000), l(1.000000)
add r0.z, r0.z, r0.w
mul r0.w, r0.z, r0.z
mad r0.z, -r0.z, l(2.000000), l(3.000000)
mad r0.z, -r0.w, r0.z, l(1.000000)
mul r0.xw, r0.zzzy, r0.xxxy
itof r0.z, cb0[1].x
mul r0.x, r0.x, r0.z
mad r0.x, r0.x, l(-0.500000), l(1.000000)
mul r0.x, r0.x, cb0[1].w
mad r0.z, r0.y, l(6.000000), l(-15.000000)
mad r0.z, r0.y, r0.z, l(10.000000)
mul r0.y, r0.y, r0.w
mul r0.y, r0.z, r0.y
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t6.xyzw, s0
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r3.xyz, r1.xyzx, cb0[2].wwww
mad r1.xyz, r1.xyzx, cb0[2].zzzz, -r3.xyzx
mad r1.xyz, r0.yyyy, r1.xyzx, r3.xyzx
mad r3.xyz, |r1.zxyz|, l(-0.500000, -0.500000, -0.500000, 0.000000), -r1.xyzx
mad r0.yzw, r0.wwww, r3.xxyz, r1.xxyz
movc r0.yzw, cb0[1].yyyy, r0.yyzw, r1.xxyz
sample_l_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t2.xyzw, s0, l(0.000000)
mad r1.y, -r1.x, l(999.000000), l(1000.000000)
div r1.x, r1.x, r1.y
add r1.x, r1.x, -cb0[3].z
add r1.y, -cb0[3].z, cb0[3].w
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul_sat r1.x, r1.y, r1.x
mad r1.y, r1.x, l(-2.000000), l(3.000000)
mul r1.x, r1.x, r1.x
mul r1.x, r1.x, r1.y
log r1.x, r1.x
mul r1.x, r1.x, cb0[4].x
exp r1.x, r1.x
movc r1.y, cb0[3].x, r1.x, l(1.000000)
mul r0.yzw, r0.yyzw, r1.yyyy
mad_sat r0.xyz, r0.xxxx, r0.yzwy, r2.xyzx
dp3 r0.w, r0.xzyx, l(0.333333, 0.333333, 0.333334, 0.000000)
dp3 r1.y, r2.xzyx, l(0.333333, 0.333333, 0.333334, 0.000000)
add r0.w, r0.w, -r1.y
add r1.yzw, r0.wwww, r2.xxyz
min r0.w, r1.z, r1.y
min r0.w, r1.w, r0.w
lt r2.x, r0.w, l(0.000000)
dp3 r2.y, r1.ywzy, l(0.333333, 0.333333, 0.333334, 0.000000)
add r3.xyz, r1.yzwy, -r2.yyyy
mul r3.xyz, r2.yyyy, r3.xyzx
add r0.w, -r0.w, r2.y
div r3.xyz, r3.xyzx, r0.wwww
add r3.xyz, r2.yyyy, r3.xyzx
movc r2.xzw, r2.xxxx, r3.xxyz, r1.yyzw
add r3.xyz, -r2.yyyy, r2.xzwx
add r0.w, -r2.y, l(1.000000)
mul r3.xyz, r0.wwww, r3.xyzx
max r0.w, r1.z, r1.y
max r0.w, r1.w, r0.w
add r1.y, -r2.y, r0.w
lt r0.w, l(1.000000), r0.w
div r1.yzw, r3.xxyz, r1.yyyy
add r1.yzw, r1.yyzw, r2.yyyy
movc r1.yzw, r0.wwww, r1.yyzw, r2.xxzw
movc r0.xyz, cb0[1].xxxx, r1.yzwy, r0.xyzx
movc o0.xyz, cb0[3].yyyy, r1.xxxx, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 111 instruction slots used
