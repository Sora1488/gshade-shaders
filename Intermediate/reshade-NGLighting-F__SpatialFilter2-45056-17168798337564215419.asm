//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int Hints;                         // Offset:    0 Size:     4 [unused]
//   int Credits;                       // Offset:    4 Size:     4 [unused]
//   int Preprocessordefinitionstooltip;// Offset:    8 Size:     4 [unused]
//   float Timer;                       // Offset:   12 Size:     4 [unused]
//   float Frame;                       // Offset:   16 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__TexColor                     texture  float4          2d             t4      1 
// __V__SSSR_FilterTex0              texture  float4          2d            t16      1 
// __V__SSSR_FilterTex3              texture  float4          2d            t22      1 
// __V__SSSR_NormTex                 texture  float4          2d            t26      1 
// __V__SSSR_HLTex0                  texture  float4          2d            t34      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyz         2   TARGET   float   xyz 
// SV_TARGET                3   x           3   TARGET   float   x   
// SV_TARGET                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_texture2d (float,float,float,float) t26
dcl_resource_texture2d (float,float,float,float) t34
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.x
dcl_output o4.xyzw
dcl_temps 7
dcl_indexableTemp x0[8], 4
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t34.xyzw, s0
add r0.y, cb0[1].x, cb0[1].x
ge r0.y, r0.y, -r0.y
movc r0.yz, r0.yyyy, l(0,2.000000,0.500000,0), l(0,-2.000000,-0.500000,0)
mul r0.z, r0.z, cb0[1].x
frc r0.z, r0.z
mul r0.y, r0.z, r0.y
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.y
add r0.z, v0.y, l(1.000000)
movc r0.y, r0.y, r0.z, v0.y
add r0.z, v0.x, v0.x
ge r0.z, r0.z, -r0.z
movc r0.zw, r0.zzzz, l(0,0,2.000000,0.500000), l(0,0,-2.000000,-0.500000)
mul r0.w, r0.w, v0.x
frc r0.w, r0.w
mad r0.y, r0.z, r0.w, r0.y
add r0.z, r0.y, r0.y
ge r0.z, r0.z, -r0.z
movc r0.zw, r0.zzzz, l(0,0,2.000000,0.500000), l(0,0,-2.000000,-0.500000)
mul r0.y, r0.w, r0.y
frc r0.y, r0.y
mul r0.y, r0.y, r0.z
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t26.xyzw, s0, l(0.000000)
mad r0.zw, v1.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r2.x, r1.w, l(1000.000000)
mul r2.xy, r0.zwzz, r2.xxxx
mov r2.z, r1.w
mul r2.xyz, r2.xyzx, l(0.872665, 0.872665, 872.664612, 0.000000)
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
dp3 r0.z, r1.xyzx, r2.xyzx
mul r0.z, r0.z, r0.z
mul r2.xy, r0.xxxx, l(0.250000, 0.062500, 0.000000, 0.000000)
mov_sat r2.x, r2.x
sqrt r0.w, r2.x
mad r0.w, r0.w, l(-0.012000), l(0.015000)
mul r2.xz, r0.wwww, l(100.000000, 0.000000, 0.400000, 0.000000)
min r0.w, r2.x, l(1.000000)
add r0.w, -r0.w, l(1.000000)
min r2.x, r2.y, l(1.000000)
mad r2.x, r2.x, l(-6.000000), l(8.000000)
round_ne r2.x, r2.x
mul r2.xy, r2.xxxx, l(0.000521, 0.000926, 0.000000, 0.000000)
mad r3.xy, r0.yyyy, r2.xyxx, r2.xyxx
mul r4.xy, r3.xyxx, l(0.707107, 0.707107, 0.000000, 0.000000)
mov x0[0].xy, -r4.xyxx
mov r3.z, l(0)
mov x0[1].xy, r3.zyzz
mov r4.zw, -r4.yyyx
mov x0[2].xy, r4.xzxx
mov r3.w, -r3.x
mov x0[3].xy, r3.wzww
mov x0[4].xy, r3.xzxx
mov x0[5].xy, r4.wyww
mul r2.xy, r3.zyzz, l(1.000000, -1.000000, 0.000000, 0.000000)
mov x0[6].xy, r2.xyxx
mov x0[7].xy, r4.xyxx
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t16.xyzw, s0, l(0.000000)
mov r4.xyzw, r3.xyzw
mov r0.y, l(1)
mov r2.x, l(0)
loop 
  ilt r2.y, l(7), r2.x
  breakc_nz r2.y
  mov r2.yw, x0[r2.x + 0].xxxy
  add r2.yw, r2.yyyw, v1.xxxy
  mov x0[r2.x + 0].xy, r2.ywyy
  sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r2.ywyy, t26.xyzw, s0, l(0.000000)
  dp3 r5.x, r5.xyzx, r1.xyzx
  lt r5.x, r0.w, r5.x
  add r5.y, -r1.w, r5.w
  mul r5.y, r0.z, |r5.y|
  lt r5.y, r5.y, r2.z
  and r5.x, r5.y, r5.x
  sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r2.ywyy, t16.xyzw, s0, l(0.000000)
  and r2.yw, r5.xxxx, l(0, 0x3f800000, 0, 1)
  mad r4.xyzw, r6.xyzw, r2.yyyy, r4.xyzw
  iadd r0.y, r0.y, r2.w
  iadd r2.x, r2.x, l(1)
endloop 
itof r0.y, r0.y
div r1.xyzw, r4.xyzw, r0.yyyy
sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t16.xwyz, s0
add r0.z, r0.x, l(-8.000000)
mul_sat r0.z, r0.z, l(0.015625)
add r0.y, -r1.w, r0.y
mad r1.w, r0.z, r0.y, r1.w
max o0.xyzw, r1.xyzw, l(0.000001, 0.000001, 0.000001, 0.000001)
sample_indexable(texture2d)(float,float,float,float) o1.xyzw, v1.xyxx, t26.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) o4.xyzw, v1.xyxx, t22.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t4.wxyz, s0
dp3 r1.x, r0.yzwy, l(0.299000, 0.587000, 0.114000, 0.000000)
mul r1.y, r0.z, l(0.331000)
mad r1.y, r0.y, l(-0.169000), -r1.y
mad r1.y, r0.w, l(0.500000), r1.y
mul r0.z, r0.z, l(0.419000)
mad r0.y, r0.y, l(0.500000), -r0.z
mad r0.y, -r0.w, l(0.081000), r0.y
add r0.z, r1.x, r1.y
add r0.y, r0.z, r0.y
add o2.xyz, r0.yyyy, l(1.003922, 1.003922, 1.003922, 0.000000)
mov o3.x, r0.x
ret 
// Approximately 104 instruction slots used
