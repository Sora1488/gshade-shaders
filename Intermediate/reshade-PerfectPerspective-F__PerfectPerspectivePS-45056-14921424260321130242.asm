//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s2                              sampler      NA          NA             s2      1 
// __srgbV__ReShade__BackBufferTex    texture  float4          2d             t1      1 
// __V__BlueNoise__BlueNoiseTex      texture  float4          2d             t4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 4
mad r0.xyzw, v1.xyxy, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r0.xyzw, r0.xyzw, l(0.871576, 0.490261, 0.871576, 0.490261)
dp2 r1.x, r0.zwzz, r0.zwzz
sqrt r1.y, r1.x
rsq r1.x, r1.x
mul r1.z, r1.y, l(0.475255)
lt r1.y, l(2.104136), r1.y
max r1.w, r1.z, l(1.000000)
min r1.z, r1.z, l(1.000000)
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r1.z, r1.w, r1.z
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, l(0.020835), l(-0.085133)
mad r2.x, r1.w, r2.x, l(0.180141)
mad r2.x, r1.w, r2.x, l(-0.330299)
mad r1.w, r1.w, r2.x, l(0.999866)
mul r2.x, r1.w, r1.z
mad r2.x, r2.x, l(-2.000000), l(1.570796)
and r1.y, r1.y, r2.x
mad r1.y, r1.z, r1.w, r1.y
add r1.z, r1.y, r1.y
sincos null, r1.y, r1.y
log r1.y, |r1.y|
mul r1.y, r1.y, l(1.750000)
exp r1.y, r1.y
sincos r2.x, r3.x, r1.z
div r1.z, r2.x, r3.x
mul r1.x, r1.x, r1.z
mul r0.xyzw, r0.xyzw, r1.xxxx
mul r0.xy, r0.xyxx, l(1.000000, 1.777778, 0.000000, 0.000000)
mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.888889), l(0.000000, 0.000000, 0.500000, 0.500000)
sample_indexable(texture2d)(float,float,float,float) r1.xzw, r0.zwzz, t1.xwyz, s2
mov r0.xy, |r0.xyxx|
mul r0.z, r0.x, l(1.777778)
add r0.xy, r0.zyzz, l(-1.715778, -0.938000, 0.000000, 0.000000)
max r0.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, l(16.129032, 16.129032, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, r0.xyxx
mul r0.xy, r0.xyxx, r0.xyxx
add r0.x, r0.y, r0.x
log r0.x, r0.x
mul r0.x, r0.x, l(0.250000)
exp r0.x, r0.x
add r0.x, r0.x, l(-1.000000)
deriv_rtx_coarse r2.x, r0.x
deriv_rty_coarse r2.y, r0.x
dp2 r0.y, r2.xyxx, r2.xyxx
rsq r0.y, r0.y
mad_sat r0.x, r0.y, r0.x, l(0.500000)
add r0.yzw, -r1.xxzw, l(0.000000, 0.002090, 0.002090, 0.002090)
mad r0.yzw, r0.yyzw, l(0.000000, 0.911408, 0.911408, 0.911408), r1.xxzw
mad r0.yzw, -r1.yyyy, r1.xxzw, r0.yyzw
mul r1.xyz, r1.xzwx, r1.yyyy
mad r0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
log r1.xyz, |r0.xyzx|
mul r1.xyz, r1.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
exp r1.xyz, r1.xyzx
mad r1.xyz, r1.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
ge r2.xyz, l(0.003131, 0.003131, 0.003131, 0.000000), r0.xyzx
mul r0.xyz, r0.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
movc r0.xyz, r2.xyzx, r0.xyzx, r1.xyzx
mul r0.xyz, r0.xyzx, l(255.000000, 255.000000, 255.000000, 0.000000)
frc r1.xyz, r0.xyzx
ftou r2.xy, v0.xyxx
and r2.xy, r2.xyxx, l(63, 63, 0, 0)
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyzw, t4.xyzw
ge r1.xyz, r1.xyzx, r2.xyzx
round_pi r2.xyz, r0.xyzx
round_ni r0.xyz, r0.xyzx
movc r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, l(0.003922, 0.003922, 0.003922, 0.000000)
ret 
// Approximately 73 instruction slots used
