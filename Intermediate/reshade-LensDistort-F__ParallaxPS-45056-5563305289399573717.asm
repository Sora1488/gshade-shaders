//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool ShowGrid;                     // Offset:    0 Size:     4 [unused]
//   float4 K;                          // Offset:   16 Size:    16 [unused]
//   float S;                           // Offset:   32 Size:     4 [unused]
//   bool UseVignette;                  // Offset:   36 Size:     4 [unused]
//   float T;                           // Offset:   40 Size:     4 [unused]
//   float2 P;                          // Offset:   48 Size:     8 [unused]
//   float2 Q;                          // Offset:   56 Size:     8 [unused]
//   float2 C;                          // Offset:   64 Size:     8 [unused]
//   float4 Kp;                         // Offset:   80 Size:    16
//   bool MirrorBorder;                 // Offset:   96 Size:     4 [unused]
//   bool BorderVignette;               // Offset:  100 Size:     4 [unused]
//   float4 BorderColor;                // Offset:  112 Size:    16 [unused]
//   float BorderCorner;                // Offset:  128 Size:     4 [unused]
//   uint BorderGContinuity;            // Offset:  132 Size:     4 [unused]
//   float DimGridBackground;           // Offset:  136 Size:     4 [unused]
//   uint GridLook;                     // Offset:  140 Size:     4 [unused]
//   uint GridSize;                     // Offset:  144 Size:     4 [unused]
//   uint GridWidth;                    // Offset:  148 Size:     4 [unused]
//   float GridTilt;                    // Offset:  152 Size:     4 [unused]
//   uint ChromaticSamplesLimit;        // Offset:  156 Size:     4 [unused]
//   uint ParallaxSamples;              // Offset:  160 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s2                              sampler      NA          NA             s2      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __srgbV__ReShade__BackBufferTex    texture  float4          2d             t1      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__BlueNoise__BlueNoiseTex      texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 4
eq r0.xyzw, cb0[5].xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r0.xy, r0.zwzz, r0.xyxx
and r0.x, r0.y, r0.x
if_nz r0.x
  ftou r0.xy, v0.xyxx
  mov r0.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyzw, t0.xyzw
  mov o0.xyz, r0.xyzx
  ret 
endif 
mul r0.xy, v1.xyxx, l(0.573674, 1.019864, 0.000000, 0.000000)
mad r0.zw, v1.xxxy, l(0.000000, 0.000000, 0.573674, 1.019864), l(0.000000, 0.000000, 0.500000, 0.500000)
dp2 r1.x, v1.xyxx, v1.xyxx
mul r1.y, r1.x, r1.x
mul r1.z, r1.x, r1.y
mul r1.w, r1.x, r1.z
dp4 r1.x, cb0[5].xyzw, r1.xyzw
add r1.x, r1.x, l(1.000000)
rcp r1.x, r1.x
add r1.x, r1.x, l(-1.000000)
mul r0.xy, r0.xyxx, r1.xxxx
umax r1.x, cb0[10].x, l(2)
umin r1.x, r1.x, l(255)
iadd r1.x, r1.x, l(-1)
utof r1.y, r1.x
rcp r1.y, r1.y
mov r1.z, l(0)
mov r1.w, r1.x
loop 
  ilt r2.x, r1.w, l(0)
  breakc_nz r2.x
  itof r2.x, r1.w
  mul r2.y, r1.y, r2.x
  mad r2.zw, -r0.xxxy, r2.yyyy, r0.zzzw
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r2.zwzz, t2.yzxw, s0, l(0.000000)
  mad r2.w, -r2.z, l(999.000000), l(1000.000000)
  div r2.z, r2.z, r2.w
  add r2.z, -r2.z, l(1.000000)
  ge r2.w, r2.z, r2.y
  if_nz r2.w
    iadd r2.w, r1.w, l(3)
    utof r2.w, r2.w
    mul r3.x, r1.y, r2.w
    mad r2.w, r2.w, r1.y, l(-1.000000)
    mad r3.yz, -r0.xxyx, r3.xxxx, r0.zzwz
    sample_l_indexable(texture2d)(float,float,float,float) r3.y, r3.yzyy, t2.yxzw, s0, l(0.000000)
    mad r3.z, -r3.y, l(999.000000), l(1000.000000)
    div r3.y, r3.y, r3.z
    add r2.w, r2.w, r3.y
    add r2.z, r2.z, r2.w
    mad r2.z, -r2.x, r1.y, r2.z
    div r2.z, r2.w, r2.z
    mad r2.x, r2.x, r1.y, -r3.x
    mad r1.z, r2.z, r2.x, r3.x
    break 
  endif 
  iadd r1.w, r1.w, l(-1)
  mov r1.z, r2.y
endloop 
mad r0.xy, -r0.xyxx, r1.zzzz, r0.zwzz
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t1.xyzw, s2
ge r1.xyz, l(0.003131, 0.003131, 0.003131, 0.000000), r0.xyzx
mul r2.xyz, r0.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
log r0.xyz, |r0.xyzx|
mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
exp r0.xyz, r0.xyzx
mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
movc r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
ftou r1.xy, v0.xyxx
mul r0.xyz, r0.xyzx, l(255.000000, 255.000000, 255.000000, 0.000000)
and r1.xy, r1.xyxx, l(63, 63, 0, 0)
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t4.xyzw
frc r2.xyz, r0.xyzx
ge r1.xyz, r2.xyzx, r1.xyzx
round_pi r2.xyz, r0.xyzx
round_ni r0.xyz, r0.xyzx
movc r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, l(0.003922, 0.003922, 0.003922, 0.000000)
ret 
// Approximately 80 instruction slots used
