//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 8
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t2.xyzw, s0, l(0.000000)
mad r0.y, -r0.x, l(999.000000), l(1000.000000)
div r0.x, r0.x, r0.y
add r1.xyzw, v1.xyxy, l(0.000000, -0.000926, 0.000521, -0.000926)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r2.x, r0.y, r0.z
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r1.x, r0.y, r0.z
add r3.xyzw, v1.xyxy, l(0.000521, 0.000000, 0.000521, 0.000926)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r3.xyxx, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r2.z, r0.y, r0.z
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r3.zwzz, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r1.z, r0.y, r0.z
add r3.xyzw, v1.xyxy, l(0.000000, 0.000926, -0.000521, 0.000926)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r3.xyxx, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r2.y, r0.y, r0.z
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r3.zwzz, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r1.y, r0.y, r0.z
add r3.xyzw, v1.xyxy, l(-0.000521, 0.000000, -0.000521, -0.000926)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r3.xyxx, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r2.w, r0.y, r0.z
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r3.zwzz, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r1.w, r0.y, r0.z
add r3.xyzw, v1.xyxy, l(0.000000, -0.001852, 0.001042, -0.001852)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r3.xyxx, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r0.y, r0.y, r0.z
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r3.zwzz, t2.yzxw, s0, l(0.000000)
mad r0.w, -r0.z, l(999.000000), l(1000.000000)
div r0.z, r0.z, r0.w
add r3.xyzw, v1.xyxy, l(0.001042, 0.000000, 0.001042, 0.001852)
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t2.yzwx, s0, l(0.000000)
mad r3.x, -r0.w, l(999.000000), l(1000.000000)
div r0.w, r0.w, r3.x
sample_l_indexable(texture2d)(float,float,float,float) r3.x, r3.zwzz, t2.xyzw, s0, l(0.000000)
mad r3.y, -r3.x, l(999.000000), l(1000.000000)
div r3.x, r3.x, r3.y
add r4.xyzw, v1.xyxy, l(0.000000, 0.001852, -0.001042, 0.001852)
sample_l_indexable(texture2d)(float,float,float,float) r3.y, r4.xyxx, t2.yxzw, s0, l(0.000000)
mad r3.z, -r3.y, l(999.000000), l(1000.000000)
div r3.y, r3.y, r3.z
sample_l_indexable(texture2d)(float,float,float,float) r3.z, r4.zwzz, t2.yzxw, s0, l(0.000000)
mad r3.w, -r3.z, l(999.000000), l(1000.000000)
div r3.z, r3.z, r3.w
add r4.xyzw, v1.xyxy, l(-0.001042, 0.000000, -0.001042, -0.001852)
sample_l_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t2.yzwx, s0, l(0.000000)
mad r4.x, -r3.w, l(999.000000), l(1000.000000)
div r3.w, r3.w, r4.x
sample_l_indexable(texture2d)(float,float,float,float) r4.x, r4.zwzz, t2.xyzw, s0, l(0.000000)
mad r4.y, -r4.x, l(999.000000), l(1000.000000)
div r4.x, r4.x, r4.y
add r5.xyzw, v1.xyxy, l(0.000000, -0.002778, 0.001563, -0.002778)
sample_l_indexable(texture2d)(float,float,float,float) r4.y, r5.xyxx, t2.yxzw, s0, l(0.000000)
mad r4.z, -r4.y, l(999.000000), l(1000.000000)
div r4.y, r4.y, r4.z
sample_l_indexable(texture2d)(float,float,float,float) r4.z, r5.zwzz, t2.yzxw, s0, l(0.000000)
mad r4.w, -r4.z, l(999.000000), l(1000.000000)
div r4.z, r4.z, r4.w
add r5.xyzw, v1.xyxy, l(0.001563, 0.000000, 0.001563, 0.002778)
sample_l_indexable(texture2d)(float,float,float,float) r4.w, r5.xyxx, t2.yzwx, s0, l(0.000000)
mad r5.x, -r4.w, l(999.000000), l(1000.000000)
div r4.w, r4.w, r5.x
sample_l_indexable(texture2d)(float,float,float,float) r5.x, r5.zwzz, t2.xyzw, s0, l(0.000000)
mad r5.y, -r5.x, l(999.000000), l(1000.000000)
div r5.x, r5.x, r5.y
add r6.xyzw, v1.xyxy, l(0.000000, 0.002778, -0.001563, 0.002778)
sample_l_indexable(texture2d)(float,float,float,float) r5.y, r6.xyxx, t2.yxzw, s0, l(0.000000)
mad r5.z, -r5.y, l(999.000000), l(1000.000000)
div r5.y, r5.y, r5.z
sample_l_indexable(texture2d)(float,float,float,float) r5.z, r6.zwzz, t2.yzxw, s0, l(0.000000)
mad r5.w, -r5.z, l(999.000000), l(1000.000000)
div r5.z, r5.z, r5.w
add r6.xyzw, v1.xyxy, l(-0.001563, 0.000000, -0.001563, -0.002778)
sample_l_indexable(texture2d)(float,float,float,float) r5.w, r6.xyxx, t2.yzwx, s0, l(0.000000)
mad r6.x, -r5.w, l(999.000000), l(1000.000000)
div r5.w, r5.w, r6.x
sample_l_indexable(texture2d)(float,float,float,float) r6.x, r6.zwzz, t2.xyzw, s0, l(0.000000)
mad r6.y, -r6.x, l(999.000000), l(1000.000000)
div r6.x, r6.x, r6.y
max r6.yz, r1.zzwz, r2.zzwz
max r6.yz, r1.xxyx, r6.yyzy
min r7.xy, r1.zwzz, r2.zwzz
min r7.xy, r1.xyxx, r7.xyxx
max r6.yz, r2.xxyx, r6.yyzy
min r7.xy, r2.xyxx, r7.xyxx
max r6.y, r6.z, r6.y
min r6.z, r7.y, r7.x
add r6.y, -r6.z, r6.y
ge r6.y, r6.y, l(0.022000)
max r6.z, r0.w, r3.x
max r6.z, r0.z, r6.z
max r6.z, r0.y, r6.z
min r0.w, r0.w, r3.x
min r0.z, r0.w, r0.z
min r0.y, r0.z, r0.y
max r0.z, r3.w, r4.x
max r0.z, r0.z, r3.z
max r0.z, r0.z, r3.y
min r0.w, r3.w, r4.x
min r0.w, r0.w, r3.z
min r0.w, r0.w, r3.y
max r0.z, r0.z, r6.z
min r0.y, r0.w, r0.y
add r0.y, -r0.y, r0.z
ge r0.y, r0.y, l(0.022000)
or r0.y, r6.y, r0.y
max r0.z, r4.w, r5.x
max r0.z, r0.z, r4.z
max r0.z, r0.z, r4.y
min r0.w, r4.w, r5.x
min r0.w, r0.w, r4.z
min r0.w, r0.w, r4.y
max r3.x, r5.w, r6.x
max r3.x, r3.x, r5.z
max r3.x, r3.x, r5.y
min r3.y, r5.w, r6.x
min r3.y, r3.y, r5.z
min r3.y, r3.y, r5.y
max r0.z, r0.z, r3.x
min r0.w, r0.w, r3.y
add r0.z, -r0.w, r0.z
ge r0.z, r0.z, l(0.022000)
or r0.y, r0.y, r0.z
min r0.z, r2.w, r2.z
min r0.z, r0.z, r2.y
min r0.z, r0.z, r2.x
min r0.w, r1.w, r1.z
min r0.w, r0.w, r1.y
min r0.w, r0.w, r1.x
max r3.x, r2.w, r2.z
max r3.x, r2.y, r3.x
max r3.x, r2.x, r3.x
max r3.y, r1.w, r1.z
max r3.y, r1.y, r3.y
max r3.y, r1.x, r3.y
max r3.x, r3.y, r3.x
min r0.z, r0.w, r0.z
add r0.z, -r0.z, r3.x
add r0.z, r0.z, l(0.000010)
div r0.w, r0.x, r0.z
div r2.xyzw, r2.xyzw, r0.zzzz
div r1.xyzw, r1.xyzw, r0.zzzz
add r2.xyzw, -r0.wwww, r2.xyzw
add r1.xyzw, -r0.wwww, r1.xyzw
add r0.zw, -|r2.yyyw|, |r2.xxxz|
max r0.z, |r0.w|, |r0.z|
add r1.xy, -|r1.ywyy|, |r1.xzxx|
max r0.w, |r1.y|, |r1.x|
max r0.z, r0.w, r0.z
min r0.z, r0.z, l(1.000000)
mul r0.w, r0.z, r0.z
mul r0.z, r0.w, r0.z
mul r0.z, r0.z, l(3.000000)
add r0.w, r0.x, l(1.400000)
mul_sat r0.w, r0.w, l(5.000000)
mad r1.x, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.x
add r0.x, -r0.x, l(0.240000)
mul_sat r0.x, r0.x, l(5.000000)
mad r1.x, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r1.x
mul r0.x, r0.x, r0.w
mul r0.x, r0.x, r0.z
ge r0.x, r0.x, l(0.900000)
or r0.x, r0.y, r0.x
if_nz r0.x
  mov o0.xyz, l(0,0,0,0)
  ret 
else 
  sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
  mov o0.xyz, r0.xyzx
  ret 
endif 
ret 
// Approximately 184 instruction slots used
