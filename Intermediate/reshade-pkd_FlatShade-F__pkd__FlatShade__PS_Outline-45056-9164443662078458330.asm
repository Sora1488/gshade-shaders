//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int CFG_QUANT_ADJUSTORDER;         // Offset:    0 Size:     4 [unused]
//   float CFG_QUANT_LUMALEVELS;        // Offset:    4 Size:     4 [unused]
//   float CFG_QUANT_RGBLEVELS;         // Offset:    8 Size:     4 [unused]
//   bool CFG_BACKGROUND_QUANT;         // Offset:   12 Size:     4 [unused]
//   float CFG_FOREGROUND_LIMIT;        // Offset:   16 Size:     4 [unused]
//   float CFG_QUANT_LUMALEVELS_BACKGROUND;// Offset:   20 Size:     4 [unused]
//   float CFG_QUANT_RGBLEVELS_BACKGROUND;// Offset:   24 Size:     4 [unused]
//   bool CFG_OUTLINE_ENABLED;          // Offset:   28 Size:     4
//   float3 CFG_OUTLINE_COLOR;          // Offset:   32 Size:    12
//   float CFG_OUTLINE_OUTER_WIDTH;     // Offset:   44 Size:     4
//   float CFG_OUTLINE_INNER_WIDTH;     // Offset:   48 Size:     4
//   int CFG_OUTLINE_FALLOFF;           // Offset:   52 Size:     4
//   float CFG_OUTLINE_DEPTH_BOUNDARY_START;// Offset:   56 Size:     4
//   float CFG_OUTLINE_DEPTH_BOUNDARY_END;// Offset:   60 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 6
dcl_indexableTemp x0[3], 4
dcl_indexableTemp x1[3], 4
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
if_z cb0[1].w
  mov o0.xyz, r0.xyzx
  ret 
endif 
sample_l_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t2.yzwx, s0, l(0.000000)
mad r1.x, -r0.w, l(999.000000), l(1000.000000)
div r0.w, r0.w, r1.x
mov x0[0].xyzw, l(0,0,0,0)
mov x0[1].xyzw, l(0,0,0,0)
mov x0[2].xyzw, l(0,0,0,0)
mov x1[0].xyzw, l(0,0,0,0)
mov x1[1].xyzw, l(0,0,0,0)
mov x1[2].xyzw, l(0,0,0,0)
max r1.x, cb0[2].w, l(1.000000)
max r1.w, cb0[3].x, l(1.000000)
min r1.yz, r1.xxwx, l(0.000000, 3.000000, 3.000000, 0.000000)
ieq r2.xyz, cb0[3].yyyy, l(1, 3, 2, 0)
add r1.w, -cb0[3].z, cb0[3].w
add r2.w, r0.w, -cb0[3].z
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul_sat r1.w, r1.w, r2.w
mad r2.w, r1.w, l(-2.000000), l(3.000000)
mul r1.w, r1.w, r1.w
mad r1.x, -r2.w, r1.w, l(1.000000)
or r2.xy, r2.yyyy, r2.xzxx
ge r1.w, r0.w, cb0[3].z
ge r2.z, cb0[3].w, r0.w
and r2.zw, r2.zzzz, l(0, 0, 0x3f800000, 0)
movc r2.zw, r1.wwww, r2.zzzw, r1.yyyz
movc r3.yz, r2.yyyy, r2.zzwz, r1.yyzy
mov r3.x, l(1.000000)
movc r1.xyz, r2.xxxx, r1.xyzx, r3.xyzx
max r1.y, r1.z, r1.y
round_z r1.z, r1.y
lt r1.z, l(0.000000), r1.z
if_nz r1.z
  ftoi r1.y, r1.y
  ilt r1.z, l(0), r1.y
  if_nz r1.z
    add r2.xyzw, v1.xyxy, l(0.000000, -0.000926, 0.000521, -0.000926)
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.xyxx, t2.yzxw, s0, l(0.000000)
    mad r1.w, -r1.z, l(999.000000), l(1000.000000)
    div r3.x, r1.z, r1.w
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.zwzz, t2.yzxw, s0, l(0.000000)
    mad r1.w, -r1.z, l(999.000000), l(1000.000000)
    div r3.y, r1.z, r1.w
    add r2.xyzw, v1.xyxy, l(0.000521, 0.000000, 0.000521, 0.000926)
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.xyxx, t2.yzxw, s0, l(0.000000)
    mad r1.w, -r1.z, l(999.000000), l(1000.000000)
    div r3.z, r1.z, r1.w
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.zwzz, t2.yzxw, s0, l(0.000000)
    mad r1.w, -r1.z, l(999.000000), l(1000.000000)
    div r3.w, r1.z, r1.w
    mov x0[0].xyzw, r3.xyzw
    add r2.xyzw, v1.xyxy, l(0.000000, 0.000926, -0.000521, 0.000926)
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.xyxx, t2.yzxw, s0, l(0.000000)
    mad r1.w, -r1.z, l(999.000000), l(1000.000000)
    div r3.x, r1.z, r1.w
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.zwzz, t2.yzxw, s0, l(0.000000)
    mad r1.w, -r1.z, l(999.000000), l(1000.000000)
    div r3.y, r1.z, r1.w
    add r2.xyzw, v1.xyxy, l(-0.000521, 0.000000, -0.000521, -0.000926)
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.xyxx, t2.yzxw, s0, l(0.000000)
    mad r1.w, -r1.z, l(999.000000), l(1000.000000)
    div r3.z, r1.z, r1.w
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r2.zwzz, t2.yzxw, s0, l(0.000000)
    mad r1.w, -r1.z, l(999.000000), l(1000.000000)
    div r3.w, r1.z, r1.w
    mov x1[0].xyzw, r3.xyzw
    mov r1.z, l(1)
  else 
    mov r1.z, l(0)
  endif 
  ilt r1.w, r1.z, r1.y
  if_nz r1.w
    add r2.xyzw, v1.xyxy, l(0.000000, -0.001852, 0.001042, -0.001852)
    sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t2.xyzw, s0, l(0.000000)
    mad r2.y, -r2.x, l(999.000000), l(1000.000000)
    div r3.x, r2.x, r2.y
    sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s0, l(0.000000)
    mad r2.y, -r2.x, l(999.000000), l(1000.000000)
    div r3.y, r2.x, r2.y
    add r2.xyzw, v1.xyxy, l(0.001042, 0.000000, 0.001042, 0.001852)
    sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t2.xyzw, s0, l(0.000000)
    mad r2.y, -r2.x, l(999.000000), l(1000.000000)
    div r3.z, r2.x, r2.y
    sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s0, l(0.000000)
    mad r2.y, -r2.x, l(999.000000), l(1000.000000)
    div r3.w, r2.x, r2.y
    mov x0[1].xyzw, r3.xyzw
    add r2.xyzw, v1.xyxy, l(0.000000, 0.001852, -0.001042, 0.001852)
    sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t2.xyzw, s0, l(0.000000)
    mad r2.y, -r2.x, l(999.000000), l(1000.000000)
    div r3.x, r2.x, r2.y
    sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s0, l(0.000000)
    mad r2.y, -r2.x, l(999.000000), l(1000.000000)
    div r3.y, r2.x, r2.y
    add r2.xyzw, v1.xyxy, l(-0.001042, 0.000000, -0.001042, -0.001852)
    sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t2.xyzw, s0, l(0.000000)
    mad r2.y, -r2.x, l(999.000000), l(1000.000000)
    div r3.z, r2.x, r2.y
    sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s0, l(0.000000)
    mad r2.y, -r2.x, l(999.000000), l(1000.000000)
    div r3.w, r2.x, r2.y
    mov x1[1].xyzw, r3.xyzw
    mov r1.z, l(2)
  endif 
  ilt r1.y, r1.z, r1.y
  and r1.y, r1.y, r1.w
  if_nz r1.y
    add r2.xyzw, v1.xyxy, l(0.000000, -0.002778, 0.001563, -0.002778)
    sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t2.yxzw, s0, l(0.000000)
    mad r1.z, -r1.y, l(999.000000), l(1000.000000)
    div r3.x, r1.y, r1.z
    sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t2.yxzw, s0, l(0.000000)
    mad r1.z, -r1.y, l(999.000000), l(1000.000000)
    div r3.y, r1.y, r1.z
    add r2.xyzw, v1.xyxy, l(0.001563, 0.000000, 0.001563, 0.002778)
    sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t2.yxzw, s0, l(0.000000)
    mad r1.z, -r1.y, l(999.000000), l(1000.000000)
    div r3.z, r1.y, r1.z
    sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t2.yxzw, s0, l(0.000000)
    mad r1.z, -r1.y, l(999.000000), l(1000.000000)
    div r3.w, r1.y, r1.z
    mov x0[2].xyzw, r3.xyzw
    add r2.xyzw, v1.xyxy, l(0.000000, 0.002778, -0.001563, 0.002778)
    sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t2.yxzw, s0, l(0.000000)
    mad r1.z, -r1.y, l(999.000000), l(1000.000000)
    div r3.x, r1.y, r1.z
    sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t2.yxzw, s0, l(0.000000)
    mad r1.z, -r1.y, l(999.000000), l(1000.000000)
    div r3.y, r1.y, r1.z
    add r2.xyzw, v1.xyxy, l(-0.001563, 0.000000, -0.001563, -0.002778)
    sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t2.yxzw, s0, l(0.000000)
    mad r1.z, -r1.y, l(999.000000), l(1000.000000)
    div r3.z, r1.y, r1.z
    sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t2.yxzw, s0, l(0.000000)
    mad r1.z, -r1.y, l(999.000000), l(1000.000000)
    div r3.w, r1.y, r1.z
    mov x1[2].xyzw, r3.xyzw
  endif 
  lt r1.y, l(0.000000), cb0[2].w
  if_nz r1.y
    mov r1.y, x0[0].z
    mov r1.z, x0[0].w
    max r1.w, r1.z, r1.y
    mov r2.x, x0[0].y
    max r1.w, r1.w, r2.x
    mov r2.y, x0[0].x
    max r1.w, r1.w, r2.y
    min r1.y, r1.z, r1.y
    min r1.y, r1.y, r2.x
    min r1.y, r1.y, r2.y
    mov r1.z, x1[0].z
    mov r2.x, x1[0].w
    max r2.y, r1.z, r2.x
    mov r2.z, x1[0].y
    max r2.y, r2.y, r2.z
    mov r2.w, x1[0].x
    max r2.y, r2.y, r2.w
    min r1.z, r1.z, r2.x
    min r1.z, r1.z, r2.z
    min r1.z, r1.z, r2.w
    max r1.w, r1.w, r2.y
    min r1.y, r1.z, r1.y
    add r1.y, -r1.y, r1.w
    ge r1.y, r1.y, l(0.022000)
    mov r1.z, l(1)
  else 
    mov r1.yz, l(0,0,0,0)
  endif 
  itof r1.w, r1.z
  lt r1.w, r1.w, cb0[2].w
  if_nz r1.w
    mov r2.x, x0[1].z
    mov r2.y, x0[1].w
    max r2.z, r2.y, r2.x
    mov r2.w, x0[1].y
    max r2.z, r2.z, r2.w
    mov r3.x, x0[1].x
    max r2.z, r2.z, r3.x
    min r2.x, r2.y, r2.x
    min r2.x, r2.x, r2.w
    min r2.x, r2.x, r3.x
    mov r2.y, x1[1].z
    mov r2.w, x1[1].w
    max r3.x, r2.w, r2.y
    mov r3.y, x1[1].y
    max r3.x, r3.x, r3.y
    mov r3.z, x1[1].x
    max r3.x, r3.x, r3.z
    min r2.y, r2.w, r2.y
    min r2.y, r2.y, r3.y
    min r2.y, r2.y, r3.z
    max r2.z, r2.z, r3.x
    min r2.x, r2.y, r2.x
    add r2.x, -r2.x, r2.z
    ge r2.x, r2.x, l(0.022000)
    or r1.y, r1.y, r2.x
    mov r1.z, l(2)
  endif 
  itof r1.z, r1.z
  lt r1.z, r1.z, cb0[2].w
  and r1.z, r1.z, r1.w
  if_nz r1.z
    mov r1.z, x0[2].z
    mov r1.w, x0[2].w
    max r2.x, r1.w, r1.z
    mov r2.y, x0[2].y
    max r2.x, r2.x, r2.y
    mov r2.z, x0[2].x
    max r2.x, r2.x, r2.z
    min r1.z, r1.w, r1.z
    min r1.z, r1.z, r2.y
    min r1.z, r1.z, r2.z
    mov r1.w, x1[2].z
    mov r2.y, x1[2].w
    max r2.z, r1.w, r2.y
    mov r2.w, x1[2].y
    max r2.z, r2.z, r2.w
    mov r3.x, x1[2].x
    max r2.z, r2.z, r3.x
    min r1.w, r1.w, r2.y
    min r1.w, r1.w, r2.w
    min r1.w, r1.w, r3.x
    max r2.x, r2.z, r2.x
    min r1.z, r1.w, r1.z
    add r1.z, -r1.z, r2.x
    ge r1.z, r1.z, l(0.022000)
    or r1.y, r1.y, r1.z
  endif 
  lt r1.z, l(0.000000), cb0[3].x
  if_nz r1.z
    mov r2.xyzw, x0[0].xyzw
    mov r3.xyzw, x1[0].xyzw
    min r1.zw, r2.zzzw, r3.zzzw
    min r1.zw, r1.zzzw, r3.xxxy
    min r1.zw, r1.zzzw, r2.xxxy
    max r4.xy, r2.zwzz, r3.zwzz
    max r4.xy, r3.xyxx, r4.xyxx
    max r4.xy, r2.xyxx, r4.xyxx
    max r4.x, r4.y, r4.x
    min r1.z, r1.w, r1.z
    add r1.z, -r1.z, r4.x
    add r1.z, r1.z, l(0.000010)
    div r1.w, r0.w, r1.z
    mov r4.xz, r2.xxzx
    mov r4.yw, r3.xxxz
    div r4.xyzw, r4.xyzw, r1.zzzz
    mov r3.xz, r2.yywy
    div r2.xyzw, r3.xyzw, r1.zzzz
    add r3.xyzw, -r1.wwww, r4.xyzw
    add r2.xyzw, -r1.wwww, r2.xyzw
    add r1.zw, -|r3.yyyw|, |r3.xxxz|
    max r1.z, |r1.w|, |r1.z|
    add r2.xy, -|r2.ywyy|, |r2.xzxx|
    max r1.w, |r2.y|, |r2.x|
    max r1.z, r1.w, r1.z
    min r1.z, r1.z, l(1.000000)
    mul r1.w, r1.z, r1.z
    mul r1.z, r1.w, r1.z
    mul r1.z, r1.z, l(3.000000)
    add r1.w, r0.w, l(1.400000)
    mul_sat r1.w, r1.w, l(5.000000)
    mad r2.x, r1.w, l(-2.000000), l(3.000000)
    mul r1.w, r1.w, r1.w
    mul r1.w, r1.w, r2.x
    add r2.x, -r0.w, l(0.240000)
    mul_sat r2.x, r2.x, l(5.000000)
    mad r2.y, r2.x, l(-2.000000), l(3.000000)
    mul r2.x, r2.x, r2.x
    mul r2.x, r2.x, r2.y
    mul r1.w, r1.w, r2.x
    mul r1.z, r1.w, r1.z
    ge r1.z, r1.z, l(0.900000)
    or r1.y, r1.y, r1.z
    mov r1.z, l(1)
  else 
    mov r1.z, l(0)
  endif 
  itof r1.w, r1.z
  lt r1.w, r1.w, cb0[3].x
  if_nz r1.w
    mov r2.xyzw, x0[1].xyzw
    mov r3.xyzw, x1[1].xyzw
    min r4.xy, r2.zwzz, r3.zwzz
    min r4.xy, r3.xyxx, r4.xyxx
    min r4.xy, r2.xyxx, r4.xyxx
    max r4.zw, r2.zzzw, r3.zzzw
    max r4.zw, r3.xxxy, r4.zzzw
    max r4.zw, r2.xxxy, r4.zzzw
    max r4.z, r4.w, r4.z
    min r4.x, r4.y, r4.x
    add r4.x, -r4.x, r4.z
    add r4.x, r4.x, l(0.000010)
    div r4.y, r0.w, r4.x
    mov r5.xz, r2.xxzx
    mov r5.yw, r3.xxxz
    div r5.xyzw, r5.xyzw, r4.xxxx
    mov r3.xz, r2.yywy
    div r2.xyzw, r3.xyzw, r4.xxxx
    add r3.xyzw, -r4.yyyy, r5.xyzw
    add r2.xyzw, -r4.yyyy, r2.xyzw
    add r3.xy, -|r3.ywyy|, |r3.xzxx|
    max r3.x, |r3.y|, |r3.x|
    add r2.xy, -|r2.ywyy|, |r2.xzxx|
    max r2.x, |r2.y|, |r2.x|
    max r2.x, r2.x, r3.x
    min r2.x, r2.x, l(1.000000)
    mul r2.y, r2.x, r2.x
    mul r2.x, r2.y, r2.x
    mul r2.x, r2.x, l(3.000000)
    add r2.y, r0.w, l(1.400000)
    mul_sat r2.y, r2.y, l(5.000000)
    mad r2.z, r2.y, l(-2.000000), l(3.000000)
    mul r2.y, r2.y, r2.y
    mul r2.y, r2.y, r2.z
    add r2.z, -r0.w, l(0.240000)
    mul_sat r2.z, r2.z, l(5.000000)
    mad r2.w, r2.z, l(-2.000000), l(3.000000)
    mul r2.z, r2.z, r2.z
    mul r2.z, r2.z, r2.w
    mul r2.y, r2.z, r2.y
    mul r2.x, r2.y, r2.x
    ge r2.x, r2.x, l(0.900000)
    or r1.y, r1.y, r2.x
    mov r1.z, l(2)
  endif 
  itof r1.z, r1.z
  lt r1.z, r1.z, cb0[3].x
  and r1.z, r1.z, r1.w
  if_nz r1.z
    mov r2.xyzw, x0[2].xyzw
    mov r3.xyzw, x1[2].xyzw
    min r1.zw, r2.zzzw, r3.zzzw
    min r1.zw, r1.zzzw, r3.xxxy
    min r1.zw, r1.zzzw, r2.xxxy
    max r4.xy, r2.zwzz, r3.zwzz
    max r4.xy, r3.xyxx, r4.xyxx
    max r4.xy, r2.xyxx, r4.xyxx
    max r4.x, r4.y, r4.x
    min r1.z, r1.w, r1.z
    add r1.z, -r1.z, r4.x
    add r1.z, r1.z, l(0.000010)
    div r1.w, r0.w, r1.z
    mov r4.xz, r2.xxzx
    mov r4.yw, r3.xxxz
    div r4.xyzw, r4.xyzw, r1.zzzz
    mov r3.xz, r2.yywy
    div r2.xyzw, r3.xyzw, r1.zzzz
    add r3.xyzw, -r1.wwww, r4.xyzw
    add r2.xyzw, -r1.wwww, r2.xyzw
    add r1.zw, -|r3.yyyw|, |r3.xxxz|
    max r1.z, |r1.w|, |r1.z|
    add r2.xy, -|r2.ywyy|, |r2.xzxx|
    max r1.w, |r2.y|, |r2.x|
    max r1.z, r1.w, r1.z
    min r1.z, r1.z, l(1.000000)
    mul r1.w, r1.z, r1.z
    mul r1.z, r1.w, r1.z
    mul r1.z, r1.z, l(3.000000)
    add r1.w, r0.w, l(1.400000)
    mul_sat r1.w, r1.w, l(5.000000)
    mad r2.x, r1.w, l(-2.000000), l(3.000000)
    mul r1.w, r1.w, r1.w
    mul r1.w, r1.w, r2.x
    add r0.w, -r0.w, l(0.240000)
    mul_sat r0.w, r0.w, l(5.000000)
    mad r2.x, r0.w, l(-2.000000), l(3.000000)
    mul r0.w, r0.w, r0.w
    mul r0.w, r0.w, r2.x
    mul r0.w, r0.w, r1.w
    mul r0.w, r0.w, r1.z
    ge r0.w, r0.w, l(0.900000)
    or r1.y, r1.y, r0.w
  endif 
else 
  mov r1.y, l(0)
endif 
if_nz r1.y
  add r1.yzw, -r0.xxyz, cb0[2].xxyz
  mad o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
  ret 
else 
  mov o0.xyz, r0.xyzx
  ret 
endif 
ret 
// Approximately 389 instruction slots used
