//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mov r1.xyzw, l(0,0,0,0)
mov r2.x, l(0)
mov r3.x, l(-2.000000)
loop 
  lt r2.y, l(2.000000), r3.x
  breakc_nz r2.y
  mad r2.y, -r3.x, r3.x, l(4.000000)
  sqrt r2.y, r2.y
  mov r4.xyzw, r1.xyzw
  mov r2.z, r2.x
  mov r3.y, -r2.y
  loop 
    lt r2.w, r2.y, r3.y
    breakc_nz r2.w
    mad r3.zw, r3.xxxy, l(0.000000, 0.000000, 0.000521, 0.000926), v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
    add r6.xyzw, -r0.xyzw, r5.xyzw
    dp4 r2.w, r6.xyzw, r6.xyzw
    mul r2.w, r2.w, l(-288.539001)
    exp r2.w, r2.w
    mul r2.w, r2.w, l(7.978846)
    dp2 r3.z, r3.xyxx, r3.xyxx
    mul r3.z, r3.z, l(-0.461662)
    exp r3.z, r3.z
    mul r2.w, r2.w, r3.z
    mul r3.z, r2.w, l(0.101859)
    mad r2.z, r2.w, l(0.101859), r2.z
    mad r4.xyzw, r3.zzzz, r5.xyzw, r4.xyzw
    add r3.y, r3.y, l(1.000000)
  endloop 
  mov r1.xyzw, r4.xyzw
  mov r2.x, r2.z
  add r3.x, r3.x, l(1.000000)
endloop 
div o0.xyzw, r1.xyzw, r2.xxxx
ret 
// Approximately 37 instruction slots used
