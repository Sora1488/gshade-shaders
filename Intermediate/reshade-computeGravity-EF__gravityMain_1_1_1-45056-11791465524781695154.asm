//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float GravityIntensity;            // Offset:    0 Size:     4
//   float GravityRNG;                  // Offset:    4 Size:     4 [unused]
//   bool UseImage;                     // Offset:    8 Size:     4 [unused]
//   bool InvertGravity;                // Offset:   12 Size:     4
//   bool AllowOverlapping;             // Offset:   16 Size:     4
//   float3 BlendColor;                 // Offset:   20 Size:    12
//   float EffectFactor;                // Offset:   32 Size:     4
//   bool FilterDepth;                  // Offset:   36 Size:     4
//   float FocusDepth;                  // Offset:   40 Size:     4
//   float FocusRangeDepth;             // Offset:   44 Size:     4
//   float FocusEdgeDepth;              // Offset:   48 Size:     4
//   bool Spherical;                    // Offset:   52 Size:     4
//   int Sphere_FieldOfView;            // Offset:   56 Size:     4
//   float Sphere_FocusHorizontal;      // Offset:   60 Size:     4
//   float Sphere_FocusVertical;        // Offset:   64 Size:     4
//   bool FilterColor;                  // Offset:   68 Size:     4
//   bool ShowSelectedHue;              // Offset:   72 Size:     4 [unused]
//   float Value;                       // Offset:   76 Size:     4
//   float ValueRange;                  // Offset:   80 Size:     4
//   float Hue;                         // Offset:   84 Size:     4
//   float HueRange;                    // Offset:   88 Size:     4
//   float Saturation;                  // Offset:   92 Size:     4
//   float SaturationRange;             // Offset:   96 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__texGravitySeedMap            texture  float4          2d             t4      1 
// V__storageGravityMain                 UAV  float4          2d             u0      1 
// V__storageGravityDepth                UAV   float          2d             u1      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_typed_texture2d (float,float,float,float) u1
dcl_input vThreadID.x
dcl_temps 9
dcl_tgsm_structured g0, 4, 768
dcl_tgsm_structured g1, 4, 768
dcl_tgsm_structured g2, 4, 768
dcl_tgsm_structured g3, 4, 768
dcl_thread_group 1, 1, 1
utof r0.x, vThreadID.x
add r0.y, r0.x, l(0.500000)
mul r1.x, r0.y, l(0.000521)
mov r0.z, l(0)
loop 
  uge r0.w, r0.z, l(768)
  breakc_nz r0.w
  store_structured g0.x, r0.z, l(0), r0.z
  imul null, r0.w, r0.z, l(1080)
  udiv r0.w, null, r0.w, l(768)
  utof r0.w, r0.w
  add r0.w, r0.w, l(0.500000)
  mul r1.y, r0.w, l(0.000926)
  sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t2.yzwx, s0, l(0.000000)
  mad r1.y, -r0.w, l(999.000000), l(1000.000000)
  div r0.w, r0.w, r1.y
  store_structured g2.x, r0.z, l(0), r0.w
  store_structured g1.x, r0.z, l(0), r0.w
  iadd r0.z, r0.z, l(1)
endloop 
movc r0.z, cb0[0].w, l(1), l(0)
ieq r0.w, cb0[4].y, l(0)
add r1.x, cb0[2].w, cb0[3].x
mad r0.y, r0.y, l(0.000521), -cb0[3].w
mul r0.y, r0.y, l(1920.000000)
itof r1.y, cb0[3].z
mul r1.y, r1.y, l(0.000521)
mul r1.z, cb0[2].z, cb0[2].z
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[3].x
movc r2.x, cb0[2].y, l(0), l(1.000000)
mov r3.y, vThreadID.x
mov r3.z, l(0)
mov r4.zw, l(0,0,-1.000000,0.666667)
mov r5.zw, l(0,0,1.000000,-1.000000)
mov r2.y, cb0[1].x
mov r2.z, l(0)
mov r6.x, l(0)
loop 
  ige r6.y, r6.x, l(768)
  breakc_nz r6.y
  imad r6.y, l(-2), r6.x, l(767)
  imad r3.w, r6.y, r0.z, r6.x
  imul null, r6.y, r3.w, l(1080)
  udiv r3.x, null, r6.y, l(768)
  ld_indexable(texture2d)(float,float,float,float) r7.xyw, r3.yxzz, t0.yzwx
  ld_structured r6.y, r3.w, l(0), g1.xxxx
  ld_indexable(texture2d)(float,float,float,float) r6.z, r3.ywzz, t4.yzxw
  mul r6.z, r6.z, cb0[0].x
  utof r3.x, r3.x
  add r3.x, r3.x, l(0.500000)
  ge r6.w, r7.x, r7.y
  and r6.w, r6.w, l(0x3f800000)
  mov r4.xy, r7.yxyy
  add r5.xy, -r4.xyxx, r7.xyxx
  mad r8.xyzw, r6.wwww, r5.xyzw, r4.xyzw
  ge r4.x, r7.w, r8.x
  and r4.x, r4.x, l(0x3f800000)
  mov r7.xyz, r8.xywx
  mov r8.xyw, r7.wywx
  add r8.xyzw, -r7.xyzw, r8.xyzw
  mad r7.xyzw, r4.xxxx, r8.xyzw, r7.xyzw
  min r4.x, r7.y, r7.w
  add r4.x, -r4.x, r7.x
  add r4.y, -r7.y, r7.w
  mad r5.x, r4.x, l(6.000000), l(0.000000)
  div r4.y, r4.y, r5.x
  add r4.y, r4.y, r7.z
  add r5.x, r7.x, l(0.000000)
  div r4.x, r4.x, r5.x
  add r5.x, r7.x, -cb0[4].w
  lt r5.x, |r5.x|, cb0[5].x
  add r4.y, |r4.y|, -cb0[5].y
  mul r5.y, r4.x, r4.x
  mul r7.xy, r5.yyyy, l(-288.538818, -144.269409, 0.000000, 0.000000)
  exp r7.xy, r7.xyxx
  add r7.xy, r7.xyxx, cb0[5].zzzz
  lt r5.y, |r4.y|, r7.x
  add r4.y, -|r4.y|, l(1.000000)
  lt r4.y, r4.y, r7.y
  or r4.y, r4.y, r5.y
  add r4.x, r4.x, -cb0[5].w
  ge r4.x, cb0[6].x, |r4.x|
  and r4.x, r4.y, r4.x
  and r4.x, r5.x, r4.x
  or r4.x, r0.w, r4.x
  mad r3.x, r3.x, l(0.000926), -cb0[4].x
  mul r3.x, r3.x, l(1080.000000)
  mul r3.x, r3.x, r3.x
  mad r3.x, r0.y, r0.y, r3.x
  sqrt r3.x, r3.x
  mul r3.x, r1.y, r3.x
  mad r4.y, r6.y, r6.y, r1.z
  dp2 r5.x, cb0[2].zzzz, r6.yyyy
  mul r3.x, r3.x, l(0.017453)
  sincos null, r3.x, r3.x
  mad r3.x, -r5.x, r3.x, r4.y
  sqrt r3.x, r3.x
  add r4.y, r6.y, -cb0[2].z
  movc r3.x, cb0[3].y, r3.x, |r4.y|
  lt r4.y, r1.x, r3.x
  add r3.x, r3.x, -cb0[2].w
  mul_sat r3.x, r1.w, r3.x
  mad r5.x, r3.x, l(-2.000000), l(3.000000)
  mul r3.x, r3.x, r3.x
  mul r3.x, r3.x, r5.x
  min r3.x, r3.x, l(1.000000)
  movc r3.x, r4.y, l(-1.000000), -r3.x
  add r3.x, r2.x, r3.x
  add r3.x, r3.x, l(1.000000)
  min r3.x, r3.x, l(1.000000)
  and r4.x, r4.x, l(0x3f800000)
  mul r3.x, r3.x, r4.x
  mul r3.x, r3.x, r6.z
  mul r4.x, r3.x, l(766.000000)
  ftou r4.x, r4.x
  store_structured g3.x, r3.w, l(0), r4.x
  if_z r2.y
    itof r4.y, r6.x
    mad r3.x, r3.x, l(766.000000), r4.y
    min r3.x, r3.x, l(768.000000)
    ftou r3.x, r3.x
    iadd r4.y, r6.x, l(1)
    mov r5.x, r4.y
    loop 
      ult r5.y, r3.x, r5.x
      breakc_nz r5.y
      imad r5.y, l(-2), r5.x, l(767)
      imad r5.y, r5.y, r0.z, r5.x
      ld_structured r6.z, r5.y, l(0), g2.xxxx
      lt r6.w, r6.y, r6.z
      ld_structured r7.x, r5.y, l(0), g0.xxxx
      movc r6.w, r6.w, r3.w, r7.x
      store_structured g0.x, r5.y, l(0), r6.w
      min r6.z, r6.y, r6.z
      store_structured g2.x, r5.y, l(0), r6.z
      iadd r5.x, r5.x, l(1)
    endloop 
  else 
    ieq r3.x, r2.z, r6.x
    iadd r3.x, r2.z, -r3.x
    iadd r4.x, r4.x, r6.x
    imin r4.x, r4.x, l(767)
    mov r2.zw, r3.xxxx
    loop 
      ult r4.y, r4.x, r2.w
      breakc_nz r4.y
      imad r4.y, l(-2), r2.w, l(767)
      imad r4.y, r4.y, r0.z, r2.w
      store_structured g0.x, r4.y, l(0), r3.w
      store_structured g2.x, r4.y, l(0), l(0)
      iadd r2.zw, r2.zzzw, l(0, 0, 1, 1)
    endloop 
  endif 
  iadd r6.x, r6.x, l(1)
endloop 
mov r1.x, vThreadID.x
mov r1.zw, l(0,0,0,0)
ftoi r0.x, r0.x
mov r2.x, l(0)
loop 
  uge r2.y, r2.x, l(768)
  breakc_nz r2.y
  ld_structured r2.y, r2.x, l(0), g0.xxxx
  ine r2.z, r2.y, r2.x
  if_nz r2.z
    imul null, r2.z, r2.y, l(1080)
    udiv r1.y, null, r2.z, l(768)
    ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyzw, t0.xyzw
    utof r1.y, r2.x
    utof r2.z, r2.y
    add r2.z, -r1.y, r2.z
    ld_structured r2.y, r2.y, l(0), g3.xxxx
    utof r2.y, r2.y
    div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
    mul_sat r2.y, r2.y, |r2.z|
    mad r2.z, r2.y, l(-2.000000), l(3.000000)
    mul r2.y, r2.y, r2.y
    mul r2.y, r2.y, r2.z
    mul r2.y, r2.y, cb0[2].x
    add r4.xyz, -r3.xyzx, cb0[1].yzwy
    add r4.w, -r3.w, l(1.000000)
    mad r3.xyzw, r2.yyyy, r4.xyzw, r3.xyzw
    ftoi r0.yzw, r1.yyyy
    store_uav_typed u0.xyzw, r0.xwww, r3.xyzw
    ld_structured r1.y, r2.x, l(0), g2.xxxx
    store_uav_typed u1.xyzw, r0.xyzw, r1.yyyy
  endif 
  iadd r2.x, r2.x, l(1)
endloop 
ret 
// Approximately 190 instruction slots used
