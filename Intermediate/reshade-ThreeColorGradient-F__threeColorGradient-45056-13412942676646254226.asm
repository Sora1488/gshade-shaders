//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float3 color1;                     // Offset:    0 Size:    12
//   float3 color2;                     // Offset:   16 Size:    12
//   float3 color3;                     // Offset:   32 Size:    12
//   int gradSharp;                     // Offset:   44 Size:     4
//   float angle;                       // Offset:   48 Size:     4
//   float position;                    // Offset:   52 Size:     4
//   int blendType;                     // Offset:   56 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 3
add r0.x, -v1.x, v1.y
mad r0.x, cb0[3].x, r0.x, v1.x
div r0.x, r0.x, cb0[3].y
add r0.y, -r0.x, l(1.000000)
mul r0.y, r0.y, r0.x
mul r0.y, r0.y, l(4.000000)
max r0.y, r0.y, l(0.000000)
itof r0.z, cb0[2].w
log r0.y, r0.y
mul r0.y, r0.y, r0.z
exp r0.y, r0.y
lt r0.x, r0.x, l(0.500000)
add r0.z, -r0.y, l(1.000000)
mul r1.xyz, r0.zzzz, cb0[0].xyzx
mul r2.xyz, r0.zzzz, cb0[2].xyzx
movc r0.xzw, r0.xxxx, r1.xxyz, r2.xxyz
if_z cb0[3].z
  mad o0.xyz, r0.yyyy, cb0[1].xyzx, r0.xzwx
  ret 
else 
  ieq r1.x, cb0[3].z, l(1)
  if_nz r1.x
    sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
    mad r2.xyz, r0.yyyy, cb0[1].xyzx, r0.xzwx
    add o0.xyz, r1.xyzx, r2.xyzx
    ret 
  else 
    ieq r1.x, cb0[3].z, l(2)
    if_nz r1.x
      sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
      mad r2.xyz, r0.yyyy, cb0[1].xyzx, r0.xzwx
      mul o0.xyz, r1.xyzx, r2.xyzx
      ret 
    else 
      sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
      mad r0.xyz, r0.yyyy, cb0[1].xyzx, r0.xzwx
      add r0.xyz, r0.xyzx, r1.xyzx
      mul o0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      ret 
    endif 
  endif 
endif 
ret 
// Approximately 43 instruction slots used
