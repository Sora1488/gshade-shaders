//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int UI_ME_LAYER_MAX;               // Offset:    0 Size:     4 [unused]
//   float UI_ME_PYRAMID_UPSCALE_FILTER_RADIUS;// Offset:    4 Size:     4 [unused]
//   bool SHOWME;                       // Offset:    8 Size:     4
//   uint FRAME_COUNT;                  // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__MotionTexCur0                texture  float4          2d            t28      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t28
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
discard_z cb0[0].z
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t28.xyzw, s0
min r0.z, |r0.x|, |r0.y|
max r0.w, |r0.x|, |r0.y|
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.z, r0.w, r0.z
mul r0.w, r0.z, r0.z
mad r1.x, r0.w, l(0.020835), l(-0.085133)
mad r1.x, r0.w, r1.x, l(0.180141)
mad r1.x, r0.w, r1.x, l(-0.330299)
mad r0.w, r0.w, r1.x, l(0.999866)
mul r1.x, r0.w, r0.z
lt r1.y, |r0.x|, |r0.y|
mad r1.x, r1.x, l(-2.000000), l(1.570796)
and r1.x, r1.y, r1.x
mad r0.z, r0.z, r0.w, r1.x
lt r0.w, r0.x, -r0.x
and r0.w, r0.w, l(0xc0490fdb)
add r0.z, r0.w, r0.z
min r0.w, r0.x, r0.y
max r1.x, r0.x, r0.y
lt r0.w, r0.w, -r0.w
ge r1.x, r1.x, -r1.x
and r0.w, r0.w, r1.x
movc r0.z, r0.w, -r0.z, r0.z
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.x, r0.x
mad r0.y, r0.z, l(0.159155), l(0.500000)
mul r0.x, r0.x, l(100.000000)
min r0.x, r0.x, l(1.000000)
mad r0.yzw, r0.yyyy, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)
mad_sat r0.yzw, |r0.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)
add r0.yzw, r0.yyzw, l(0.000000, -0.500000, -0.500000, -0.500000)
mad o0.xyz, r0.yzwy, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0)
ret 
// Approximately 36 instruction slots used
