//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.x, v1.y, l(1080.000000)
round_z r1.x, r1.x
add r1.y, r1.x, r1.x
ge r1.y, r1.y, -r1.y
movc r1.yz, r1.yyyy, l(0,2.000000,0.500000,0), l(0,-2.000000,-0.500000,0)
mul r1.x, r1.z, r1.x
frc r1.x, r1.x
mul r1.x, r1.x, r1.y
round_z r1.x, r1.x
lt r1.y, l(0.000000), r1.x
if_nz r1.y
  mad r1.y, -r1.x, l(0.500000), l(1.000000)
  mad r2.y, -r1.x, l(0.000926), v1.y
  add r1.x, -r1.x, l(1.000000)
  mad r3.y, r1.x, l(0.000926), v1.y
  add_sat r1.zw, v1.xxxx, l(0.000000, 0.000000, -0.000521, 0.000521)
  ge r2.z, r2.y, l(0.000000)
  if_nz r2.z
    mov r4.xyz, l(0,0,0,0)
    mov r2.z, l(0)
    mov r2.x, r1.z
    loop 
      lt r2.w, r1.w, r2.x
      breakc_nz r2.w
      sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r2.xyxx, t0.xyzw, s0, l(0.000000)
      max r2.w, r5.z, r5.y
      max r2.w, r2.w, r5.x
      mul r2.w, r2.w, r2.w
      mul r3.z, r1.x, r2.w
      mad r4.xyz, r5.xyzx, r3.zzzz, r4.xyzx
      mad r2.z, r1.x, r2.w, r2.z
      add r2.x, r2.x, l(0.000521)
    endloop 
  else 
    mov r4.xyz, l(0,0,0,0)
    mov r2.z, l(0)
  endif 
  ge r2.x, l(1.000000), r3.y
  if_nz r2.x
    add r1.x, -r1.x, l(1.000000)
    mov r2.xyw, r4.xyxz
    mov r3.z, r2.z
    mov r3.x, r1.z
    loop 
      lt r3.w, r1.w, r3.x
      breakc_nz r3.w
      sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r3.xyxx, t0.xyzw, s0, l(0.000000)
      max r3.w, r5.z, r5.y
      max r3.w, r3.w, r5.x
      mul r3.w, r3.w, r3.w
      mul r4.w, r1.x, r3.w
      mad r2.xyw, r5.xyxz, r4.wwww, r2.xyxw
      mad r3.z, r1.x, r3.w, r3.z
      add r3.x, r3.x, l(0.000521)
    endloop 
    mov r4.xyz, r2.xywx
    mov r2.z, r3.z
  endif 
  mul r1.xzw, r4.xxyz, l(0.100000, 0.000000, 0.100000, 0.100000)
  div r1.xzw, r1.xxzw, r2.zzzz
  mad r0.xyz, r0.xyzx, r1.yyyy, r1.xzwx
else 
  mul r0.xyz, r0.xyzx, l(1.100000, 1.100000, 1.100000, 0.000000)
endif 
mov_sat o0.xyzw, r0.xyzw
ret 
// Approximately 67 instruction slots used
