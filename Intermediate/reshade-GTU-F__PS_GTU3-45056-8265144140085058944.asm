//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float texture_sizeX;               // Offset:    0 Size:     4 [unused]
//   float texture_sizeY;               // Offset:    4 Size:     4
//   float video_sizeX;                 // Offset:    8 Size:     4 [unused]
//   float video_sizeY;                 // Offset:   12 Size:     4
//   bool compositeConnection;          // Offset:   16 Size:     4 [unused]
//   bool noScanlines;                  // Offset:   20 Size:     4
//   float signalResolution;            // Offset:   24 Size:     4 [unused]
//   float signalResolutionI;           // Offset:   28 Size:     4 [unused]
//   float signalResolutionQ;           // Offset:   32 Size:     4 [unused]
//   float tvVerticalResolution;        // Offset:   36 Size:     4
//   float blackLevel;                  // Offset:   40 Size:     4
//   float contrast;                    // Offset:   44 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
mad r0.x, v1.y, cb0[0].y, l(-0.500000)
frc r0.x, r0.x
div r0.y, cb0[0].w, cb0[2].y
add r0.y, r0.y, l(0.500000)
round_pi r0.y, r0.y
if_nz cb0[1].y
  add r0.z, r0.y, l(2.000000)
  lt r0.w, -r0.y, r0.z
  div r1.x, cb0[2].y, cb0[0].w
  mul r1.y, r1.x, l(3.141593)
  div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
  div r1.x, l(-1.000000), r1.x
  mov r2.x, v1.x
  mov r3.xyz, l(0,0,0,0)
  mov r1.w, -r0.y
  mov r2.z, r0.w
  loop 
    breakc_z r2.z
    add r2.w, r0.x, -r1.w
    div r3.w, r2.w, cb0[0].y
    add r2.y, -r3.w, v1.y
    sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r2.xyxx, t0.xyzw, s0, l(0.000000)
    add r2.yw, |r2.wwww|, l(0.000000, 0.500000, 0.000000, -0.500000)
    min r2.y, r1.z, r2.y
    mul r3.w, r1.y, r2.y
    sincos r3.w, null, r3.w
    mad r2.y, r1.y, r2.y, r3.w
    max r2.w, r1.x, r2.w
    min r2.w, r1.z, r2.w
    mul r3.w, r1.y, r2.w
    mad r2.y, -r1.y, r2.w, r2.y
    sincos r2.w, null, -r3.w
    add r2.y, r2.w, r2.y
    mul r2.y, r2.y, l(0.159155)
    mad r3.xyz, r4.xyzx, r2.yyyy, r3.xyzx
    add r1.w, r1.w, l(1.000000)
    lt r2.z, r1.w, r0.z
  endloop 
else 
  add r0.z, r0.y, l(2.000000)
  lt r0.w, -r0.y, r0.z
  div r1.x, cb0[2].y, cb0[0].y
  mul r1.x, r1.x, l(2.506628)
  div r1.y, l(1080.000000), cb0[0].y
  mov r2.x, v1.x
  mov r3.xyz, l(0,0,0,0)
  mov r1.z, -r0.y
  mov r1.w, r0.w
  loop 
    breakc_z r1.w
    add r2.z, r0.x, -r1.z
    div r2.w, r2.z, cb0[0].y
    add r2.y, -r2.w, v1.y
    sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r2.xyxx, t0.xyzw, s0, l(0.000000)
    mad r2.y, cb0[0].y, l(0.000463), r2.z
    mad r2.z, -cb0[0].y, l(0.000463), r2.z
    mul r2.yz, r1.xxxx, r2.yyzy
    mad r2.w, |r2.y|, l(0.332670), l(1.000000)
    div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
    mul r3.w, r2.y, -r2.y
    mul r3.w, r3.w, l(0.721348)
    exp r3.w, r3.w
    mul r3.w, r3.w, l(0.398942)
    mad r4.w, r2.w, l(0.937298), l(-0.120168)
    mad r4.w, r2.w, r4.w, l(0.436184)
    mul r2.w, r2.w, r4.w
    mad r2.w, -r3.w, r2.w, l(0.500000)
    lt r3.w, l(0.000000), r2.y
    lt r2.y, r2.y, l(0.000000)
    iadd r2.y, -r3.w, r2.y
    mad r3.w, |r2.z|, l(0.332670), l(1.000000)
    div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
    mul r4.w, r2.z, -r2.z
    mul r4.w, r4.w, l(0.721348)
    exp r4.w, r4.w
    mul r4.w, r4.w, l(0.398942)
    mad r5.x, r3.w, l(0.937298), l(-0.120168)
    mad r5.x, r3.w, r5.x, l(0.436184)
    mul r3.w, r3.w, r5.x
    mad r3.w, -r4.w, r3.w, l(0.500000)
    lt r4.w, l(0.000000), r2.z
    lt r2.z, r2.z, l(0.000000)
    iadd r2.z, -r4.w, r2.z
    itof r2.yz, r2.yyzy
    mul r2.z, r2.z, r3.w
    mad r2.y, r2.w, r2.y, -r2.z
    mul r2.yzw, r2.yyyy, r4.xxyz
    mad r3.xyz, r2.yzwy, r1.yyyy, r3.xyzx
    add r1.z, r1.z, l(1.000000)
    lt r1.w, r1.z, r0.z
  endloop 
endif 
add r0.xyz, r3.xyzx, -cb0[2].zzzz
add r0.w, -cb0[2].z, l(1.000000)
div r0.w, cb0[2].w, r0.w
mul o0.xyz, r0.wwww, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 98 instruction slots used
