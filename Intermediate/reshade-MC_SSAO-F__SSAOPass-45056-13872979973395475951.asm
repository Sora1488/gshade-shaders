//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float Strength;                    // Offset:    0 Size:     4
//   int SampleDistance;                // Offset:    4 Size:     4
//   int Quality;                       // Offset:    8 Size:     4
//   float StartFade;                   // Offset:   12 Size:     4
//   float EndFade;                     // Offset:   16 Size:     4
//   float NormalBias;                  // Offset:   20 Size:     4
//   int DebugEnabled;                  // Offset:   24 Size:     4 [unused]
//   int Bilateral;                     // Offset:   28 Size:     4 [unused]
//   int BlurRadius;                    // Offset:   32 Size:     4 [unused]
//   float BlurQuality;                 // Offset:   36 Size:     4 [unused]
//   float Gamma;                       // Offset:   40 Size:     4
//   float NormalPower;                 // Offset:   44 Size:     4
//   int FOV;                           // Offset:   48 Size:     4
//   float DepthShrink;                 // Offset:   52 Size:     4
//   int DepthEndFade;                  // Offset:   56 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__NormalTex                    texture  float4          2d            t16      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   x           0   TARGET   float   x   
// SV_TARGET                1   x           1   TARGET   float   x   
// SV_TARGET                2   x           2   TARGET   float   x   
// SV_TARGET                3   x           3   TARGET   float   x   
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t16
dcl_input_ps linear v1.xy
dcl_output o0.x
dcl_output o1.x
dcl_output o2.x
dcl_output o3.x
dcl_temps 11
add r0.xyzw, v1.xyxy, l(-0.000130, 0.000231, 0.000130, 0.000231)
itof r1.xy, cb0[3].xzxx
sample_l_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t2.yzxw, s0, l(0.000000)
mad r1.w, -r1.z, l(999.000000), l(1000.000000)
div r1.z, r1.z, r1.w
mul r2.z, r1.z, l(1000.000000)
mad r3.xyzw, v1.xyxy, l(1.000000, -1.000000, 1.000000, -1.000000), l(-0.000130, 0.999768, 0.000130, 0.999768)
mad r3.xyzw, r3.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r1.xz, r1.xxxx, l(0.008726, 0.000000, 0.004909, 0.000000)
sincos r1.x, r4.x, r1.x
div r1.x, r1.x, r4.x
div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
sincos r1.x, r5.x, r1.z
div r1.x, r1.x, r5.x
div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
div r1.xz, r4.xxyx, r2.zzzz
div r2.xy, r3.xyxx, r1.xzxx
sample_l_indexable(texture2d)(float,float,float,float) r1.xzw, r0.xyxx, t16.xwyz, s0, l(0.000000)
mad r1.xzw, r1.xxzw, l(2.000000, 0.000000, 2.000000, 2.000000), l(-1.000000, 0.000000, -1.000000, -1.000000)
imax r3.xy, cb0[0].zyzz, l(0, 1, 0, 0)
imin r3.xy, r3.xyxx, l(7, 128, 0, 0)
switch r3.x
  case l(0)
  mov r4.zw, l(0,0,4,1)
  break 
  case l(1)
  mov r4.zw, l(0,0,4,2)
  break 
  case l(2)
  mov r4.zw, l(0,0,4,4)
  break 
  case l(3)
  mov r4.zw, l(0,0,6,4)
  break 
  case l(4)
  mov r4.zw, l(0,0,8,4)
  break 
  case l(5)
  mov r4.zw, l(0,0,6,6)
  break 
  case l(6)
  mov r4.zw, l(0,0,8,6)
  break 
  case l(7)
  mov r4.zw, l(0,0,8,8)
  break 
endswitch 
mov_sat r2.w, cb0[1].y
add r5.x, -cb0[0].w, cb0[1].x
itof r5.yz, r4.zzwz
div r5.w, l(6.283000), r5.y
itof r3.y, r3.y
mul r6.xy, r3.yyyy, l(0.000521, 0.000926, 0.000000, 0.000000)
max r3.y, cb0[3].y, l(0.000000)
mul r3.y, r3.y, r3.y
mul r3.y, r3.y, r3.y
mul r3.y, r3.y, l(0.050000)
mad r6.z, r2.z, r3.y, l(1.000000)
frc r7.xyzw, r0.xyzw
mul r7.xyzw, r7.xyzw, l(64.000000, 137.000000, 64.000000, 137.000000)
sincos null, r7.xyzw, r7.xyzw
mul r7.xyzw, r7.xyzw, l(256.000000, 241.000000, 256.000000, 241.000000)
frc r7.xyzw, r7.xyzw
add r7.xy, r7.ywyy, r7.xzxx
mul r7.xy, r7.xyxx, l(107.000000, 107.000000, 0.000000, 0.000000)
sincos null, r7.xy, r7.xyxx
mul r7.xy, r7.xyxx, l(269.000000, 269.000000, 0.000000, 0.000000)
frc r7.xy, r7.xyxx
add r6.w, -r2.w, l(1.000000)
mov r7.zw, l(0,0,0,0)
loop 
  ige r8.x, r7.w, r4.z
  breakc_nz r8.x
  itof r8.x, r7.w
  mul r8.x, r5.w, r8.x
  sincos r8.x, r9.x, r8.x
  mov r8.y, r9.x
  mul r8.xy, r6.xyxx, r8.xyxx
  div r8.xy, r8.xyxx, r6.zzzz
  mov r8.zw, l(0,0,0,0)
  loop 
    ige r9.x, r8.w, r4.w
    breakc_nz r9.x
    itof r9.x, r8.w
    add r9.x, -r7.x, r9.x
    add r9.x, r9.x, l(1.000000)
    div r9.x, r9.x, r5.z
    max r9.x, r9.x, l(0.010000)
    mul r9.xy, r8.xyxx, r9.xxxx
    mul r9.zw, r9.xxxy, l(0.000000, 0.000000, 1919.999878, 1080.000000)
    max r9.z, |r9.w|, |r9.z|
    lt r9.w, r9.z, l(1.000000)
    div r10.xy, r9.xyxx, r9.zzzz
    movc r9.xy, r9.wwww, r10.xyxx, r9.xyxx
    add r9.xy, r0.xyxx, r9.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r9.w, r9.xyxx, t2.yzwx, s0, l(0.000000)
    mad r10.x, -r9.w, l(999.000000), l(1000.000000)
    div r9.w, r9.w, r10.x
    mul r10.z, r9.w, l(1000.000000)
    add r9.z, -r9.y, l(1.000000)
    mad r9.xy, r9.xzxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
    div r9.zw, r4.xxxy, r10.zzzz
    div r10.xy, r9.xyxx, r9.zwzz
    add r9.xyz, -r2.xyzx, r10.xyzx
    dp3 r9.w, r9.xyzx, r9.xyzx
    rsq r9.w, r9.w
    mul r9.xyw, r9.wwww, r9.xyxz
    dp3 r9.x, r1.xzwx, r9.xywx
    max r9.x, r9.x, l(0.000000)
    log r9.x, r9.x
    mul r9.x, r9.x, cb0[2].w
    exp r9.x, r9.x
    add r9.x, -r2.w, r9.x
    div_sat r9.x, r9.x, r6.w
    ge r9.y, |r9.z|, cb0[0].w
    add r9.z, |r9.z|, -cb0[0].w
    div r9.z, r9.z, r5.x
    add_sat r9.z, -r9.z, l(1.000000)
    mul r9.z, r9.z, r9.z
    mul r9.z, r9.z, r9.x
    movc r9.x, r9.y, r9.z, r9.x
    iadd r9.y, r4.w, -r8.w
    itof r9.y, r9.y
    div r9.y, r9.y, r5.z
    mul r9.y, r9.y, r9.y
    mul r9.x, r9.y, r9.x
    max r8.z, r8.z, r9.x
    iadd r8.w, r8.w, l(1)
  endloop 
  add r7.z, r7.z, r8.z
  iadd r7.w, r7.w, l(1)
endloop 
div r0.x, r7.z, r5.y
add r0.x, r0.x, r0.x
div r0.y, r2.z, r1.y
add_sat r0.y, -r0.y, l(1.000000)
mul r0.x, r0.y, r0.x
mad_sat r0.x, -r0.x, cb0[0].x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb0[2].z
exp o0.x, r0.x
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.zwzz, t2.xyzw, s0, l(0.000000)
mad r0.y, -r0.x, l(999.000000), l(1000.000000)
div r0.x, r0.x, r0.y
mul r2.z, r0.x, l(1000.000000)
div r0.xy, r4.xyxx, r2.zzzz
div r2.xy, r3.zwzz, r0.xyxx
sample_l_indexable(texture2d)(float,float,float,float) r1.xzw, r0.zwzz, t16.xwyz, s0, l(0.000000)
mad r1.xzw, r1.xxzw, l(2.000000, 0.000000, 2.000000, 2.000000), l(-1.000000, 0.000000, -1.000000, -1.000000)
switch r3.x
  case l(0)
  mov r0.xy, l(4,1,0,0)
  break 
  case l(1)
  mov r0.xy, l(4,2,0,0)
  break 
  case l(2)
  mov r0.xy, l(4,4,0,0)
  break 
  case l(3)
  mov r0.xy, l(6,4,0,0)
  break 
  case l(4)
  mov r0.xy, l(8,4,0,0)
  break 
  case l(5)
  mov r0.xy, l(6,6,0,0)
  break 
  case l(6)
  mov r0.xy, l(8,6,0,0)
  break 
  case l(7)
  mov r0.xy, l(8,8,0,0)
  break 
endswitch 
itof r3.zw, r0.xxxy
div r4.z, l(6.283000), r3.z
mad r4.w, r2.z, r3.y, l(1.000000)
mov r5.yz, l(0,0,0,0)
loop 
  ige r5.w, r5.z, r0.x
  breakc_nz r5.w
  itof r5.w, r5.z
  add r5.w, r5.w, l(0.250000)
  mul r5.w, r4.z, r5.w
  sincos r8.x, r7.x, r5.w
  mov r8.y, r7.x
  mul r7.xz, r6.xxyx, r8.xxyx
  div r7.xz, r7.xxzx, r4.wwww
  mov r5.w, l(0)
  mov r6.z, l(0)
  loop 
    ige r7.w, r6.z, r0.y
    breakc_nz r7.w
    itof r7.w, r6.z
    add r7.w, -r7.y, r7.w
    add r7.w, r7.w, l(1.000000)
    div r7.w, r7.w, r3.w
    max r7.w, r7.w, l(0.010000)
    mul r8.xy, r7.wwww, r7.xzxx
    mul r8.zw, r8.xxxy, l(0.000000, 0.000000, 1919.999878, 1080.000000)
    max r7.w, |r8.w|, |r8.z|
    lt r8.z, r7.w, l(1.000000)
    div r9.xy, r8.xyxx, r7.wwww
    movc r8.xy, r8.zzzz, r9.xyxx, r8.xyxx
    add r8.xy, r0.zwzz, r8.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r7.w, r8.xyxx, t2.yzwx, s0, l(0.000000)
    mad r8.w, -r7.w, l(999.000000), l(1000.000000)
    div r7.w, r7.w, r8.w
    mul r9.z, r7.w, l(1000.000000)
    add r8.z, -r8.y, l(1.000000)
    mad r8.xy, r8.xzxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
    div r8.zw, r4.xxxy, r9.zzzz
    div r9.xy, r8.xyxx, r8.zwzz
    add r8.xyz, -r2.xyzx, r9.xyzx
    dp3 r7.w, r8.xyzx, r8.xyzx
    rsq r7.w, r7.w
    mul r8.xyw, r7.wwww, r8.xyxz
    dp3 r7.w, r1.xzwx, r8.xywx
    max r7.w, r7.w, l(0.000000)
    log r7.w, r7.w
    mul r7.w, r7.w, cb0[2].w
    exp r7.w, r7.w
    add r7.w, -r2.w, r7.w
    div_sat r7.w, r7.w, r6.w
    ge r8.x, |r8.z|, cb0[0].w
    add r8.y, |r8.z|, -cb0[0].w
    div r8.y, r8.y, r5.x
    add_sat r8.y, -r8.y, l(1.000000)
    mul r8.y, r8.y, r8.y
    mul r8.y, r7.w, r8.y
    movc r7.w, r8.x, r8.y, r7.w
    iadd r8.x, r0.y, -r6.z
    itof r8.x, r8.x
    div r8.x, r8.x, r3.w
    mul r8.x, r8.x, r8.x
    mul r7.w, r7.w, r8.x
    max r5.w, r5.w, r7.w
    iadd r6.z, r6.z, l(1)
  endloop 
  add r5.y, r5.w, r5.y
  iadd r5.z, r5.z, l(1)
endloop 
div r0.x, r5.y, r3.z
add r0.x, r0.x, r0.x
div r0.y, r2.z, r1.y
add_sat r0.y, -r0.y, l(1.000000)
mul r0.x, r0.y, r0.x
mad_sat r0.x, -r0.x, cb0[0].x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb0[2].z
exp o1.x, r0.x
add r0.xyzw, v1.xyxy, l(-0.000130, -0.000231, 0.000130, -0.000231)
sample_l_indexable(texture2d)(float,float,float,float) r1.x, r0.xyxx, t2.xyzw, s0, l(0.000000)
mad r1.z, -r1.x, l(999.000000), l(1000.000000)
div r1.x, r1.x, r1.z
mul r2.z, r1.x, l(1000.000000)
mad r7.xyzw, v1.xyxy, l(1.000000, -1.000000, 1.000000, -1.000000), l(-0.000130, 1.000232, 0.000130, 1.000232)
mad r7.xyzw, r7.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
div r1.xz, r4.xxyx, r2.zzzz
div r2.xy, r7.xyxx, r1.xzxx
sample_l_indexable(texture2d)(float,float,float,float) r1.xzw, r0.xyxx, t16.xwyz, s0, l(0.000000)
mad r1.xzw, r1.xxzw, l(2.000000, 0.000000, 2.000000, 2.000000), l(-1.000000, 0.000000, -1.000000, -1.000000)
switch r3.x
  case l(0)
  mov r3.zw, l(0,0,4,1)
  break 
  case l(1)
  mov r3.zw, l(0,0,4,2)
  break 
  case l(2)
  mov r3.zw, l(0,0,4,4)
  break 
  case l(3)
  mov r3.zw, l(0,0,6,4)
  break 
  case l(4)
  mov r3.zw, l(0,0,8,4)
  break 
  case l(5)
  mov r3.zw, l(0,0,6,6)
  break 
  case l(6)
  mov r3.zw, l(0,0,8,6)
  break 
  case l(7)
  mov r3.zw, l(0,0,8,8)
  break 
endswitch 
itof r4.zw, r3.zzzw
div r5.y, l(6.283000), r4.z
mad r5.z, r2.z, r3.y, l(1.000000)
frc r8.xyzw, r0.xyzw
mul r8.xyzw, r8.xyzw, l(64.000000, 137.000000, 64.000000, 137.000000)
sincos null, r8.xyzw, r8.xyzw
mul r8.xyzw, r8.xyzw, l(256.000000, 241.000000, 256.000000, 241.000000)
frc r8.xyzw, r8.xyzw
add r7.xy, r8.ywyy, r8.xzxx
mul r7.xy, r7.xyxx, l(107.000000, 107.000000, 0.000000, 0.000000)
sincos null, r7.xy, r7.xyxx
mul r7.xy, r7.xyxx, l(269.000000, 269.000000, 0.000000, 0.000000)
frc r7.xy, r7.xyxx
mov r5.w, l(0)
mov r6.z, l(0)
loop 
  ige r8.x, r6.z, r3.z
  breakc_nz r8.x
  itof r8.x, r6.z
  add r8.x, r8.x, l(0.500000)
  mul r8.x, r5.y, r8.x
  sincos r8.x, r9.x, r8.x
  mov r8.y, r9.x
  mul r8.xy, r6.xyxx, r8.xyxx
  div r8.xy, r8.xyxx, r5.zzzz
  mov r8.zw, l(0,0,0,0)
  loop 
    ige r9.x, r8.w, r3.w
    breakc_nz r9.x
    itof r9.x, r8.w
    add r9.x, -r7.x, r9.x
    add r9.x, r9.x, l(1.000000)
    div r9.x, r9.x, r4.w
    max r9.x, r9.x, l(0.010000)
    mul r9.xy, r8.xyxx, r9.xxxx
    mul r9.zw, r9.xxxy, l(0.000000, 0.000000, 1919.999878, 1080.000000)
    max r9.z, |r9.w|, |r9.z|
    lt r9.w, r9.z, l(1.000000)
    div r10.xy, r9.xyxx, r9.zzzz
    movc r9.xy, r9.wwww, r10.xyxx, r9.xyxx
    add r9.xy, r0.xyxx, r9.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r9.w, r9.xyxx, t2.yzwx, s0, l(0.000000)
    mad r10.x, -r9.w, l(999.000000), l(1000.000000)
    div r9.w, r9.w, r10.x
    mul r10.z, r9.w, l(1000.000000)
    add r9.z, -r9.y, l(1.000000)
    mad r9.xy, r9.xzxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
    div r9.zw, r4.xxxy, r10.zzzz
    div r10.xy, r9.xyxx, r9.zwzz
    add r9.xyz, -r2.xyzx, r10.xyzx
    dp3 r9.w, r9.xyzx, r9.xyzx
    rsq r9.w, r9.w
    mul r9.xyw, r9.wwww, r9.xyxz
    dp3 r9.x, r1.xzwx, r9.xywx
    max r9.x, r9.x, l(0.000000)
    log r9.x, r9.x
    mul r9.x, r9.x, cb0[2].w
    exp r9.x, r9.x
    add r9.x, -r2.w, r9.x
    div_sat r9.x, r9.x, r6.w
    ge r9.y, |r9.z|, cb0[0].w
    add r9.z, |r9.z|, -cb0[0].w
    div r9.z, r9.z, r5.x
    add_sat r9.z, -r9.z, l(1.000000)
    mul r9.z, r9.z, r9.z
    mul r9.z, r9.z, r9.x
    movc r9.x, r9.y, r9.z, r9.x
    iadd r9.y, r3.w, -r8.w
    itof r9.y, r9.y
    div r9.y, r9.y, r4.w
    mul r9.y, r9.y, r9.y
    mul r9.x, r9.y, r9.x
    max r8.z, r8.z, r9.x
    iadd r8.w, r8.w, l(1)
  endloop 
  add r5.w, r5.w, r8.z
  iadd r6.z, r6.z, l(1)
endloop 
div r0.x, r5.w, r4.z
add r0.x, r0.x, r0.x
div r0.y, r2.z, r1.y
add_sat r0.y, -r0.y, l(1.000000)
mul r0.x, r0.y, r0.x
mad_sat r0.x, -r0.x, cb0[0].x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb0[2].z
exp o2.x, r0.x
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.zwzz, t2.xyzw, s0, l(0.000000)
mad r0.y, -r0.x, l(999.000000), l(1000.000000)
div r0.x, r0.x, r0.y
mul r2.z, r0.x, l(1000.000000)
div r0.xy, r4.xyxx, r2.zzzz
div r2.xy, r7.zwzz, r0.xyxx
sample_l_indexable(texture2d)(float,float,float,float) r1.xzw, r0.zwzz, t16.xwyz, s0, l(0.000000)
mad r1.xzw, r1.xxzw, l(2.000000, 0.000000, 2.000000, 2.000000), l(-1.000000, 0.000000, -1.000000, -1.000000)
switch r3.x
  case l(0)
  mov r0.xy, l(4,1,0,0)
  break 
  case l(1)
  mov r0.xy, l(4,2,0,0)
  break 
  case l(2)
  mov r0.xy, l(4,4,0,0)
  break 
  case l(3)
  mov r0.xy, l(6,4,0,0)
  break 
  case l(4)
  mov r0.xy, l(8,4,0,0)
  break 
  case l(5)
  mov r0.xy, l(6,6,0,0)
  break 
  case l(6)
  mov r0.xy, l(8,6,0,0)
  break 
  case l(7)
  mov r0.xy, l(8,8,0,0)
  break 
endswitch 
itof r3.xz, r0.xxyx
div r3.w, l(6.283000), r3.x
mad r3.y, r2.z, r3.y, l(1.000000)
mov r4.zw, l(0,0,0,0)
loop 
  ige r5.y, r4.w, r0.x
  breakc_nz r5.y
  itof r5.y, r4.w
  add r5.y, r5.y, l(0.750000)
  mul r5.y, r3.w, r5.y
  sincos r8.x, r7.x, r5.y
  mov r8.y, r7.x
  mul r5.yz, r6.xxyx, r8.xxyx
  div r5.yz, r5.yyzy, r3.yyyy
  mov r5.w, l(0)
  mov r6.z, l(0)
  loop 
    ige r7.x, r6.z, r0.y
    breakc_nz r7.x
    itof r7.x, r6.z
    add r7.x, -r7.y, r7.x
    add r7.x, r7.x, l(1.000000)
    div r7.x, r7.x, r3.z
    max r7.x, r7.x, l(0.010000)
    mul r7.xz, r5.yyzy, r7.xxxx
    mul r8.xy, r7.xzxx, l(1919.999878, 1080.000000, 0.000000, 0.000000)
    max r7.w, |r8.y|, |r8.x|
    lt r8.x, r7.w, l(1.000000)
    div r8.yz, r7.xxzx, r7.wwww
    movc r7.xz, r8.xxxx, r8.yyzy, r7.xxzx
    add r8.xy, r0.zwzz, r7.xzxx
    sample_l_indexable(texture2d)(float,float,float,float) r7.x, r8.xyxx, t2.xyzw, s0, l(0.000000)
    mad r7.z, -r7.x, l(999.000000), l(1000.000000)
    div r7.x, r7.x, r7.z
    mul r9.z, r7.x, l(1000.000000)
    add r8.z, -r8.y, l(1.000000)
    mad r7.xz, r8.xxzx, l(2.000000, 0.000000, 2.000000, 0.000000), l(-1.000000, 0.000000, -1.000000, 0.000000)
    div r8.xy, r4.xyxx, r9.zzzz
    div r9.xy, r7.xzxx, r8.xyxx
    add r7.xzw, -r2.xxyz, r9.xxyz
    dp3 r8.x, r7.xzwx, r7.xzwx
    rsq r8.x, r8.x
    mul r8.xyz, r7.xzwx, r8.xxxx
    dp3 r7.x, r1.xzwx, r8.xyzx
    max r7.x, r7.x, l(0.000000)
    log r7.x, r7.x
    mul r7.x, r7.x, cb0[2].w
    exp r7.x, r7.x
    add r7.x, -r2.w, r7.x
    div_sat r7.x, r7.x, r6.w
    ge r7.z, |r7.w|, cb0[0].w
    add r7.w, |r7.w|, -cb0[0].w
    div r7.w, r7.w, r5.x
    add_sat r7.w, -r7.w, l(1.000000)
    mul r7.w, r7.w, r7.w
    mul r7.w, r7.w, r7.x
    movc r7.x, r7.z, r7.w, r7.x
    iadd r7.z, r0.y, -r6.z
    itof r7.z, r7.z
    div r7.z, r7.z, r3.z
    mul r7.z, r7.z, r7.z
    mul r7.x, r7.z, r7.x
    max r5.w, r5.w, r7.x
    iadd r6.z, r6.z, l(1)
  endloop 
  add r4.z, r4.z, r5.w
  iadd r4.w, r4.w, l(1)
endloop 
div r0.x, r4.z, r3.x
add r0.x, r0.x, r0.x
div r0.y, r2.z, r1.y
add_sat r0.y, -r0.y, l(1.000000)
mul r0.x, r0.y, r0.x
mad_sat r0.x, -r0.x, cb0[0].x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb0[2].z
exp o3.x, r0.x
ret 
// Approximately 488 instruction slots used
