//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool mfDebug;                      // Offset:    0 Size:     4
//   float mfFocusStrength;             // Offset:    4 Size:     4
//   float mfZoomStrength;              // Offset:    8 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__Ganossa_MF_QuadTex           texture  float4          2d            t12      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, l(0.000521, 0.000926, 0.000000, 0.000000), t12.xyzw, s0
add_sat r0.xyzw, r0.xyzw, l(-0.100000, -0.100000, -0.100000, -0.100000)
if_nz cb0[0].x
  lt r1.x, v1.y, l(0.010000)
  if_nz r1.x
    add r1.xy, r0.xxxx, l(-0.010000, 0.010000, 0.000000, 0.000000)
    lt r1.x, r1.x, v1.x
    lt r1.y, v1.x, r1.y
    and r1.x, r1.y, r1.x
    if_nz r1.x
      mov o0.xyzw, l(1.000000,0,0,0)
      ret 
    endif 
  endif 
  lt r1.x, l(0.010000), v1.y
  lt r1.y, v1.y, l(0.020000)
  and r1.x, r1.y, r1.x
  if_nz r1.x
    add r1.xy, r0.yyyy, l(-0.010000, 0.010000, 0.000000, 0.000000)
    lt r1.x, r1.x, v1.x
    lt r1.y, v1.x, r1.y
    and r1.x, r1.y, r1.x
    if_nz r1.x
      mov o0.xyzw, l(0,1.000000,0,0)
      ret 
    endif 
  endif 
  lt r1.x, l(0.020000), v1.y
  lt r1.y, v1.y, l(0.030000)
  and r1.x, r1.y, r1.x
  if_nz r1.x
    add r1.xy, r0.zzzz, l(-0.010000, 0.010000, 0.000000, 0.000000)
    lt r1.x, r1.x, v1.x
    lt r1.y, v1.x, r1.y
    and r1.x, r1.y, r1.x
    if_nz r1.x
      mov o0.xyzw, l(0,0,1.000000,0)
      ret 
    endif 
  endif 
  lt r1.x, l(0.030000), v1.y
  lt r1.y, v1.y, l(0.040000)
  and r1.x, r1.y, r1.x
  if_nz r1.x
    add r1.xy, r0.wwww, l(-0.010000, 0.010000, 0.000000, 0.000000)
    lt r1.x, r1.x, v1.x
    lt r1.y, v1.x, r1.y
    and r1.x, r1.y, r1.x
    if_nz r1.x
      mov o0.xyzw, l(1.000000,1.000000,0,0)
      ret 
    endif 
  endif 
endif 
add r1.xy, r0.wwww, r0.yzyy
add r1.xy, -r0.xxxx, r1.xyxx
add r1.xy, -r0.zyzz, r1.xyxx
mul r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
min r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
max r1.z, r1.y, l(-0.500000)
add r1.xy, r1.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
if_nz cb0[0].x
  lt r1.zw, v1.xxxy, l(0.000000, 0.000000, 0.502500, 0.505000)
  lt r2.xy, l(0.497500, 0.495000, 0.000000, 0.000000), v1.xyxx
  and r1.z, r1.z, r2.x
  and r1.z, r1.w, r1.z
  and r1.z, r2.y, r1.z
  if_nz r1.z
    mov o0.xyzw, l(0,1.000000,0,0)
    ret 
  endif 
  mad r2.xyzw, r1.xxyy, r1.xxyy, l(0.247500, 0.252500, 0.245000, 0.255000)
  lt r1.zw, r2.xxxz, v1.xxxy
  lt r2.xy, v1.xyxx, r2.ywyy
  and r1.z, r1.z, r2.x
  and r1.z, r1.w, r1.z
  and r1.z, r2.y, r1.z
  if_nz r1.z
    mov o0.xyzw, l(1.000000,0,0,0)
    ret 
  endif 
endif 
max r1.z, r0.w, r0.z
max r1.z, r0.y, r1.z
max r1.z, r0.x, r1.z
add r2.xyzw, r0.zzyz, r0.yxxy
add r2.xyzw, r0.wwwx, r2.xyzw
mad r2.xyzw, -r2.xyzw, l(0.333333, 0.333333, 0.333333, 0.333333), r0.xyzw
eq r0.xyz, r0.xyzx, r1.zzzz
add r2.xyzw, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
movc r0.z, r0.z, r2.z, r2.w
movc r0.y, r0.y, r2.y, r0.z
movc r0.x, r0.x, r2.x, r0.y
mul r0.y, r0.x, r1.z
mul r0.zw, r1.zzzz, r1.xxxy
mul r1.x, r0.x, r0.x
mul r0.x, r0.x, r1.x
mul r0.xz, r0.xxxx, r0.zzwz
mul r0.xyz, r0.xyzx, cb0[0].yzyy
mul r0.xz, r0.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)
mad r0.y, -r0.y, l(0.500000), l(1.000000)
mul r0.w, cb0[0].z, l(0.600000)
min r0.w, r0.w, l(0.550000)
mul r1.xy, r0.wwww, r0.xzxx
mad r0.xz, r0.xxzx, r0.wwww, r0.yyyy
add r0.xz, -r0.xxzx, l(1.000000, 0.000000, 1.000000, 0.000000)
min r0.xz, r0.xxzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mad r0.yw, v1.xxxy, r0.yyyy, r1.xxxy
add r0.xy, r0.xzxx, r0.ywyy
sample_indexable(texture2d)(float,float,float,float) o0.xyzw, r0.xyxx, t0.xyzw, s0
ret 
// Approximately 111 instruction slots used
