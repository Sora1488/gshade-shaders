//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int iPS;                           // Offset:    0 Size:     4
//   int iRadius;                       // Offset:    4 Size:     4
//   bool bKeepHue;                     // Offset:    8 Size:     4
//   float fHueMaxDistance;             // Offset:   12 Size:     4
//   float fSatMaxDistance;             // Offset:   16 Size:     4
//   float fLumMaxDistance;             // Offset:   20 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 10
sample_l_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)
min r0.w, r0.z, r0.y
min r0.w, r0.w, r0.x
max r1.x, r0.z, r0.y
max r1.x, r0.x, r1.x
add r1.y, r0.w, r1.x
add r0.w, -r0.w, r1.x
ne r1.z, r0.w, l(0.000000)
add r2.xyz, -r0.zxyz, r1.xxxx
div r2.xyz, r2.xyzx, r0.wwww
add r2.xyz, -r2.zxyz, r2.xyzx
add r2.xyz, r2.xyzx, l(6.000000, 2.000000, 4.000000, 0.000000)
ge r0.xyz, r0.xyzx, r1.xxxx
and r0.xyz, r0.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r0.xyz, r2.xyzx, r0.xyzx
max r0.x, r0.x, r0.z
max r0.x, r0.x, r0.y
mul r0.x, r0.x, l(0.166667)
add r0.z, r1.y, l(-1.000000)
add r0.z, -|r0.z|, l(1.000000)
div r0.y, r0.w, r0.z
and r0.xy, r0.xyxx, r1.zzzz
imul null, r0.z, cb0[0].y, cb0[0].y
itof r0.z, r0.z
itof r1.xz, cb0[0].xxyx
mul r2.xy, r1.xxxx, l(0.000521, 0.000926, 0.000000, 0.000000)
mad_sat r2.zw, -r1.zzzz, r2.xxxy, v1.xxxy
mad_sat r1.zw, r1.zzzz, r2.xxxy, v1.xxxy
add r0.w, r0.x, l(1.000000)
add r3.x, r0.z, l(1.000000)
mov r3.yzw, l(0,0,0,0)
mov r4.x, r2.z
mov r4.z, l(0)
loop 
  lt r4.w, r1.z, r4.x
  breakc_nz r4.w
  mov r5.xyz, r3.yzwy
  mov r4.w, r2.w
  mov r5.w, r4.z
  loop 
    lt r6.x, r1.w, r4.w
    breakc_nz r6.x
    mov r4.y, r4.w
    add r6.xy, r4.xyxx, -v1.xyxx
    div r6.xy, r6.xyxx, r2.xyxx
    round_z r6.xy, r6.xyxx
    dp2 r6.x, r6.xyxx, r6.xyxx
    lt r6.y, r0.z, r6.x
    if_nz r6.y
      mad r6.y, r1.x, l(0.000926), r4.w
      mov r4.w, r6.y
      continue 
    endif 
    sample_l_indexable(texture2d)(float,float,float,float) r6.yzw, r4.xyxx, t0.wxyz, s0, l(0.000000)
    min r4.y, r6.w, r6.z
    min r4.y, r4.y, r6.y
    max r7.x, r6.w, r6.z
    max r7.x, r6.y, r7.x
    add r7.y, r4.y, r7.x
    add r4.y, -r4.y, r7.x
    ne r7.z, r4.y, l(0.000000)
    add r8.xyz, -r6.wyzw, r7.xxxx
    div r8.xyz, r8.xyzx, r4.yyyy
    add r8.xyz, -r8.zxyz, r8.xyzx
    add r8.xyz, r8.xyzx, l(6.000000, 2.000000, 4.000000, 0.000000)
    ge r9.xyz, r6.yzwy, r7.xxxx
    and r9.xyz, r9.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
    mul r8.xyz, r8.xyzx, r9.xyzx
    max r7.x, r8.x, r8.z
    max r7.x, r7.x, r8.y
    mul r8.x, r7.x, l(0.166667)
    add r7.x, r7.y, l(-1.000000)
    add r7.x, -|r7.x|, l(1.000000)
    div r8.y, r4.y, r7.x
    and r7.xz, r7.zzzz, r8.xxyx
    add r4.y, r0.y, -r7.z
    lt r7.z, cb0[1].x, |r4.y|
    if_nz r7.z
      mad r7.z, r1.x, l(0.000926), r4.w
      mov r4.w, r7.z
      continue 
    endif 
    mul r7.y, r7.y, l(0.500000)
    mad r7.y, r1.y, l(0.500000), -r7.y
    lt r7.z, cb0[1].y, |r7.y|
    if_nz r7.z
      mad r7.z, r1.x, l(0.000926), r4.w
      mov r4.w, r7.z
      continue 
    endif 
    ne r7.z, r0.x, r7.x
    add r7.w, -r0.x, r7.x
    add r7.x, r0.w, -r7.x
    min r7.x, r7.x, r7.w
    add r7.x, r7.x, r7.x
    and r7.x, r7.x, r7.z
    lt r7.z, cb0[0].w, r7.x
    if_nz r7.z
      mad r7.z, r1.x, l(0.000926), r4.w
      mov r4.w, r7.z
      continue 
    endif 
    add r7.x, -r7.x, l(1.000000)
    add r4.y, -|r4.y|, r7.x
    add r4.y, r4.y, l(1.000000)
    add r4.y, -|r7.y|, r4.y
    add r4.y, r4.y, l(1.000000)
    add r6.x, r3.x, -r6.x
    div r6.x, r6.x, r3.x
    add r4.y, r4.y, r6.x
    add r5.w, r4.y, r5.w
    mad r5.xyz, r4.yyyy, r6.yzwy, r5.xyzx
    mad r4.w, r1.x, l(0.000926), r4.w
  endloop 
  mov r3.yzw, r5.xxyz
  mov r4.z, r5.w
  mad r4.x, r1.x, l(0.000521), r4.x
endloop 
div r0.yzw, r3.yyzw, r4.zzzz
if_nz cb0[0].z
  min r1.x, r0.w, r0.z
  min r1.x, r0.y, r1.x
  max r1.y, r0.w, r0.z
  max r1.y, r0.y, r1.y
  add r1.z, r1.x, r1.y
  mul r1.w, r1.z, l(0.500000)
  add r1.x, -r1.x, r1.y
  ne r1.y, r1.x, l(0.000000)
  add r1.z, r1.z, l(-1.000000)
  add r1.z, -|r1.z|, l(1.000000)
  div r1.x, r1.x, r1.z
  and r1.x, r1.x, r1.y
  mad r2.xyz, r0.xxxx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)
  mad_sat r2.xyz, |r2.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)
  add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  mul r0.x, r1.x, r1.z
  mad r0.yzw, r2.xxyz, r0.xxxx, r1.wwww
endif 
mov o0.xyz, r0.yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 141 instruction slots used
