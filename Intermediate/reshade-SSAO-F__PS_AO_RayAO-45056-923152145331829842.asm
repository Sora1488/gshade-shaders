//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float AO_TEXSCALE;                 // Offset:    0 Size:     4
//   float AO_SHARPNESS;                // Offset:    4 Size:     4 [unused]
//   bool AO_SHARPNESS_DETECT;          // Offset:    8 Size:     4
//   int AO_BLUR_STEPS;                 // Offset:   12 Size:     4 [unused]
//   int AO_DEBUG;                      // Offset:   16 Size:     4 [unused]
//   bool AO_LUMINANCE_CONSIDERATION;   // Offset:   20 Size:     4 [unused]
//   float AO_LUMINANCE_LOWER;          // Offset:   24 Size:     4 [unused]
//   float AO_LUMINANCE_UPPER;          // Offset:   28 Size:     4 [unused]
//   float AO_FADE_START;               // Offset:   32 Size:     4 [unused]
//   float AO_FADE_END;                 // Offset:   36 Size:     4
//   int iSSAOSamples;                  // Offset:   40 Size:     4 [unused]
//   bool iSSAOSmartSampling;           // Offset:   44 Size:     4 [unused]
//   float fSSAOSamplingRange;          // Offset:   48 Size:     4 [unused]
//   float fSSAODarkeningAmount;        // Offset:   52 Size:     4 [unused]
//   float fSSAOBrighteningAmount;      // Offset:   56 Size:     4 [unused]
//   int iRayAOSamples;                 // Offset:   60 Size:     4
//   float fRayAOSamplingRange;         // Offset:   64 Size:     4
//   float fRayAOMaxDepth;              // Offset:   68 Size:     4
//   float fRayAOMinDepth;              // Offset:   72 Size:     4
//   float fRayAOPower;                 // Offset:   76 Size:     4 [unused]
//   int iHBAOSamples;                  // Offset:   80 Size:     4 [unused]
//   float fHBAOSamplingRange;          // Offset:   84 Size:     4 [unused]
//   float fHBAOAmount;                 // Offset:   88 Size:     4 [unused]
//   float fHBAOClamp;                  // Offset:   92 Size:     4 [unused]
//   float fHBAOAttenuation;            // Offset:   96 Size:     4 [unused]
//   int iSSGISamples;                  // Offset:  100 Size:     4 [unused]
//   float fSSGISamplingRange;          // Offset:  104 Size:     4 [unused]
//   float fSSGIIlluminationMult;       // Offset:  108 Size:     4 [unused]
//   float fSSGIOcclusionMult;          // Offset:  112 Size:     4 [unused]
//   float fSSGIModelThickness;         // Offset:  116 Size:     4 [unused]
//   float fSSGISaturation;             // Offset:  120 Size:     4 [unused]
//   float iSAOSamples;                 // Offset:  124 Size:     4 [unused]
//   float fSAOIntensity;               // Offset:  128 Size:     4 [unused]
//   float fSAOClamp;                   // Offset:  132 Size:     4 [unused]
//   float fSAORadius;                  // Offset:  136 Size:     4 [unused]
//   float fSAOBias;                    // Offset:  140 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.219661, 0.903264, 0.225468, 0},
                              { 0.059167, 0.220151, -0.143030, 0},
                              { -0.415225, 0.132086, 0.703673, 0},
                              { -0.379081, 0.145415, 0.100605, 0},
                              { 0.314961, -0.129458, 0.704452, 0},
                              { -0.110841, 0.216284, 0.133628, 0},
                              { 0.658012, -0.439597, -0.291937, 0},
                              { 0.537791, 0.311219, 0.426864, 0},
                              { -0.275254, 0.076259, -0.127341, 0},
                              { -0.191564, -0.497342, -0.312963, 0},
                              { -0.263477, 0.527792, -0.110745, 0},
                              { 0.824275, 0.024341, 0.060491, 0},
                              { 0.062627, -0.212864, -0.036716, 0},
                              { -0.179566, -0.354386, 0.079243, 0},
                              { 0.060396, 0.246290, 0.450118, 0},
                              { -0.778634, -0.381485, -0.239126, 0},
                              { 0.279292, 0.248728, -0.051853, 0},
                              { 0.184138, 0.169699, -0.893628, 0},
                              { -0.347978, 0.472577, -0.719685, 0},
                              { -0.136502, -0.251342, 0.470937, 0},
                              { 0.128039, -0.563242, 0.341928, 0},
                              { -0.480023, -0.189947, 0.239881, 0},
                              { 0.638915, 0.119101, -0.527121, 0},
                              { 0.193282, -0.369210, -0.606059, 0},
                              { -0.346545, -0.165465, -0.674676, 0},
                              { 0.244842, -0.161096, 0.132894, 0},
                              { 0.244842, 0.903264, 0.242547, 0},
                              { 0.219661, 0.220151, -0.184303, 0},
                              { 0.059167, 0.132086, 0.700367, 0},
                              { -0.415225, 0.145415, 0.180061, 0},
                              { -0.379081, -0.129458, 0.780445, 0},
                              { 0.314961, 0.216284, 0.173363, 0},
                              { -0.110841, -0.439597, -0.269619, 0},
                              { 0.658012, 0.311219, 0.426786, 0},
                              { 0.537791, 0.076259, -0.127734, 0},
                              { -0.275254, -0.497342, -0.316296, 0},
                              { -0.191564, 0.527792, -0.171074, 0},
                              { -0.263477, 0.024341, 0.086049, 0},
                              { 0.824275, -0.212864, -0.083672, 0},
                              { 0.062627, -0.354386, 0.007924, 0},
                              { -0.179566, 0.246290, 0.445012, 0},
                              { 0.060396, -0.381485, -0.248391, 0},
                              { -0.778634, 0.248728, -0.065185, 0},
                              { 0.279292, 0.169699, -0.849363, 0},
                              { 0.184138, 0.472577, -0.741969, 0},
                              { -0.347978, -0.251342, 0.670937, 0},
                              { -0.136502, -0.563242, 0.364193, 0},
                              { 0.128039, -0.189947, 0.239488, 0},
                              { -0.480023, 0.119101, -0.527121, 0},
                              { 0.638915, -0.369210, -0.506059, 0},
                              { 0.193282, -0.165465, -0.627468, 0},
                              { -0.346545, -0.161096, 0.428937, 0},
                              { 0.244842, -0.161096, 0.225468, 0},
                              { 0.219661, 0.903264, -0.143030, 0},
                              { 0.059167, 0.220151, 0.703673, 0},
                              { -0.415225, 0.132086, 0.100605, 0},
                              { -0.379081, 0.345414, 0.704452, 0},
                              { 0.314961, -0.429458, 0.133628, 0},
                              { -0.110841, 0.316284, -0.291937, 0},
                              { 0.658012, -0.239597, 0.426864, 0},
                              { 0.537791, 0.331122, -0.127341, 0},
                              { -0.275254, 0.476259, -0.312963, 0},
                              { -0.191564, -0.397342, -0.110745, 0},
                              { -0.263477, 0.227792, 0.060491, 0},
                              { 0.824275, -0.343415, -0.036716, 0},
                              { 0.062627, -0.412864, 0.079243, 0},
                              { -0.179566, -0.354386, 0.450118, 0},
                              { 0.060396, 0.246290, -0.239126, 0},
                              { -0.778634, -0.381485, -0.051853, 0},
                              { 0.279292, 0.448728, -0.893628, 0},
                              { 0.184138, 0.369699, -0.719685, 0},
                              { -0.347978, 0.272577, 0.470937, 0},
                              { -0.136502, -0.551342, 0.341928, 0},
                              { 0.128039, -0.163242, 0.239881, 0},
                              { -0.480023, -0.389947, -0.527121, 0},
                              { 0.638915, 0.319101, -0.606059, 0},
                              { 0.193282, -0.169210, -0.674676, 0},
                              { -0.346545, -0.265465, 0.128937, 0} }
dcl_constantbuffer CB0[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
div r0.xy, v1.xyxx, cb0[0].xxxx
lt r0.zw, l(0.000000, 0.000000, 1.000000, 1.000000), r0.xxxy
or r0.z, r0.w, r0.z
discard_nz r0.z
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t2.yzxw, s0, l(0.000000)
mad r0.w, -r0.z, l(999.000000), l(1000.000000)
div r0.z, r0.z, r0.w
if_z cb0[0].z
  mov o0.w, r0.z
else 
  add r1.xyzw, r0.xyxy, l(0.000000, 0.001000, 0.001000, 0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t2.yzwx, s0, l(0.000000)
  mad r1.x, -r0.w, l(999.000000), l(1000.000000)
  div r0.w, r0.w, r1.x
  sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t2.xyzw, s0, l(0.000000)
  mad r1.y, -r1.x, l(999.000000), l(1000.000000)
  div r1.x, r1.x, r1.y
  add r2.y, -r0.z, r0.w
  add r2.x, -r0.z, r1.x
  mul r1.xy, r2.xyxx, l(0.001000, 0.001000, 0.000000, 0.000000)
  mov r1.z, l(0.000001)
  dp3 r0.w, r1.xyzx, r1.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r1.xyzx
  dp3 r0.w, r1.xyzx, l(0.333000, 0.333000, 0.333000, 0.000000)
  mul o0.w, r0.w, l(0.100000)
endif 
min r0.w, cb0[2].y, l(0.999900)
lt r0.w, r0.w, r0.z
if_nz r0.w
  mov o0.xyz, l(1.000000,1.000000,1.000000,0)
else 
  add r1.xyzw, r0.xyxy, l(0.000000, 0.001000, 0.001000, 0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t2.yzwx, s0, l(0.000000)
  mad r1.x, -r0.w, l(999.000000), l(1000.000000)
  div r0.w, r0.w, r1.x
  sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t2.xyzw, s0, l(0.000000)
  mad r1.y, -r1.x, l(999.000000), l(1000.000000)
  div r1.x, r1.x, r1.y
  add r2.y, -r0.z, r0.w
  add r2.x, -r0.z, r1.x
  mul r1.xy, r2.xyxx, l(0.001000, 0.001000, 0.000000, 0.000000)
  mov r1.z, l(0.000001)
  dp3 r0.w, r1.xyzx, r1.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r1.xyzx
  add r2.xyzw, r0.xyxy, l(-0.500000, -0.500000, 0.500000, 0.500000)
  dp2 r0.w, r2.xyxx, l(12.989800, 78.233002, 0.000000, 0.000000)
  sincos r0.w, null, r0.w
  mul r0.w, r0.w, l(43758.542969)
  frc r3.y, r0.w
  dp2 r0.w, r2.zwzz, l(12.989800, 78.233002, 0.000000, 0.000000)
  sincos r0.w, null, r0.w
  mul r0.w, r0.w, l(43758.542969)
  frc r3.z, r0.w
  dp2 r0.w, r0.xyxx, l(12.989800, 78.233002, 0.000000, 0.000000)
  sincos r0.w, null, r0.w
  mul r0.w, r0.w, l(43758.542969)
  frc r3.x, r0.w
  dp3 r0.w, r3.xyzx, r3.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, r3.xyzx
  mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[4].y
  mov r1.w, l(0)
  mov r2.w, l(0)
  loop 
    ige r3.x, r2.w, cb0[3].w
    breakc_nz r3.x
    dp3 r3.x, icb[r2.w + 0].zxyz, r2.xyzx
    add r3.x, r3.x, r3.x
    mad r3.xyz, r2.xyzx, -r3.xxxx, icb[r2.w + 0].zxyz
    dp3 r3.w, r1.zxyz, r3.xyzx
    lt r4.x, l(0.000000), r3.w
    lt r3.w, r3.w, l(0.000000)
    iadd r3.w, -r4.x, r3.w
    itof r3.w, r3.w
    mul r3.xyz, r3.wwww, r3.xyzx
    mul r3.yz, r3.yyzy, cb0[4].xxxx
    mad r3.x, -r3.x, cb0[4].x, r0.z
    div r3.yz, r3.yyzy, r0.zzzz
    add_sat r3.yz, r0.xxyx, r3.yyzy
    sample_l_indexable(texture2d)(float,float,float,float) r3.y, r3.yzyy, t2.yxzw, s0, l(0.000000)
    mad r3.z, -r3.y, l(999.000000), l(1000.000000)
    div r3.y, r3.y, r3.z
    add_sat r3.x, -r3.y, r3.x
    mul_sat r3.y, r0.w, r3.x
    mad r3.z, r3.y, l(-2.000000), l(3.000000)
    mul r3.y, r3.y, r3.y
    mad r3.y, -r3.z, r3.y, l(1.000000)
    mul r3.z, r3.y, r3.x
    lt r3.w, cb0[4].z, r3.z
    lt r3.z, r3.z, cb0[4].y
    and r3.z, r3.z, r3.w
    mad r3.x, -r3.x, r3.y, l(1.000000)
    log r3.x, r3.x
    mul r3.x, r3.x, l(2.500000)
    exp r3.x, r3.x
    add r3.x, r1.w, r3.x
    movc r1.w, r3.z, r3.x, r1.w
    iadd r2.w, r2.w, l(1)
  endloop 
  itof r0.x, cb0[3].w
  div r0.x, r1.w, r0.x
  add r0.x, -r0.x, cb0[4].x
  add r0.x, r0.x, l(1.000000)
  mov_sat o0.xyz, r0.xxxx
endif 
ret 
// Approximately 109 instruction slots used
