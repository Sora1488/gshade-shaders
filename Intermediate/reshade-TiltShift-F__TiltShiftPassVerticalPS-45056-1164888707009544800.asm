//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s2                              sampler      NA          NA             s2      1 
// __srgbV__ReShade__BackBufferTex    texture  float4          2d             t1      1 
// __V__BlueNoise__BlueNoiseTex      texture  float4          2d             t4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.w
dcl_output o0.xyz
dcl_temps 5
mul r0.x, v1.w, v1.w
mad r0.x, r0.x, l(0.025000), l(1.000000)
rcp r0.x, r0.x
add r0.x, -r0.x, l(1.000000)
mul r0.y, r0.x, l(1080.000000)
round_pi r0.y, r0.y
ftou r0.y, r0.y
if_nz r0.y
  and r0.z, r0.y, l(1)
  iadd r0.y, r0.z, r0.y
  utof r0.y, r0.y
  min r0.y, r0.y, l(128.000000)
  ftou r0.y, r0.y
  utof r0.z, r0.y
  ishl r0.y, r0.y, l(1)
  iadd r0.w, r0.y, l(-1)
  utof r0.w, r0.w
  rcp r0.zw, r0.zzzw
  ult r1.x, l(1), r0.y
  mov r2.x, v1.x
  mov r1.yzw, l(0,0,0,0)
  mov r2.z, l(0)
  mov r3.x, l(1)
  mov r2.w, r1.x
  loop 
    breakc_z r2.w
    utof r3.z, r3.x
    mad r3.z, r3.z, r0.z, l(-1.000000)
    dp2 r3.z, r3.zzzz, r3.zzzz
    mul r3.z, r3.z, l(-7.213475)
    exp r3.z, r3.z
    iadd r3.xy, r3.xxxx, l(2, -1, 0, 0)
    utof r3.y, r3.y
    mad r3.y, r3.y, r0.w, l(-0.500000)
    mad r2.y, r0.x, r3.y, v1.y
    sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r2.xyxx, t1.xyzw, s2, l(0.000000)
    mad r1.yzw, r4.xxyz, r3.zzzz, r1.yyzw
    add r2.z, r2.z, r3.z
    ult r2.w, r3.x, r0.y
  endloop 
  div r0.xyz, r1.yzwy, r2.zzzz
else 
  ftou r1.xy, v0.xyxx
  mov r1.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r0.xyz, r1.xyzw, t1.xyzw
endif 
mov_sat r0.xyz, r0.xyzx
ge r1.xyz, l(0.003131, 0.003131, 0.003131, 0.000000), r0.xyzx
mul r2.xyz, r0.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
exp r0.xyz, r0.xyzx
mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
movc r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
ftou r1.xy, v0.xyxx
mul r0.xyz, r0.xyzx, l(255.000000, 255.000000, 255.000000, 0.000000)
and r1.xy, r1.xyxx, l(63, 63, 0, 0)
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t4.xyzw
frc r2.xyz, r0.xyzx
ge r1.xyz, r2.xyzx, r1.xyzx
round_pi r2.xyz, r0.xyzx
round_ni r0.xyz, r0.xyzx
movc r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, l(0.003922, 0.003922, 0.003922, 0.000000)
ret 
// Approximately 66 instruction slots used
