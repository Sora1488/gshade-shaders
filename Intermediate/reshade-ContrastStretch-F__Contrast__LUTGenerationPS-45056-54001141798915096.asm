//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __V__Contrast__PrefixSums         texture  float4          2d             t4      1 
// __V__Contrast__Variances          texture  float4          2d             t8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   x           0   TARGET   float   x   
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.x
dcl_output o0.x
dcl_temps 2
mul r0.x, v1.x, l(1023.000000)
round_ne r0.x, r0.x
ftoi r1.x, r0.x
mov r1.yzw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.y, r1.xyzw, t4.yxzw
ge r0.z, l(341.000000), r0.x
if_nz r0.z
  lt r0.z, l(0.000000), r0.y
  if_nz r0.z
    ld_indexable(texture2d)(float,float,float,float) r0.z, l(341, 0, 0, 0), t4.yzxw
    div r0.z, r0.y, r0.z
    ld_indexable(texture2d)(float,float,float,float) r0.w, l(0, 0, 0, 0), t8.yzwx
    mov_sat r0.w, r0.w
    ge r1.x, l(0.500000), r0.w
    mul r1.y, r0.w, l(0.900000)
    add r0.w, r0.w, l(-0.500000)
    mad r0.w, |r0.w|, l(-0.900000), l(0.450000)
    movc r0.w, r1.x, r1.y, r0.w
    mad r0.z, r0.z, l(0.333000), -v1.x
    mad o0.x, r0.w, r0.z, v1.x
  else 
    mul o0.x, v1.x, l(0.333000)
  endif 
else 
  ge r0.x, l(682.000000), r0.x
  if_nz r0.x
    ld_indexable(texture2d)(float,float,float,float) r0.x, l(341, 0, 0, 0), t4.xyzw
    ld_indexable(texture2d)(float,float,float,float) r0.z, l(682, 0, 0, 0), t4.yzxw
    add r0.z, -r0.x, r0.z
    lt r0.w, r0.z, l(1.000000)
    if_nz r0.w
      mad o0.x, v1.x, l(0.334000), l(0.333000)
    else 
      add r0.x, -r0.x, r0.y
      div r0.x, r0.x, r0.z
      mad r0.x, r0.x, l(0.334000), l(0.333000)
      ld_indexable(texture2d)(float,float,float,float) r0.z, l(1, 0, 0, 0), t8.yzxw
      mov_sat r0.z, r0.z
      ge r0.w, l(0.550000), r0.z
      mul r1.x, r0.z, l(0.818182)
      add r0.z, r0.z, l(-0.550000)
      mad r0.z, |r0.z|, l(-1.000000), l(0.450000)
      movc r0.z, r0.w, r1.x, r0.z
      add r0.x, r0.x, -v1.x
      mad o0.x, r0.z, r0.x, v1.x
    endif 
  else 
    ld_indexable(texture2d)(float,float,float,float) r0.x, l(682, 0, 0, 0), t4.xyzw
    ld_indexable(texture2d)(float,float,float,float) r0.z, l(1023, 0, 0, 0), t4.yzxw
    add r0.z, -r0.x, r0.z
    lt r0.w, r0.z, l(1.000000)
    if_nz r0.w
      mad o0.x, v1.x, l(0.333000), l(0.667000)
    else 
      add r0.x, -r0.x, r0.y
      div r0.x, r0.x, r0.z
      mad r0.x, r0.x, l(0.333000), l(0.667000)
      ld_indexable(texture2d)(float,float,float,float) r0.y, l(2, 0, 0, 0), t8.yxzw
      mov_sat r0.y, r0.y
      ge r0.z, l(0.450000), r0.y
      mul r0.w, r0.y, l(0.666667)
      add r0.y, r0.y, l(-0.450000)
      mad r0.y, |r0.y|, l(-0.545455), l(0.300000)
      movc r0.y, r0.z, r0.w, r0.y
      add r0.x, r0.x, -v1.x
      mad o0.x, r0.y, r0.x, v1.x
    endif 
  endif 
endif 
ret 
// Approximately 70 instruction slots used
