//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool DebugLuma;                    // Offset:    0 Size:     4
//   bool DebugLumaOutput;              // Offset:    4 Size:     4
//   bool DebugLumaOutputHQ;            // Offset:    8 Size:     4
//   bool EnableHighlightsInDarkScenes; // Offset:   12 Size:     4
//   bool DebugHighlights;              // Offset:   16 Size:     4
//   float LumaChangeSpeed;             // Offset:   20 Size:     4 [unused]
//   float LumaHigh;                    // Offset:   24 Size:     4
//   float LumaLow;                     // Offset:   28 Size:     4
//   float AmbientHighlightThreshold;   // Offset:   32 Size:     4
//   float HighlightThreshold;          // Offset:   36 Size:     4
//   float HighlightMaxThreshold;       // Offset:   40 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__LumaInputTex                 texture  float4          2d             t4      1 
// __V__LumaTex                      texture  float4          2d             t6      1 
// __V__texLUTDay                    texture  float4          2d            t10      1 
// __V__texLUTNight                  texture  float4          2d            t12      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.x, l(0.500000, 0.500000, 0.000000, 0.000000), t6.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t4.yxzw, s0
if_nz cb0[0].z
  mov o0.xyz, r0.yyyy
  ret 
else 
  if_nz cb0[0].y
    mov o0.xyz, r0.xxxx
    ret 
  endif 
endif 
if_nz cb0[0].x
  ge r0.zw, l(0.000000, 0.000000, 0.010000, 0.010000), v1.yyyx
  and r0.w, r0.w, r0.z
  if_nz r0.w
    mov o0.xyz, r0.xxxx
    ret 
  endif 
  lt r0.w, l(0.010000), v1.x
  and r0.w, r0.w, r0.z
  ge r1.x, l(0.020000), v1.x
  and r0.w, r0.w, r1.x
  if_nz r0.w
    lt r0.w, cb0[1].z, r0.x
    if_nz r0.w
      mov o0.xyz, l(1.000000,1.000000,1.000000,0)
      ret 
    else 
      mov o0.xyz, l(0,0,0,0)
      ret 
    endif 
  endif 
  lt r0.w, l(0.020000), v1.x
  and r0.w, r0.w, r0.z
  ge r1.x, l(0.030000), v1.x
  and r0.w, r0.w, r1.x
  if_nz r0.w
    ge r0.w, cb0[1].z, r0.x
    ge r1.x, r0.x, cb0[1].w
    and r0.w, r0.w, r1.x
    if_nz r0.w
      mov o0.xyz, l(1.000000,1.000000,1.000000,0)
      ret 
    else 
      mov o0.xyz, l(0,0,0,0)
      ret 
    endif 
  endif 
  lt r0.w, l(0.030000), v1.x
  and r0.z, r0.w, r0.z
  ge r0.w, l(0.040000), v1.x
  and r0.z, r0.w, r0.z
  if_nz r0.z
    lt r0.z, r0.x, cb0[1].w
    if_nz r0.z
      mov o0.xyz, l(1.000000,1.000000,1.000000,0)
      ret 
    else 
      mov o0.xyz, l(0,0,0,0)
      ret 
    endif 
  endif 
endif 
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
mul r0.z, r1.z, l(31.000000)
mad r1.xy, r1.xyxx, l(31.000000, 31.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
mul r2.yz, r1.xxyx, l(0.000000, 0.000977, 0.031250, 0.000000)
frc r0.z, r0.z
mad r0.w, r1.z, l(31.000000), -r0.z
mad r2.x, r0.w, l(0.031250), r2.y
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r2.xzxx, t10.xyzw, s0
add r2.w, r2.x, l(0.031250)
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.wzww, t10.xyzw, s0
add r3.xyz, -r1.xyzx, r3.xyzx
mad r1.xyz, r0.zzzz, r3.xyzx, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xzxx, t12.xyzw, s0
add r2.xy, r2.xzxx, l(0.031250, 0.000000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t12.xyzw, s0
add r2.xyz, -r3.xyzx, r2.xyzx
mad r2.xyz, r0.zzzz, r2.xyzx, r3.xyzx
add r0.z, r0.x, -cb0[1].w
add r0.w, -cb0[1].w, cb0[1].z
div r0.z, r0.z, r0.w
lt r0.w, cb0[1].z, r0.x
lt r1.w, r0.x, cb0[1].w
add r3.xyz, r1.xyzx, -r2.xyzx
mad r3.xyz, r0.zzzz, r3.xyzx, r2.xyzx
movc r2.xyz, r1.wwww, r2.xyzx, r3.xyzx
movc r1.xyz, r0.wwww, r1.xyzx, r2.xyzx
mul r0.z, r1.z, l(31.000000)
mad r2.xy, r1.xyxx, l(31.000000, 31.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
mul r2.yz, r2.xxyx, l(0.000000, 0.000977, 0.031250, 0.000000)
frc r0.z, r0.z
mad r0.w, r1.z, l(31.000000), -r0.z
mad r2.x, r0.w, l(0.031250), r2.y
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xzxx, t10.xyzw, s0
add r2.w, r2.x, l(0.031250)
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.wzww, t10.xyzw, s0
add r2.xyz, -r3.xyzx, r2.xyzx
mad r2.xyz, r0.zzzz, r2.xyzx, r3.xyzx
lt r0.z, r0.x, cb0[2].x
lt r0.w, cb0[2].y, r0.y
and r0.z, r0.w, r0.z
add r0.y, r0.y, -cb0[2].y
add r0.w, -cb0[2].y, cb0[2].z
div_sat r0.y, r0.y, r0.w
add r0.x, -r0.x, cb0[2].x
mul_sat r0.x, r0.x, l(10.000000)
mul r0.x, r0.x, r0.y
add r3.xyz, -r1.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)
mad r3.xyz, r0.xxxx, r3.xyzx, r1.xyzx
ge r0.y, r0.x, l(1.000000)
movc r3.xyz, r0.yyyy, l(1.000000,0,0,0), r3.xyzx
movc r3.xyz, cb0[1].xxxx, r3.xyzx, r1.xyzx
add r2.xyz, r2.xyzx, -r3.xyzx
mad r0.xyw, r0.xxxx, r2.xyxz, r3.xyxz
movc r0.xyz, r0.zzzz, r0.xywx, r1.xyzx
movc o0.xyz, cb0[0].wwww, r0.xyzx, r1.xyzx
ret 
// Approximately 119 instruction slots used
