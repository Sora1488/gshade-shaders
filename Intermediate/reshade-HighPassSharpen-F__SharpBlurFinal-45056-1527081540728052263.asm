//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int HighPassSharpRadius;           // Offset:    0 Size:     4
//   float HighPassSharpOffset;         // Offset:    4 Size:     4
//   int HighPassBlendMode;             // Offset:    8 Size:     4
//   int HighPassBlendIfDark;           // Offset:   12 Size:     4
//   int HighPassBlendIfLight;          // Offset:   16 Size:     4
//   bool HighPassViewBlendIfMask;      // Offset:   20 Size:     4
//   float HighPassSharpStrength;       // Offset:   24 Size:     4
//   float HighPassDarkIntensity;       // Offset:   28 Size:     4
//   float HighPassLightIntensity;      // Offset:   32 Size:     4
//   bool HighPassViewSharpMask;        // Offset:   36 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 0, 0.225806, 0},
                              { 1, 0, 0.150538, 1.384615},
                              { 0, 1, 0.150538, 0},
                              { 1, 1, 0.043011, 1.384615},
                              { 1, -1, 0.043011, 1.384615},
                              { 2, 0, 0, 3.230769},
                              { 0, 2, 0, 0},
                              { 2, 1, 1.384615, 3.230769},
                              { 2, -1, 1.384615, 3.230769},
                              { 1, 2, -1.384615, 1.384615},
                              { 1, -2, 0, 1.384615},
                              { 2, 2, 3.230769, 3.230769},
                              { 2, -2, 1.384615, 3.230769},
                              { 3, 0, -1.384615, 0},
                              { 0, 3, 3.230769, 0},
                              { 3, 1, -3.230769, 0},
                              { 3, -1, 3.230769, 0},
                              { 1, 3, -3.230769, 0},
                              { -1, 3, 0, 0},
                              { 3, 2, 0, 0},
                              { 3, -2, 0, 0},
                              { 2, 3, 0, 0},
                              { 2, -3, 0, 0},
                              { 3, 3, 0, 0},
                              { 3, -3, 0, 0} }
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 7
dcl_indexableTemp x0[13], 4
dcl_indexableTemp x1[13], 4
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
dp3 r1.x, r0.xyzx, l(0.327869, 0.655738, 0.016393, 0.000000)
ieq r2.xyz, cb0[0].xxxx, l(1, 2, 3, 0)
if_nz r2.x
  mul r3.xyz, r0.xyzx, l(0.225806, 0.225806, 0.225806, 0.000000)
  mov r4.xyz, r3.xyzx
  mov r0.w, l(1)
  loop 
    ige r1.w, r0.w, l(5)
    breakc_nz r1.w
    itof r1.w, icb[r0.w + 0].x
    mul r5.x, r1.w, cb0[0].y
    itof r1.w, icb[r0.w + 0].y
    mul r5.y, r1.w, cb0[0].y
    mad r2.xw, r5.xxxy, l(0.000521, 0.000000, 0.000000, 0.000926), v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r2.xwxx, t0.xyzw, s0, l(0.000000)
    mad r6.xyz, r6.xyzx, icb[r0.w + 0].zzzz, r4.xyzx
    mad r2.xw, -r5.xxxy, l(0.000521, 0.000000, 0.000000, 0.000926), v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r2.xwxx, t0.xyzw, s0, l(0.000000)
    mad r4.xyz, r5.xyzx, icb[r0.w + 0].zzzz, r6.xyzx
    iadd r0.w, r0.w, l(1)
  endloop 
else 
  mov r4.xyz, r0.xyzx
endif 
if_nz r2.y
  mov x0[0].x, l(0.150999)
  mov x0[1].x, l(0.113249)
  mov x0[2].x, l(0.113249)
  mov x0[3].x, l(0.027399)
  mov x0[4].x, l(0.027399)
  mov x0[5].x, l(0.045300)
  mov x0[6].x, l(0.045300)
  mov x0[7].x, l(0.010960)
  mov x0[8].x, l(0.010960)
  mov x0[9].x, l(0.010960)
  mov x0[10].x, l(0.010960)
  mov x0[11].x, l(0.004384)
  mov x0[12].x, l(0.004384)
  mul r2.xyw, r4.xyxz, l(0.150999, 0.150999, 0.000000, 0.150999)
  mov r4.xyz, r2.xywx
  mov r0.w, l(1)
  loop 
    ige r1.w, r0.w, l(13)
    breakc_nz r1.w
    itof r1.w, icb[r0.w + 0].x
    mul r3.x, r1.w, cb0[0].y
    itof r1.w, icb[r0.w + 0].y
    mul r3.y, r1.w, cb0[0].y
    mad r3.zw, r3.xxxy, l(0.000000, 0.000000, 0.000521, 0.000926), v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r3.zwzz, t0.xyzw, s0, l(0.000000)
    mov r1.w, x0[r0.w + 0].x
    mad r5.xyz, r5.xyzx, r1.wwww, r4.xyzx
    mad r3.xy, -r3.xyxx, l(0.000521, 0.000926, 0.000000, 0.000000), v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t0.xyzw, s0, l(0.000000)
    mad r4.xyz, r3.xyzx, r1.wwww, r5.xyzx
    iadd r0.w, r0.w, l(1)
  endloop 
endif 
if_nz r2.z
  mov x1[0].x, l(0.095773)
  mov x1[1].x, l(0.133399)
  mov x1[2].x, l(0.133399)
  mov x1[3].x, l(0.042183)
  mov x1[4].x, l(0.042183)
  mov x1[5].x, l(0.029644)
  mov x1[6].x, l(0.029644)
  mov x1[7].x, l(0.009374)
  mov x1[8].x, l(0.009374)
  mov x1[9].x, l(0.009374)
  mov x1[10].x, l(0.009374)
  mov x1[11].x, l(0.002083)
  mov x1[12].x, l(0.002083)
  mul r2.xyz, r4.xyzx, l(0.095773, 0.095773, 0.095773, 0.000000)
  mov r4.xyz, r2.xyzx
  mov r0.w, l(1)
  loop 
    ige r1.w, r0.w, l(13)
    breakc_nz r1.w
    mul r3.x, cb0[0].y, icb[r0.w + 0].w
    mul r3.y, cb0[0].y, icb[r0.w + 5].z
    mad r3.zw, r3.xxxy, l(0.000000, 0.000000, 0.000521, 0.000926), v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r3.zwzz, t0.xyzw, s0, l(0.000000)
    mov r1.w, x1[r0.w + 0].x
    mad r5.xyz, r5.xyzx, r1.wwww, r4.xyzx
    mad r3.xy, -r3.xyxx, l(0.000521, 0.000926, 0.000000, 0.000000), v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t0.xyzw, s0, l(0.000000)
    mad r4.xyz, r3.xyzx, r1.wwww, r5.xyzx
    iadd r0.w, r0.w, l(1)
  endloop 
endif 
dp3 r0.w, r4.xyzx, l(0.327869, 0.655738, 0.016393, 0.000000)
add r0.w, -r0.w, r1.x
add r0.w, r0.w, l(1.000000)
mul r1.w, r0.w, l(0.500000)
mov_sat r2.x, r1.w
mad r2.y, r2.x, l(-2.000000), l(3.000000)
mul r2.x, r2.x, r2.x
mad r2.x, r2.y, r2.x, -r1.w
mad r2.y, cb0[1].w, r2.x, r1.w
mad r1.w, cb0[2].x, r2.x, r1.w
ge r0.w, r0.w, l(1.000000)
and r0.w, r0.w, l(0x3f800000)
add r1.w, -r2.y, r1.w
mad r1.z, r0.w, r1.w, r2.y
if_nz cb0[2].y
  mov r0.xyz, r1.zzzz
  mov r2.xyz, l(1.000000,1.000000,1.000000,0)
  mov r1.x, r1.z
else 
  div r2.xyz, r0.xyzx, r1.xxxx
  add r0.w, r1.x, r1.x
  mul r1.w, r1.x, r1.x
  mad r2.w, -r1.z, l(2.000000), l(1.000000)
  mul r1.w, r1.w, r2.w
  mad r1.w, r0.w, r1.z, r1.w
  add r2.w, -r1.z, l(1.000000)
  rsq r3.x, r1.x
  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
  mad r3.y, r1.z, l(2.000000), l(-1.000000)
  mul r3.x, r3.y, r3.x
  mad r2.w, r0.w, r2.w, r3.x
  ge r3.x, r1.z, l(0.490000)
  and r3.x, r3.x, l(0x3f800000)
  add r2.w, -r1.w, r2.w
  mad r1.w, r3.x, r2.w, r1.w
  movc r1.w, cb0[0].z, r1.z, r1.w
  ieq r3.xyzw, cb0[0].zzzz, l(1, 2, 3, 4)
  mul r2.w, r0.w, r1.w
  add r4.xy, -r1.xwxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  add r4.x, r4.x, r4.x
  mad r4.y, -r4.x, r4.y, l(1.000000)
  ge r4.z, r1.x, l(0.500000)
  and r4.z, r4.z, l(0x3f800000)
  mad r4.y, -r0.w, r1.w, r4.y
  mad r2.w, r4.z, r4.y, r2.w
  movc r1.w, r3.x, r2.w, r1.w
  mul r2.w, r0.w, r1.w
  add r3.x, -r1.w, l(1.000000)
  mad r3.x, -r4.x, r3.x, l(1.000000)
  ge r4.y, r1.w, l(0.500000)
  and r4.y, r4.y, l(0x3f800000)
  mad r3.x, -r0.w, r1.w, r3.x
  mad r2.w, r4.y, r3.x, r2.w
  movc r1.w, r3.y, r2.w, r1.w
  mul_sat r2.w, r0.w, r1.w
  movc r1.w, r3.z, r2.w, r1.w
  mul r2.w, r0.w, r1.w
  add r3.x, -r1.w, l(1.000000)
  add r3.x, r3.x, r3.x
  div r3.x, r1.x, r3.x
  ge r3.y, r1.w, l(0.500000)
  and r3.y, r3.y, l(0x3f800000)
  mad r0.w, -r0.w, r1.w, r3.x
  mad r0.w, r3.y, r0.w, r2.w
  movc r0.w, r3.w, r0.w, r1.w
  ieq r3.xyz, cb0[0].zzzz, l(5, 6, 7, 0)
  mad r1.w, r0.w, l(2.000000), r1.x
  add r1.w, r1.w, l(-1.000000)
  movc r0.w, r3.x, r1.w, r0.w
  add r1.w, -r0.w, l(1.000000)
  mad r1.w, -r4.x, r1.w, l(1.000000)
  movc r0.w, r3.y, r1.w, r0.w
  add r1.w, r1.x, r0.w
  add_sat r1.w, r1.w, l(-0.500000)
  movc r1.z, r3.z, r1.w, r0.w
endif 
ilt r0.w, l(0), cb0[0].w
ilt r1.w, cb0[1].x, l(255)
or r2.w, r0.w, r1.w
ine r3.x, cb0[1].y, l(0)
or r2.w, r2.w, r3.x
itof r3.x, cb0[0].w
mad r3.x, r3.x, l(0.003922), l(0.000100)
itof r3.y, cb0[1].x
mad r3.y, r3.y, l(0.003922), l(-0.000100)
dp3 r0.x, r0.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
mul r0.y, r3.x, l(0.400000)
mad r0.z, -r3.x, l(0.800000), r0.x
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mul_sat r0.y, r0.y, r0.z
mad r0.z, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.z
movc r0.y, r0.w, r0.y, l(1.000000)
mul r0.z, r3.y, l(0.400000)
mad r0.x, -r3.y, l(0.800000), r0.x
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mul_sat r0.x, r0.z, r0.x
mad r0.z, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.z
mad r0.x, r0.x, -r0.y, r0.y
movc r0.x, r1.w, r0.x, r0.y
add r0.y, -r1.x, r1.z
mad r1.y, r0.x, r0.y, r1.x
movc r0.yzw, cb0[1].yyyy, l(0,1.000000,1.000000,1.000000), r2.xxyz
movc r1.yw, cb0[1].yyyy, r0.xxxx, r1.xxxy
movc r0.xyz, r2.wwww, r0.yzwy, r2.xyzx
movc r1.xy, r2.wwww, r1.ywyy, r1.xzxx
add r0.w, -r1.x, r1.y
mad r0.w, cb0[1].z, r0.w, r1.x
mul_sat o0.xyz, r0.xyzx, r0.wwww
ret 
// Approximately 204 instruction slots used
