//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float A;                           // Offset:    0 Size:     4
//   float Zoom;                        // Offset:    4 Size:     4
//   bool FitScreen;                    // Offset:    8 Size:     4
//   bool UseBackground;                // Offset:   12 Size:     4
//   float4 Color;                      // Offset:   16 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__AspectBgTex                  texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 4
add r0.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
ne r0.z, cb0[0].y, l(1.000000)
max r0.w, cb0[0].y, l(1.000000)
min r0.w, r0.w, l(1.500000)
div r1.xy, r0.xyxx, r0.wwww
movc r0.yw, r0.zzzz, r1.xxxy, r0.xxxy
lt r1.x, cb0[0].x, l(0.000000)
add r1.y, |cb0[0].x|, l(1.000000)
mul r0.z, r0.y, r1.y
div r2.yz, r0.zzwz, r1.yyyy
lt r0.x, l(0.500000), |r0.z|
mov r2.x, l(0)
movc r2.xyz, cb0[0].zzzz, r2.xyzx, r0.xzwx
lt r1.z, l(0.000000), cb0[0].x
add r1.w, cb0[0].x, l(1.000000)
mul r0.z, r0.w, r1.w
div r3.yz, r0.yyzy, r1.yyyy
lt r0.x, l(0.500000), |r0.z|
mov r3.x, l(0)
movc r3.xyz, cb0[0].zzzz, r3.xyzx, r0.xyzx
mov r0.x, l(0)
movc r0.xyz, r1.zzzz, r3.xyzx, r0.xywx
movc r0.xyz, r1.xxxx, r2.xyzx, r0.xyzx
add r0.yz, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
ieq r0.w, cb0[0].z, l(0)
ine r1.x, cb0[0].w, l(0)
and r0.w, r0.w, r1.x
if_nz r0.w
  if_nz r0.x
    sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t4.xyzw, s0
    add r2.xyz, -r1.xyzx, cb0[1].xyzx
    mad o0.xyz, cb0[1].wwww, r2.xyzx, r1.xyzx
    ret 
  else 
    sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.yzyy, t0.xyzw, s0
    mov o0.xyz, r1.xyzx
    ret 
  endif 
else 
  if_nz r0.x
    mov o0.xyz, cb0[1].xyzx
    ret 
  else 
    sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.yzyy, t0.xyzw, s0
    mov o0.xyz, r0.xyzx
    ret 
  endif 
endif 
ret 
// Approximately 49 instruction slots used
