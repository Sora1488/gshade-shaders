//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int cLayer_SelectGame;             // Offset:    0 Size:     4 [unused]
//   int cLayer_Select;                 // Offset:    4 Size:     4 [unused]
//   float cLayer_Scale;                // Offset:    8 Size:     4 [unused]
//   float cLayer_ScaleX;               // Offset:   12 Size:     4 [unused]
//   float cLayer_ScaleY;               // Offset:   16 Size:     4 [unused]
//   bool cLayer_Mouse;                 // Offset:   20 Size:     4 [unused]
//   float cLayer_PosX;                 // Offset:   24 Size:     4 [unused]
//   float cLayer_PosY;                 // Offset:   28 Size:     4 [unused]
//   int cLayer_SnapRotate;             // Offset:   32 Size:     4 [unused]
//   float cLayer_Rotate;               // Offset:   36 Size:     4 [unused]
//   bool cLayer_Color_Invert;          // Offset:   40 Size:     4 [unused]
//   int cLayer_Color_Override;         // Offset:   44 Size:     4 [unused]
//   int cLayer_BlendMode;              // Offset:   48 Size:     4 [unused]
//   float cLayer_Blend;                // Offset:   52 Size:     4 [unused]
//   float Gauss_Blend;                 // Offset:   56 Size:     4 [unused]
//   float cLayer_PosX_Gauss;           // Offset:   60 Size:     4 [unused]
//   float cLayer_PosY_Gauss;           // Offset:   64 Size:     4 [unused]
//   float cLayer_Scale_Gauss;          // Offset:   68 Size:     4 [unused]
//   int GaussianBlurRadius;            // Offset:   72 Size:     4
//   float GaussWeight;                 // Offset:   76 Size:     4
//   float GaussWeightH;                // Offset:   80 Size:     4
//   float GaussWeightV;                // Offset:   84 Size:     4 [unused]
//   float3 GaussColor;                 // Offset:   96 Size:    12
//   int cLayer_BlendMode_Gauss;        // Offset:  108 Size:     4 [unused]
//   int cLayer_BlendMode_BG;           // Offset:  112 Size:     4 [unused]
//   float cLayer_Blend_BG;             // Offset:  116 Size:     4 [unused]
//   float4 cLayer_CAb_Color_A;         // Offset:  128 Size:    16 [unused]
//   float4 cLayer_CAb_Color_B;         // Offset:  144 Size:    16 [unused]
//   float2 cLayer_CAb_Shift;           // Offset:  160 Size:     8 [unused]
//   float cLayer_CAb_Strength;         // Offset:  168 Size:     4 [unused]
//   float cLayer_CAb_Blur;             // Offset:  172 Size:     4 [unused]
//   int cLayer_BlendMode_CAb;          // Offset:  176 Size:     4 [unused]
//   float cLayer_Depth;                // Offset:  180 Size:     4 [unused]
//   float2 MouseCoords;                // Offset:  184 Size:     8 [unused]
//   bool LeftMouseDown;                // Offset:  192 Size:     4 [unused]
//   bool RightMouseDown;               // Offset:  196 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__Copyright_Texture_Gauss_Out    texture  float4          2d            t10      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 0.132980, 0, 0.066490},
                              { 1.458430, 0.232276, 1.489585, 0.128470},
                              { 3.403985, 0.135326, 3.475714, 0.111918},
                              { 5.351806, 0.051156, 5.461880, 0.087313},
                              { 7.302941, 0.012539, 7.448104, 0.061001},
                              { 9.258160, 0.001991, 9.434408, 0.038166},
                              { 0, 0.150000, 11.420812, 0.021384},
                              { 0.250000, 0.250000, 13.407333, 0.010729},
                              { 0.500000, 0.135000, 15.393993, 0.004821},
                              { 0.750000, 0.055000, 17.380812, 0.001940},
                              { 1.000000, 0.013500, 19.367800, 0.000699},
                              { 1.250000, 0.001500, 0, 0.398940},
                              { 0, 0, 1.182425, 0.295960},
                              { 0, 0, 3.029312, 0.004566},
                              { 0, 0, 5.004070, 0.000001} }
dcl_constantbuffer CB0[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t10.wxyz, s0
switch cb0[4].z
  case l(1)
  mul r0.z, r0.x, l(0.132980)
  add r0.w, cb0[5].x, l(0.500000)
  mul r0.w, r0.w, cb0[4].w
  mov r1.y, l(0)
  mov r0.y, r0.z
  mov r1.z, l(1)
  loop 
    ige r1.w, r1.z, l(6)
    breakc_nz r1.w
    mul r1.w, r0.w, icb[r1.z + 0].x
    mul r1.x, r1.w, l(0.000521)
    add r2.xy, r1.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t10.xyzw, s0, l(0.000000)
    mad r1.w, r1.w, icb[r1.z + 0].y, r0.y
    add r2.xy, -r1.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t10.wxyz, s0, l(0.000000)
    mad r0.y, r1.x, icb[r1.z + 0].y, r1.w
    iadd r1.z, r1.z, l(1)
  endloop 
  break 
  case l(2)
  mul r0.z, r0.x, l(0.066490)
  add r0.w, cb0[5].x, l(0.500000)
  mul r0.w, r0.w, cb0[4].w
  mov r1.y, l(0)
  mov r0.y, r0.z
  mov r1.z, l(1)
  loop 
    ige r1.w, r1.z, l(11)
    breakc_nz r1.w
    mul r1.w, r0.w, icb[r1.z + 0].z
    mul r1.x, r1.w, l(0.000521)
    add r2.xy, r1.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t10.xyzw, s0, l(0.000000)
    mad r1.w, r1.w, icb[r1.z + 0].w, r0.y
    add r2.xy, -r1.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t10.wxyz, s0, l(0.000000)
    mad r0.y, r1.x, icb[r1.z + 0].w, r1.w
    iadd r1.z, r1.z, l(1)
  endloop 
  break 
  case l(3)
  mul r0.z, r0.x, l(0.150000)
  add r0.w, cb0[5].x, l(0.500000)
  mul r0.w, r0.w, cb0[4].w
  mov r1.y, l(0)
  mov r0.y, r0.z
  mov r1.z, l(1)
  loop 
    ige r1.w, r1.z, l(6)
    breakc_nz r1.w
    mul r1.w, r0.w, icb[r1.z + 6].x
    mul r1.x, r1.w, l(0.000521)
    add r2.xy, r1.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t10.xyzw, s0, l(0.000000)
    mad r1.w, r1.w, icb[r1.z + 6].y, r0.y
    add r2.xy, -r1.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t10.wxyz, s0, l(0.000000)
    mad r0.y, r1.x, icb[r1.z + 6].y, r1.w
    iadd r1.z, r1.z, l(1)
  endloop 
  break 
  default 
  mul r0.x, r0.x, l(0.398940)
  add r0.z, cb0[5].x, l(0.500000)
  mul r0.z, r0.z, cb0[4].w
  mov r1.y, l(0)
  mov r0.y, r0.x
  mov r0.w, l(1)
  loop 
    ige r1.z, r0.w, l(4)
    breakc_nz r1.z
    mul r1.z, r0.z, icb[r0.w + 11].z
    mul r1.x, r1.z, l(0.000521)
    add r1.zw, r1.xxxy, v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r1.zwzz, t10.xywz, s0, l(0.000000)
    mad r1.z, r1.z, icb[r0.w + 11].w, r0.y
    add r1.xw, -r1.xxxy, v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.xwxx, t10.wxyz, s0, l(0.000000)
    mad r0.y, r1.x, icb[r0.w + 11].w, r1.z
    iadd r0.w, r0.w, l(1)
  endloop 
  break 
endswitch 
mov o0.w, r0.y
mov o0.xyz, cb0[6].xyzx
ret 
// Approximately 90 instruction slots used
