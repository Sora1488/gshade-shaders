//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int CFG_LAYERCAKE_BLEND_Layer1;    // Offset:    0 Size:     4 [unused]
//   bool CFG_LAYERCAKE_DEPTHENABLE_Layer1;// Offset:    4 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_DEPTH_Layer1; // Offset:    8 Size:     8 [unused]
//   float CFG_LAYERCAKE_OPACITY_Layer1;// Offset:   16 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKENABLE_Layer1;// Offset:   20 Size:     4 [unused]
//   float3 CFG_LAYERCAKE_MASKCOLOR_Layer1;// Offset:   32 Size:    12 [unused]
//   float CFG_LAYERCAKE_MASKBLEND_Layer1;// Offset:   44 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKINVERT_Layer1;// Offset:   48 Size:     4 [unused]
//   bool CFG_LAYERCAKE_ALPHABLEND_Layer1;// Offset:   52 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_ALPHABLEND_DEPTH_Layer1;// Offset:   56 Size:     8 [unused]
//   int CFG_LAYERCAKE_BLEND_Layer2;    // Offset:   64 Size:     4 [unused]
//   bool CFG_LAYERCAKE_DEPTHENABLE_Layer2;// Offset:   68 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_DEPTH_Layer2; // Offset:   72 Size:     8 [unused]
//   float CFG_LAYERCAKE_OPACITY_Layer2;// Offset:   80 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKENABLE_Layer2;// Offset:   84 Size:     4 [unused]
//   float3 CFG_LAYERCAKE_MASKCOLOR_Layer2;// Offset:   96 Size:    12 [unused]
//   float CFG_LAYERCAKE_MASKBLEND_Layer2;// Offset:  108 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKINVERT_Layer2;// Offset:  112 Size:     4 [unused]
//   bool CFG_LAYERCAKE_ALPHABLEND_Layer2;// Offset:  116 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_ALPHABLEND_DEPTH_Layer2;// Offset:  120 Size:     8 [unused]
//   int CFG_LAYERCAKE_BLEND_Layer3;    // Offset:  128 Size:     4 [unused]
//   bool CFG_LAYERCAKE_DEPTHENABLE_Layer3;// Offset:  132 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_DEPTH_Layer3; // Offset:  136 Size:     8 [unused]
//   float CFG_LAYERCAKE_OPACITY_Layer3;// Offset:  144 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKENABLE_Layer3;// Offset:  148 Size:     4 [unused]
//   float3 CFG_LAYERCAKE_MASKCOLOR_Layer3;// Offset:  160 Size:    12 [unused]
//   float CFG_LAYERCAKE_MASKBLEND_Layer3;// Offset:  172 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKINVERT_Layer3;// Offset:  176 Size:     4 [unused]
//   bool CFG_LAYERCAKE_ALPHABLEND_Layer3;// Offset:  180 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_ALPHABLEND_DEPTH_Layer3;// Offset:  184 Size:     8 [unused]
//   int CFG_LAYERCAKE_BLEND_Layer4;    // Offset:  192 Size:     4 [unused]
//   bool CFG_LAYERCAKE_DEPTHENABLE_Layer4;// Offset:  196 Size:     4
//   float2 CFG_LAYERCAKE_DEPTH_Layer4; // Offset:  200 Size:     8
//   float CFG_LAYERCAKE_OPACITY_Layer4;// Offset:  208 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKENABLE_Layer4;// Offset:  212 Size:     4
//   float3 CFG_LAYERCAKE_MASKCOLOR_Layer4;// Offset:  224 Size:    12
//   float CFG_LAYERCAKE_MASKBLEND_Layer4;// Offset:  236 Size:     4
//   bool CFG_LAYERCAKE_MASKINVERT_Layer4;// Offset:  240 Size:     4
//   bool CFG_LAYERCAKE_ALPHABLEND_Layer4;// Offset:  244 Size:     4
//   float2 CFG_LAYERCAKE_ALPHABLEND_DEPTH_Layer4;// Offset:  248 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[16], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
ine r0.x, cb0[12].y, l(0)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r0.y, r0.y, r0.z
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
if_nz cb0[13].y
  lt r2.xyzw, l(0.040450, 0.040450, 0.040450, 0.040450), r1.yzxy
  add r3.xyzw, r1.yzxy, l(0.550000, 0.550000, 0.550000, 0.550000)
  mul r3.xyzw, r3.xyzw, l(0.947867, 0.947867, 0.947867, 0.947867)
  log r3.xyzw, |r3.xyzw|
  mul r3.xyzw, r3.xyzw, l(2.400000, 2.400000, 2.400000, 2.400000)
  exp r3.xyzw, r3.xyzw
  mul r4.xyzw, r1.yzxy, l(0.077399, 0.077399, 0.077399, 0.077399)
  movc r2.xyzw, r2.xyzw, r3.xyzw, r4.xyzw
  mul r0.zw, r2.zzzw, l(0.000000, 0.000000, 0.412400, 0.357600)
  add r0.z, r0.w, r0.z
  mad r0.z, r2.y, l(0.180500), r0.z
  mul r3.xy, r0.zzzz, l(1.052111, 1.059412, 0.000000, 0.000000)
  mul r4.xyz, r2.xzwx, l(0.715200, 0.019300, 0.119200, 0.000000)
  mad r0.w, r2.z, l(0.212600), r4.x
  mad r0.w, r2.y, l(0.072200), r0.w
  add r1.w, r4.z, r4.y
  mad r1.w, r2.y, l(0.950500), r1.w
  mul r2.xy, r1.wwww, l(0.918417, 0.924791, 0.000000, 0.000000)
  lt r0.z, l(0.008417), r0.z
  log r2.z, |r3.x|
  mul r2.z, r2.z, l(0.333333)
  exp r2.z, r2.z
  movc r0.z, r0.z, r2.z, r3.y
  lt r2.z, l(0.008856), r0.w
  log r2.w, |r0.w|
  mul r2.w, r2.w, l(0.333333)
  exp r2.w, r2.w
  mul r0.w, r0.w, l(1.006940)
  movc r0.w, r2.z, r2.w, r0.w
  lt r1.w, l(0.009643), r1.w
  log r2.x, |r2.x|
  mul r2.x, r2.x, l(0.333333)
  exp r2.x, r2.x
  movc r1.w, r1.w, r2.x, r2.y
  mad r2.x, r0.w, l(116.000000), l(-16.000000)
  add r0.z, -r0.w, r0.z
  mul r2.y, r0.z, l(500.000000)
  add r0.z, r0.w, -r1.w
  mul r2.z, r0.z, l(200.000000)
  lt r3.xyzw, l(0.040450, 0.040450, 0.040450, 0.040450), cb0[14].yzxy
  add r4.xyzw, cb0[14].yzxy, l(0.550000, 0.550000, 0.550000, 0.550000)
  mul r4.xyzw, r4.xyzw, l(0.947867, 0.947867, 0.947867, 0.947867)
  log r4.xyzw, |r4.xyzw|
  mul r4.xyzw, r4.xyzw, l(2.400000, 2.400000, 2.400000, 2.400000)
  exp r4.xyzw, r4.xyzw
  mul r5.xyzw, cb0[14].yzxy, l(0.077399, 0.077399, 0.077399, 0.077399)
  movc r3.xyzw, r3.xyzw, r4.xyzw, r5.xyzw
  mul r0.zw, r3.zzzw, l(0.000000, 0.000000, 0.412400, 0.357600)
  add r0.z, r0.w, r0.z
  mad r0.z, r3.y, l(0.180500), r0.z
  mul r4.xy, r0.zzzz, l(1.052111, 1.059412, 0.000000, 0.000000)
  mul r5.xyz, r3.xzwx, l(0.715200, 0.019300, 0.119200, 0.000000)
  mad r0.w, r3.z, l(0.212600), r5.x
  mad r0.w, r3.y, l(0.072200), r0.w
  add r1.w, r5.z, r5.y
  mad r1.w, r3.y, l(0.950500), r1.w
  mul r3.xy, r1.wwww, l(0.918417, 0.924791, 0.000000, 0.000000)
  lt r0.z, l(0.008417), r0.z
  log r2.w, |r4.x|
  mul r2.w, r2.w, l(0.333333)
  exp r2.w, r2.w
  movc r0.z, r0.z, r2.w, r4.y
  lt r2.w, l(0.008856), r0.w
  log r3.z, |r0.w|
  mul r3.z, r3.z, l(0.333333)
  exp r3.z, r3.z
  mul r0.w, r0.w, l(1.006940)
  movc r0.w, r2.w, r3.z, r0.w
  lt r1.w, l(0.009643), r1.w
  log r2.w, |r3.x|
  mul r2.w, r2.w, l(0.333333)
  exp r2.w, r2.w
  movc r1.w, r1.w, r2.w, r3.y
  mad r3.x, r0.w, l(116.000000), l(-16.000000)
  add r0.z, -r0.w, r0.z
  mul r3.y, r0.z, l(500.000000)
  add r0.z, r0.w, -r1.w
  mul r3.z, r0.z, l(200.000000)
  add r4.xyz, r2.xyzx, -r3.xyzx
  mul r0.zw, r2.yyyz, r2.yyyz
  mul r0.z, r0.z, r0.w
  mul r2.xy, r3.yzyy, r3.yzyy
  mul r0.w, r2.x, r2.y
  sqrt r0.zw, r0.zzzw
  add r0.w, -r0.w, r0.z
  dp2 r1.w, r4.yzyy, r4.yzyy
  mad r1.w, -r0.w, r0.w, r1.w
  lt r2.x, r1.w, l(0.000000)
  sqrt r1.w, r1.w
  movc r1.w, r2.x, l(0), r1.w
  mad r2.xy, r0.zzzz, l(0.045000, 0.015000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
  div r0.z, r0.w, r2.x
  div r0.w, r1.w, r2.y
  mul r0.z, r0.z, r0.z
  mad r0.z, r4.x, r4.x, r0.z
  mad r0.z, r0.w, r0.w, r0.z
  sqrt r0.z, r0.z
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[14].w
  mul_sat r0.z, r0.w, r0.z
  mad r0.w, r0.z, l(-2.000000), l(3.000000)
  mul r0.z, r0.z, r0.z
  mul r0.z, r0.z, r0.w
else 
  mov r0.z, l(1.000000)
endif 
ge r0.w, r0.z, l(1.000000)
and r0.w, r0.w, l(0x3f800000)
movc r0.z, cb0[15].y, r0.z, r0.w
movc r0.w, cb0[15].x, l(-1.000000), l(1.000000)
mul r0.z, r0.w, r0.z
movc r0.z, cb0[13].y, r0.z, l(1.000000)
add r0.w, -cb0[12].z, cb0[12].w
add r1.w, r0.y, -cb0[12].z
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul_sat r0.w, r0.w, r1.w
mad r1.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r2.x, r0.w, r1.w
lt r2.y, cb0[15].w, r2.x
add r2.z, -cb0[15].w, l(1.000000)
mad r0.w, r1.w, r0.w, -cb0[15].w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
mul_sat r0.w, r0.w, r1.w
mad r1.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mad r0.w, -r1.w, r0.w, l(1.000000)
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[15].z
mul_sat r1.w, r1.w, r2.x
mad r2.x, r1.w, l(-2.000000), l(3.000000)
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.x
movc r0.w, r2.y, r0.w, r1.w
movc r0.w, cb0[15].y, r0.w, l(1.000000)
mul r0.z, r0.w, r0.z
lt r0.w, r0.y, cb0[12].z
lt r0.y, cb0[12].w, r0.y
or r0.y, r0.y, r0.w
and r0.x, r0.y, r0.x
movc o0.w, r0.x, l(0), r0.z
mov o0.xyz, r1.xyzx
ret 
// Approximately 147 instruction slots used
