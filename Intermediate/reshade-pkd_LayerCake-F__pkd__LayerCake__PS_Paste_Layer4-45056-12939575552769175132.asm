//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int CFG_LAYERCAKE_BLEND_Layer1;    // Offset:    0 Size:     4 [unused]
//   bool CFG_LAYERCAKE_DEPTHENABLE_Layer1;// Offset:    4 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_DEPTH_Layer1; // Offset:    8 Size:     8 [unused]
//   float CFG_LAYERCAKE_OPACITY_Layer1;// Offset:   16 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKENABLE_Layer1;// Offset:   20 Size:     4 [unused]
//   float3 CFG_LAYERCAKE_MASKCOLOR_Layer1;// Offset:   32 Size:    12 [unused]
//   float CFG_LAYERCAKE_MASKBLEND_Layer1;// Offset:   44 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKINVERT_Layer1;// Offset:   48 Size:     4 [unused]
//   bool CFG_LAYERCAKE_ALPHABLEND_Layer1;// Offset:   52 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_ALPHABLEND_DEPTH_Layer1;// Offset:   56 Size:     8 [unused]
//   int CFG_LAYERCAKE_BLEND_Layer2;    // Offset:   64 Size:     4 [unused]
//   bool CFG_LAYERCAKE_DEPTHENABLE_Layer2;// Offset:   68 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_DEPTH_Layer2; // Offset:   72 Size:     8 [unused]
//   float CFG_LAYERCAKE_OPACITY_Layer2;// Offset:   80 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKENABLE_Layer2;// Offset:   84 Size:     4 [unused]
//   float3 CFG_LAYERCAKE_MASKCOLOR_Layer2;// Offset:   96 Size:    12 [unused]
//   float CFG_LAYERCAKE_MASKBLEND_Layer2;// Offset:  108 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKINVERT_Layer2;// Offset:  112 Size:     4 [unused]
//   bool CFG_LAYERCAKE_ALPHABLEND_Layer2;// Offset:  116 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_ALPHABLEND_DEPTH_Layer2;// Offset:  120 Size:     8 [unused]
//   int CFG_LAYERCAKE_BLEND_Layer3;    // Offset:  128 Size:     4 [unused]
//   bool CFG_LAYERCAKE_DEPTHENABLE_Layer3;// Offset:  132 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_DEPTH_Layer3; // Offset:  136 Size:     8 [unused]
//   float CFG_LAYERCAKE_OPACITY_Layer3;// Offset:  144 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKENABLE_Layer3;// Offset:  148 Size:     4 [unused]
//   float3 CFG_LAYERCAKE_MASKCOLOR_Layer3;// Offset:  160 Size:    12 [unused]
//   float CFG_LAYERCAKE_MASKBLEND_Layer3;// Offset:  172 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKINVERT_Layer3;// Offset:  176 Size:     4 [unused]
//   bool CFG_LAYERCAKE_ALPHABLEND_Layer3;// Offset:  180 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_ALPHABLEND_DEPTH_Layer3;// Offset:  184 Size:     8 [unused]
//   int CFG_LAYERCAKE_BLEND_Layer4;    // Offset:  192 Size:     4
//   bool CFG_LAYERCAKE_DEPTHENABLE_Layer4;// Offset:  196 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_DEPTH_Layer4; // Offset:  200 Size:     8 [unused]
//   float CFG_LAYERCAKE_OPACITY_Layer4;// Offset:  208 Size:     4
//   bool CFG_LAYERCAKE_MASKENABLE_Layer4;// Offset:  212 Size:     4 [unused]
//   float3 CFG_LAYERCAKE_MASKCOLOR_Layer4;// Offset:  224 Size:    12 [unused]
//   float CFG_LAYERCAKE_MASKBLEND_Layer4;// Offset:  236 Size:     4 [unused]
//   bool CFG_LAYERCAKE_MASKINVERT_Layer4;// Offset:  240 Size:     4 [unused]
//   bool CFG_LAYERCAKE_ALPHABLEND_Layer4;// Offset:  244 Size:     4 [unused]
//   float2 CFG_LAYERCAKE_ALPHABLEND_DEPTH_Layer4;// Offset:  248 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__pkd__LayerCake__Tex_Layer4    texture  float4          2d            t10      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t10.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
ne r1.w, r0.w, l(0.000000)
if_nz r1.w
  switch cb0[12].x
    case l(0)
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, r0.xyzx, -r1.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(1)
    min r2.xyz, r0.xyzx, r1.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(2)
    mul r1.w, r0.w, cb0[13].x
    mad r2.xyz, r1.xyzx, r0.xyzx, -r1.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(3)
    lt r2.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
    and r1.w, r2.y, r2.x
    and r1.w, r2.z, r1.w
    add r2.xyz, -r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    div r2.xyz, r2.xyzx, r0.xyzx
    min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r2.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    and r2.xyz, r1.wwww, r2.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(4)
    add r2.xyz, r0.xyzx, r1.xyzx
    add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(5)
    max r2.xyz, r0.xyzx, r1.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(6)
    add r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r3.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r2.xyz, -r2.xyzx, r3.xyzx, -r1.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(7)
    lt r2.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    and r1.w, r2.y, r2.x
    and r1.w, r2.z, r1.w
    add r2.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r2.xyz, r1.xyzx, r2.xyzx
    min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r2.xyz, r1.wwww, r2.xyzx, l(1.000000,1.000000,1.000000,0)
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(8)
    add r2.xyz, r0.xyzx, r1.xyzx
    min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(9)
    add r2.xyz, r0.xyzx, r1.xyzx
    min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(11)
    ge r2.xyz, r1.xyzx, l(0.999999, 0.999999, 0.999999, 0.000000)
    or r1.w, r2.y, r2.x
    or r1.w, r2.z, r1.w
    mul r2.xyz, r0.xyzx, r0.xyzx
    add r3.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div_sat r2.xyz, r2.xyzx, r3.xyzx
    movc r2.xyz, r1.wwww, r1.xyzx, r2.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(12)
    mul r2.xyz, r0.xyzx, r1.xyzx
    add r3.xyz, r2.xyzx, r2.xyzx
    add r4.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r4.xyz, r4.xyzx, r4.xyzx
    add r5.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r4.xyz, -r4.xyzx, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    ge r5.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r5.xyz, r5.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
    mad r2.xyz, -r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r4.xyzx
    mad r2.xyz, r5.xyzx, r2.xyzx, r3.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(13)
    ge r2.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r0.xyzx
    and r1.w, r2.y, r2.x
    and r1.w, r2.z, r1.w
    mad r2.xyz, -r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r2.xyz, r1.xyzx, r2.xyzx
    add r3.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad_sat r2.xyz, -r2.xyzx, r3.xyzx, r1.xyzx
    mad r3.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    ge r4.xyz, l(0.250000, 0.250000, 0.250000, 0.000000), r1.xyzx
    and r2.w, r4.y, r4.x
    and r2.w, r4.z, r2.w
    mad r4.xyz, r1.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000), l(-12.000000, -12.000000, -12.000000, 0.000000)
    mad r4.xyz, r4.xyzx, r1.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
    mul r4.xyz, r1.xyzx, r4.xyzx
    sqrt r5.xyz, r1.xyzx
    movc r4.xyz, r2.wwww, r4.xyzx, r5.xyzx
    add r4.xyz, -r1.xyzx, r4.xyzx
    mad_sat r3.xyz, r3.xyzx, r4.xyzx, r1.xyzx
    movc r2.xyz, r1.wwww, r2.xyzx, r3.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(14)
    mul r2.xyz, r0.xyzx, r1.xyzx
    add r3.xyz, r2.xyzx, r2.xyzx
    add r4.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r4.xyz, r4.xyzx, r4.xyzx
    add r5.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r4.xyz, -r4.xyzx, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    ge r5.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r5.xyz, r5.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
    mad r2.xyz, -r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r4.xyzx
    mad r2.xyz, r5.xyzx, r2.xyzx, r3.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(15)
    mul r2.xyz, r0.xyzx, r1.xyzx
    add r3.xyz, r2.xyzx, r2.xyzx
    add r4.xyz, -r1.xyzx, l(1.010000, 1.010000, 1.010000, 0.000000)
    add r4.xyz, r4.xyzx, r4.xyzx
    div r4.xyz, r0.xyzx, r4.xyzx
    ge r5.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r5.xyz, r5.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
    mad r2.xyz, -r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r4.xyzx
    mad r2.xyz, r5.xyzx, r2.xyzx, r3.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(16)
    lt r2.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    or r1.w, r2.y, r2.x
    or r1.w, r2.z, r1.w
    mad r2.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
    add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r3.xyz, r0.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
    min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r2.xyz, r1.wwww, r2.xyzx, r3.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(17)
    lt r2.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    or r1.w, r2.y, r2.x
    or r1.w, r2.z, r1.w
    add r2.xyz, r0.xyzx, r0.xyzx
    min r2.xyz, r1.xyzx, r2.xyzx
    add r3.xyz, r0.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    add r3.xyz, r3.xyzx, r3.xyzx
    max r3.xyz, r1.xyzx, r3.xyzx
    movc r2.xyz, r1.wwww, r2.xyzx, r3.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(18)
    mul r2.xyz, r0.xyzx, r1.xyzx
    add r3.xyz, r2.xyzx, r2.xyzx
    add r4.xyz, -r1.xyzx, l(1.010000, 1.010000, 1.010000, 0.000000)
    add r4.xyz, r4.xyzx, r4.xyzx
    div r4.xyz, r0.xyzx, r4.xyzx
    ge r5.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r5.xyz, r5.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
    mad r2.xyz, -r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r4.xyzx
    mad r2.xyz, r5.xyzx, r2.xyzx, r3.xyzx
    lt r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    or r1.w, r2.y, r2.x
    or r1.w, r2.z, r1.w
    movc r1.w, r1.w, l(0), l(1.000000)
    mul r2.x, r0.w, cb0[13].x
    add r2.yzw, -r1.xxyz, r1.wwww
    mad r1.xyz, r2.xxxx, r2.yzwy, r1.xyzx
    break 
    case l(19)
    add r2.xyz, -r0.xyzx, r1.xyzx
    add r3.xyz, r0.xyzx, -r1.xyzx
    max r2.xyz, r2.xyzx, r3.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(20)
    add r2.xyz, r0.xyzx, r1.xyzx
    mul r3.xyz, r0.xyzx, r1.xyzx
    mad r2.xyz, -r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(21)
    add r2.xyz, -r0.xyzx, r1.xyzx
    max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(22)
    add r2.xyz, r0.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
    div_sat r2.xyz, r1.xyzx, r2.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(23)
    div r2.xyz, r1.xyzx, r0.xyzx
    div r2.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), r2.xyzx
    mov_sat r2.xyz, r2.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(24)
    div_sat r2.xyz, r1.xyzx, r0.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(10)
    ge r2.xyz, r0.xyzx, l(0.999999, 0.999999, 0.999999, 0.000000)
    or r1.w, r2.y, r2.x
    or r1.w, r2.z, r1.w
    mul r2.xyz, r1.xyzx, r1.xyzx
    add r3.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div_sat r2.xyz, r2.xyzx, r3.xyzx
    movc r2.xyz, r1.wwww, r0.xyzx, r2.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(25)
    add r2.xyz, r0.xyzx, r1.xyzx
    add_sat r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(26)
    add r2.xyz, -r0.xyzx, r1.xyzx
    add_sat r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(27)
    max r1.w, r1.z, r1.y
    max r1.w, r1.w, r1.x
    min r2.x, r1.z, r1.y
    min r2.x, r1.x, r2.x
    add r2.y, r1.w, -r2.x
    max r1.w, r0.z, r0.y
    max r1.w, r0.x, r1.w
    eq r3.x, r0.x, r1.w
    min r3.y, r0.z, r0.y
    min r3.y, r0.x, r3.y
    eq r3.z, r0.z, r3.y
    and r3.w, r3.z, r3.x
    if_nz r3.w
      lt r3.w, r0.z, r0.x
      add r4.xy, -r0.zzzz, r0.yxyy
      mul r4.x, r2.y, r4.x
      div r2.z, r4.x, r4.y
      and r4.xy, r2.yzyy, r3.wwww
      mov r4.z, l(0)
    else 
      eq r3.w, r0.y, r3.y
      and r3.x, r3.w, r3.x
      if_nz r3.x
        lt r3.x, r0.y, r0.x
        add r5.xy, -r0.yyyy, r0.zxzz
        mul r4.w, r2.y, r5.x
        div r2.w, r4.w, r5.y
        and r4.xz, r2.yywy, r3.xxxx
        mov r4.y, l(0)
      else 
        eq r2.w, r0.y, r1.w
        and r3.x, r3.z, r2.w
        if_nz r3.x
          lt r3.x, r0.z, r0.y
          add r5.xy, -r0.zzzz, r0.xyxx
          mul r3.z, r2.y, r5.x
          div r2.x, r3.z, r5.y
          and r4.xy, r2.xyxx, r3.xxxx
          mov r4.z, l(0)
        else 
          eq r3.x, r0.x, r3.y
          and r2.w, r2.w, r3.x
          if_nz r2.w
            lt r2.w, r0.x, r0.y
            add r3.yz, -r0.xxxx, r0.zzyz
            mul r3.y, r2.y, r3.y
            div r2.z, r3.y, r3.z
            and r4.yz, r2.yyzy, r2.wwww
            mov r4.x, l(0)
          else 
            eq r1.w, r0.z, r1.w
            and r2.w, r3.w, r1.w
            lt r3.yz, r0.yyxy, r0.zzzz
            add r5.xyzw, -r0.yyxx, r0.xzyz
            mul r5.xz, r2.yyyy, r5.xxzx
            div r2.xz, r5.xxzx, r5.yywy
            and r5.xz, r2.xxyx, r3.yyyy
            and r1.w, r3.x, r1.w
            and r2.yz, r2.zzyz, r3.zzzz
            mov r2.x, l(0)
            movc r2.xyz, r1.wwww, r2.xyzx, r0.xyzx
            mov r5.y, l(0)
            movc r4.xyz, r2.wwww, r5.xyzx, r2.xyzx
          endif 
        endif 
      endif 
    endif 
    dp3 r1.w, r1.xzyx, l(0.333330, 0.333330, 0.333340, 0.000000)
    dp3 r2.x, r4.xzyx, l(0.333330, 0.333330, 0.333340, 0.000000)
    add r1.w, r1.w, -r2.x
    add r2.xyz, r1.wwww, r4.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(28)
    max r1.w, r0.z, r0.y
    max r1.w, r0.x, r1.w
    min r2.x, r0.z, r0.y
    min r2.x, r0.x, r2.x
    add r2.y, r1.w, -r2.x
    max r1.w, r1.z, r1.y
    max r1.w, r1.w, r1.x
    eq r3.x, r1.w, r1.x
    min r3.y, r1.z, r1.y
    min r3.y, r1.x, r3.y
    eq r3.z, r1.z, r3.y
    and r3.w, r3.z, r3.x
    if_nz r3.w
      lt r3.w, r1.z, r1.x
      add r4.xy, -r1.zzzz, r1.yxyy
      mul r4.x, r2.y, r4.x
      div r2.z, r4.x, r4.y
      and r4.xy, r2.yzyy, r3.wwww
      mov r4.z, l(0)
    else 
      eq r3.w, r1.y, r3.y
      and r3.x, r3.w, r3.x
      if_nz r3.x
        lt r3.x, r1.y, r1.x
        add r5.xy, -r1.yyyy, r1.zxzz
        mul r4.w, r2.y, r5.x
        div r2.w, r4.w, r5.y
        and r4.xz, r2.yywy, r3.xxxx
        mov r4.y, l(0)
      else 
        eq r2.w, r1.w, r1.y
        and r3.x, r3.z, r2.w
        if_nz r3.x
          lt r3.x, r1.z, r1.y
          add r5.xy, -r1.zzzz, r1.xyxx
          mul r3.z, r2.y, r5.x
          div r2.x, r3.z, r5.y
          and r4.xy, r2.xyxx, r3.xxxx
          mov r4.z, l(0)
        else 
          eq r3.x, r1.x, r3.y
          and r2.w, r2.w, r3.x
          if_nz r2.w
            lt r2.w, r1.x, r1.y
            add r3.yz, -r1.xxxx, r1.zzyz
            mul r3.y, r2.y, r3.y
            div r2.z, r3.y, r3.z
            and r4.yz, r2.yyzy, r2.wwww
            mov r4.x, l(0)
          else 
            eq r1.w, r1.w, r1.z
            and r2.w, r3.w, r1.w
            lt r3.yz, r1.yyxy, r1.zzzz
            add r5.xyzw, -r1.yyxx, r1.xzyz
            mul r5.xz, r2.yyyy, r5.xxzx
            div r2.xz, r5.xxzx, r5.yywy
            and r5.xz, r2.xxyx, r3.yyyy
            and r1.w, r3.x, r1.w
            and r2.yz, r2.zzyz, r3.zzzz
            mov r2.x, l(0)
            movc r2.xyz, r1.wwww, r2.xyzx, r1.xyzx
            mov r5.y, l(0)
            movc r4.xyz, r2.wwww, r5.xyzx, r2.xyzx
          endif 
        endif 
      endif 
    endif 
    dp3 r1.w, r1.xzyx, l(0.333330, 0.333330, 0.333340, 0.000000)
    dp3 r2.x, r4.xzyx, l(0.333330, 0.333330, 0.333340, 0.000000)
    add r1.w, r1.w, -r2.x
    add r2.xyz, r1.wwww, r4.xyzx
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(29)
    dp3 r1.w, r1.xzyx, l(0.333330, 0.333330, 0.333340, 0.000000)
    dp3 r2.x, r0.xzyx, l(0.333330, 0.333330, 0.333340, 0.000000)
    add r1.w, r1.w, -r2.x
    add r2.xyz, r0.xyzx, r1.wwww
    mul r1.w, r0.w, cb0[13].x
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
    break 
    case l(30)
    dp3 r0.x, r0.xzyx, l(0.333330, 0.333330, 0.333340, 0.000000)
    dp3 r0.y, r1.xzyx, l(0.333330, 0.333330, 0.333340, 0.000000)
    add r0.xyz, -r0.yyyy, r0.xxxx
    mul r0.w, r0.w, cb0[13].x
    mad r1.xyz, r0.wwww, r0.xyzx, r1.xyzx
    break 
    default 
    break 
  endswitch 
endif 
mov o0.xyzw, r1.xyzz
ret 
// Approximately 453 instruction slots used
