//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float AO_TEXSCALE;                 // Offset:    0 Size:     4
//   float AO_SHARPNESS;                // Offset:    4 Size:     4 [unused]
//   bool AO_SHARPNESS_DETECT;          // Offset:    8 Size:     4
//   int AO_BLUR_STEPS;                 // Offset:   12 Size:     4 [unused]
//   int AO_DEBUG;                      // Offset:   16 Size:     4 [unused]
//   bool AO_LUMINANCE_CONSIDERATION;   // Offset:   20 Size:     4 [unused]
//   float AO_LUMINANCE_LOWER;          // Offset:   24 Size:     4 [unused]
//   float AO_LUMINANCE_UPPER;          // Offset:   28 Size:     4 [unused]
//   float AO_FADE_START;               // Offset:   32 Size:     4 [unused]
//   float AO_FADE_END;                 // Offset:   36 Size:     4
//   int iSSAOSamples;                  // Offset:   40 Size:     4
//   bool iSSAOSmartSampling;           // Offset:   44 Size:     4
//   float fSSAOSamplingRange;          // Offset:   48 Size:     4
//   float fSSAODarkeningAmount;        // Offset:   52 Size:     4 [unused]
//   float fSSAOBrighteningAmount;      // Offset:   56 Size:     4 [unused]
//   int iRayAOSamples;                 // Offset:   60 Size:     4 [unused]
//   float fRayAOSamplingRange;         // Offset:   64 Size:     4 [unused]
//   float fRayAOMaxDepth;              // Offset:   68 Size:     4 [unused]
//   float fRayAOMinDepth;              // Offset:   72 Size:     4 [unused]
//   float fRayAOPower;                 // Offset:   76 Size:     4 [unused]
//   int iHBAOSamples;                  // Offset:   80 Size:     4 [unused]
//   float fHBAOSamplingRange;          // Offset:   84 Size:     4 [unused]
//   float fHBAOAmount;                 // Offset:   88 Size:     4 [unused]
//   float fHBAOClamp;                  // Offset:   92 Size:     4 [unused]
//   float fHBAOAttenuation;            // Offset:   96 Size:     4 [unused]
//   int iSSGISamples;                  // Offset:  100 Size:     4 [unused]
//   float fSSGISamplingRange;          // Offset:  104 Size:     4 [unused]
//   float fSSGIIlluminationMult;       // Offset:  108 Size:     4 [unused]
//   float fSSGIOcclusionMult;          // Offset:  112 Size:     4 [unused]
//   float fSSGIModelThickness;         // Offset:  116 Size:     4 [unused]
//   float fSSGISaturation;             // Offset:  120 Size:     4 [unused]
//   float iSAOSamples;                 // Offset:  124 Size:     4 [unused]
//   float fSAOIntensity;               // Offset:  128 Size:     4 [unused]
//   float fSAOClamp;                   // Offset:  132 Size:     4 [unused]
//   float fSAORadius;                  // Offset:  136 Size:     4 [unused]
//   float fSAOBias;                    // Offset:  140 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__texSSAONoise                 texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 11
div r0.xy, v1.xyxx, cb0[0].xxxx
lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r0.xyxx
or r0.w, r1.y, r1.x
discard_nz r0.w
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r0.xyxx, t2.yzwx, s0, l(0.000000)
mad r1.x, -r0.w, l(999.000000), l(1000.000000)
div r0.z, r0.w, r1.x
if_z cb0[0].z
  mov o0.w, r0.z
else 
  add r1.xyzw, r0.xyxy, l(0.000000, 0.001000, 0.001000, 0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t2.yzwx, s0, l(0.000000)
  mad r1.x, -r0.w, l(999.000000), l(1000.000000)
  div r0.w, r0.w, r1.x
  sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t2.xyzw, s0, l(0.000000)
  mad r1.y, -r1.x, l(999.000000), l(1000.000000)
  div r1.x, r1.x, r1.y
  add r2.y, -r0.z, r0.w
  add r2.x, -r0.z, r1.x
  mul r1.xy, r2.xyxx, l(0.001000, 0.001000, 0.000000, 0.000000)
  mov r1.z, l(0.000001)
  dp3 r0.w, r1.xyzx, r1.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r1.xyzx
  dp3 r0.w, r1.xyzx, l(0.333000, 0.333000, 0.333000, 0.000000)
  mul o0.w, r0.w, l(0.100000)
endif 
min r0.w, cb0[2].y, l(0.999900)
lt r0.w, r0.w, r0.z
if_nz r0.w
  mov o0.xyz, l(0.500000,0.500000,0.500000,0)
else 
  mul r0.w, cb0[3].x, l(0.000100)
  sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t4.xyzw, s1, l(0.000000)
  add r1.xyzw, r1.xyzz, l(-0.500000, -0.500000, -0.500000, 0.500000)
  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
  mul r2.xy, r1.yxyy, r1.yxyy
  mul r2.z, r1.y, -r1.w
  mul r3.z, r1.x, r2.z
  mad r3.xy, r2.xyxx, r1.wwww, r1.zzzz
  itof r1.w, cb0[2].z
  div r2.x, l(2.400000), r1.w
  add r2.x, r2.x, l(1.000000)
  lt r2.yz, l(0.000000, 0.500000, 0.800000, 0.000000), r0.zzzz
  mul r2.w, r1.w, l(0.500000)
  round_ne r2.w, r2.w
  max r2.w, r2.w, l(8.000000)
  movc r2.y, r2.y, r2.w, r1.w
  mul r2.w, r2.y, l(0.500000)
  round_ne r2.w, r2.w
  max r2.w, r2.w, l(8.000000)
  movc r2.y, r2.z, r2.w, r2.y
  movc r1.w, cb0[2].w, r2.y, r1.w
  div r2.y, l(5000.000000), cb0[3].x
  mad r2.z, r0.z, l(10.000000), l(1.000000)
  div r2.y, r2.y, r2.z
  lt r2.z, l(0.000000), r1.w
  mul r2.w, r1.w, l(0.125000)
  mov r3.w, r1.x
  mov r4.xy, r3.zyzz
  mov r4.z, r1.y
  mul r1.xyz, r1.xyzx, l(-1.000000, -1.000000, 1.000000, 0.000000)
  mov r5.y, r0.w
  mov r5.x, l(0)
  mov r3.y, l(0)
  mov r4.w, r2.z
  loop 
    breakc_z r4.w
    mov r5.zw, r5.yyyx
    mov r6.x, l(-1)
    loop 
      ilt r6.y, l(1), r6.x
      breakc_nz r6.y
      itof r7.x, r6.x
      mov r6.yz, r5.zzwz
      mov r6.w, l(-1)
      loop 
        ilt r7.w, l(1), r6.w
        breakc_nz r7.w
        itof r7.y, r6.w
        mov r8.xy, r6.yzyy
        mov r7.w, l(-1)
        loop 
          ilt r8.z, l(1), r7.w
          breakc_nz r8.z
          itof r7.z, r7.w
          dp3 r8.z, r7.xyzx, r7.xyzx
          rsq r8.z, r8.z
          mul r9.xyz, r7.xyzx, r8.zzzz
          mul r8.x, r2.x, r8.x
          mul r9.xyz, r8.xxxx, r9.xyzx
          dp3 r10.x, r9.xyzx, r3.xzwx
          dp3 r10.y, r9.xyzx, r4.xyzx
          dp3 r7.z, r9.xyzx, r1.xyzx
          mul r10.z, r0.z, r7.z
          add r9.xyz, r0.xyzx, r10.xyzx
          sample_l_indexable(texture2d)(float,float,float,float) r7.z, r9.xyxx, t2.yzxw, s0, l(0.000000)
          mad r8.z, -r7.z, l(999.000000), l(1000.000000)
          div r7.z, r7.z, r8.z
          ge r8.z, r7.z, l(10000000.000000)
          add r8.w, r8.y, l(1.000000)
          add r9.x, r0.z, -r7.z
          mul_sat r9.x, r2.y, |r9.x|
          lt r7.z, r9.z, r7.z
          and r9.y, r7.z, l(0x3f800000)
          movc r7.z, r7.z, l(-0.500000), l(0.500000)
          mad r7.z, r9.x, r7.z, r9.y
          add r7.z, r7.z, r8.y
          movc r8.y, r8.z, r8.w, r7.z
          iadd r7.w, r7.w, l(2)
        endloop 
        mov r6.yz, r8.xxyx
        iadd r6.w, r6.w, l(2)
      endloop 
      mov r5.zw, r6.yyyz
      iadd r6.x, r6.x, l(2)
    endloop 
    mov r5.xy, r5.wzww
    iadd r3.y, r3.y, l(1)
    itof r6.x, r3.y
    lt r4.w, r6.x, r2.w
  endloop 
  div o0.xyz, r5.xxxx, r1.wwww
endif 
ret 
// Approximately 125 instruction slots used
