//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool ShowGrid;                     // Offset:    0 Size:     4
//   float4 K;                          // Offset:   16 Size:    16
//   float S;                           // Offset:   32 Size:     4
//   bool UseVignette;                  // Offset:   36 Size:     4
//   float T;                           // Offset:   40 Size:     4
//   float2 P;                          // Offset:   48 Size:     8
//   float2 Q;                          // Offset:   56 Size:     8
//   float2 C;                          // Offset:   64 Size:     8
//   float4 Kp;                         // Offset:   80 Size:    16 [unused]
//   bool MirrorBorder;                 // Offset:   96 Size:     4
//   bool BorderVignette;               // Offset:  100 Size:     4
//   float4 BorderColor;                // Offset:  112 Size:    16
//   float BorderCorner;                // Offset:  128 Size:     4
//   uint BorderGContinuity;            // Offset:  132 Size:     4
//   float DimGridBackground;           // Offset:  136 Size:     4
//   uint GridLook;                     // Offset:  140 Size:     4
//   uint GridSize;                     // Offset:  144 Size:     4
//   uint GridWidth;                    // Offset:  148 Size:     4
//   float GridTilt;                    // Offset:  152 Size:     4
//   uint ChromaticSamplesLimit;        // Offset:  156 Size:     4
//   uint ParallaxSamples;              // Offset:  160 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s2                              sampler      NA          NA             s2      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __srgbV__ReShade__BackBufferTex    texture  float4          2d             t1      1 
// __V__BlueNoise__BlueNoiseTex      texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[10], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 7
ieq r0.x, cb0[0].x, l(0)
eq r1.xyzw, cb0[1].xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r0.yz, r1.zzwz, r1.xxyx
and r0.y, r0.z, r0.y
and r0.y, r0.y, r0.x
eq r1.xyzw, cb0[3].xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r0.zw, r1.yyyw, r1.xxxz
and r0.y, r0.z, r0.y
and r0.y, r0.w, r0.y
if_nz r0.y
  ftou r1.xy, v0.xyxx
  mov r1.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r0.yzw, r1.xyzw, t0.wxyz
  mov o0.xyz, r0.yzwy
  ret 
endif 
ne r1.xyzw, cb0[1].xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.yz, r1.zzwz, r1.xxyx
or r0.y, r0.z, r0.y
ne r1.xyzw, cb0[3].xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.zw, r1.yyyw, r1.xxxz
or r0.y, r0.z, r0.y
or r0.y, r0.w, r0.y
add r1.xy, v1.xyxx, -cb0[4].xyxx
div r1.z, r1.y, cb0[2].x
dp2 r2.x, r1.xzxx, r1.xzxx
mul r2.y, r2.x, r2.x
mul r2.z, r2.x, r2.y
mul r2.w, r2.x, r2.z
dp2 r0.z, r1.xyxx, r1.xyxx
dp4 r0.w, cb0[1].xyzw, r2.xyzw
add r0.w, r0.w, l(1.000000)
rcp r0.w, r0.w
dp2 r1.z, r1.xyxx, cb0[3].xyxx
add r0.w, r0.w, r1.z
mad r1.zw, r0.zzzz, cb0[3].zzzw, cb0[4].xxxy
mad r0.zw, r1.xxxy, r0.wwww, r1.zzzw
movc r0.zw, r0.yyyy, r0.zzzw, v1.xxxy
mad r1.xy, r0.zwzz, l(0.573674, 1.019864, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
ne r1.z, cb0[2].z, l(0.000000)
and r0.y, r0.y, r1.z
and r0.x, r0.x, r0.y
if_nz r0.x
  add r0.xy, v0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  mul r1.zw, r0.xxxy, l(0.000000, 0.000000, 0.000521, 0.000926)
  mad r0.xy, -r0.xyxx, l(0.000521, 0.000926, 0.000000, 0.000000), r1.xyxx
  and r2.x, cb0[9].w, l(1)
  iadd r2.x, -r2.x, cb0[9].w
  utof r2.x, r2.x
  min r2.x, r2.x, l(64.000000)
  mul r2.yz, r0.xxyx, cb0[2].zzzz
  mul r2.yz, r2.yyzy, l(0.000000, 1920.000000, 1080.000000, 0.000000)
  dp2 r2.y, r2.yzyy, r2.yzyy
  sqrt r2.y, r2.y
  round_pi r2.y, r2.y
  ftou r2.xy, r2.xyxx
  and r2.z, r2.y, l(1)
  iadd r2.y, r2.z, r2.y
  umax r2.y, r2.y, l(4)
  umin r2.x, r2.x, r2.y
  iadd r2.y, r2.x, l(-1)
  utof r2.yz, r2.yyxy
  mov r3.xyz, l(0,0,0,0)
  mov r2.w, l(0)
  loop 
    uge r3.w, r2.w, r2.x
    breakc_nz r3.w
    utof r3.w, r2.w
    div r4.x, r3.w, r2.y
    add r4.x, r4.x, l(-0.500000)
    mad r4.x, cb0[2].z, r4.x, l(1.000000)
    mad r4.xy, r4.xxxx, r0.xyxx, r1.zwzz
    sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t1.xyzw, s2, l(0.000000)
    div r3.w, r3.w, r2.z
    mad r5.xyz, r3.wwww, l(4.000000, 4.000000, 4.000000, 0.000000), l(-3.500000, -1.000000, -2.000000, 0.000000)
    add_sat r6.yz, -|r5.yyzy|, l(0.000000, 1.500000, 1.500000, 0.000000)
    mov_sat r5.x, r5.x
    add r6.x, r5.x, r6.y
    add r6.w, -r6.x, l(1.000000)
    mad r3.xyz, r4.xyzx, r6.xzwx, r3.xyzx
    iadd r2.w, r2.w, l(1)
  endloop 
  div r0.x, l(2.000000), r2.z
  mul r2.xyz, r0.xxxx, r3.xyzx
else 
  if_nz cb0[0].x
    ftou r3.xy, v0.xyxx
    mov r3.zw, l(0,0,0,0)
    ld_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyzw, t1.xyzw
    mul r0.x, cb0[9].z, l(0.017453)
    sincos r0.x, r4.x, r0.x
    mov r5.x, -r0.x
    mov r5.y, r4.x
    mov r5.z, r0.x
    dp2 r0.x, r5.yzyy, r0.zwzz
    dp2 r0.y, r5.xyxx, r0.zwzz
    deriv_rtx_coarse r4.xz, r0.xxyx
    deriv_rty_coarse r4.yw, r0.xxxy
    utof r1.zw, cb0[9].xxxy
    mul r0.xy, r0.xyxx, r1.zzzz
    frc r0.xy, r0.xyxx
    add r0.xy, r0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
    dp2 r2.w, r4.xyxx, r4.xyxx
    rsq r4.x, r2.w
    dp2 r2.w, r4.zwzz, r4.zwzz
    rsq r4.y, r2.w
    div r4.xy, r4.xyxx, r1.zzzz
    mul r0.xy, r0.xyxx, r4.xyxx
    mad_sat r0.zw, r1.wwww, l(0.000000, 0.000000, 0.500000, 0.500000), -|r0.xxxy|
    add r3.xyz, r3.xyzx, l(-0.005182, -0.005182, -0.005182, 0.000000)
    mad r4.xyz, cb0[8].zzzz, r3.xyzx, l(0.005182, 0.005182, 0.005182, 0.000000)
    switch cb0[8].w
      case l(1)
      add r0.xy, -r0.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      mul r0.x, r0.y, r0.x
      mul r2.xyz, r0.xxxx, r4.xyzx
      break 
      case l(2)
      add r0.xy, -r0.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      mul r0.x, r0.y, r0.x
      add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mad r2.xyz, -r0.xxxx, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      break 
      case l(3)
      add r5.xyz, -r4.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)
      mad r4.xyz, r0.wwww, r5.xyzx, r4.xyzx
      add r5.xyz, -r4.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
      mad r2.xyz, r0.zzzz, r5.xyzx, r4.xyzx
      break 
      default 
      add r0.xy, -r0.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      mul r0.x, r0.y, r0.x
      mad r3.xyz, cb0[8].zzzz, r3.xyzx, l(-0.994819, -0.994819, 0.005182, 0.000000)
      mad r2.xyz, r0.xxxx, r3.xyzx, l(1.000000, 1.000000, 0.000000, 0.000000)
      break 
    endswitch 
  else 
    sample_indexable(texture2d)(float,float,float,float) r2.xyz, r1.xyxx, t1.xyzw, s2
  endif 
endif 
if_z cb0[0].x
  mul r0.xy, r1.xyxx, l(1920.000000, 1080.000000, 0.000000, 0.000000)
  deriv_rtx_coarse r0.x, r0.x
  deriv_rty_coarse r0.y, r0.y
  mul r0.x, r0.y, r0.x
  movc r0.x, cb0[2].y, r0.x, l(1.000000)
  mul r0.yz, r0.zzwz, l(0.000000, 1.147347, 2.039729, 0.000000)
  ftou r1.xy, v0.xyxx
  mov r1.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t1.xyzw
  movc r1.xyz, cb0[6].xxxx, r2.xyzx, r1.xyzx
  ge r3.xyzw, l(0.040499, 0.040499, 0.040499, 0.040499), cb0[7].xyzw
  mul r4.xyzw, cb0[7].xyzw, l(0.077399, 0.077399, 0.077399, 0.077399)
  add r5.xyzw, |cb0[7].xyzw|, l(0.055000, 0.055000, 0.055000, 0.055000)
  mul r5.xyzw, r5.xyzw, l(0.947867, 0.947867, 0.947867, 0.947867)
  log r5.xyzw, r5.xyzw
  mul r5.xyzw, r5.xyzw, l(2.400000, 2.400000, 2.400000, 2.400000)
  exp r5.xyzw, r5.xyzw
  movc r3.xyzw, r3.xyzw, r4.xyzw, r5.xyzw
  add r3.xyz, -r1.xyzx, r3.xyzx
  mad r1.xyz, r3.wwww, r3.xyzx, r1.xyzx
  mov r3.xy, |r0.yzyy|
  ine r0.y, cb0[8].y, l(0)
  ne r0.z, cb0[8].x, l(0.000000)
  and r0.y, r0.z, r0.y
  if_nz r0.y
    add r0.z, cb0[8].x, l(-1.000000)
    mad r3.z, r3.x, l(1.777778), l(-0.777778)
    add r4.xyzw, r0.zzzz, r3.zyzy
    max r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    div r4.xyzw, r4.xyzw, cb0[8].xxxx
    max r0.z, |r4.y|, |r4.x|
    iadd r0.w, cb0[8].y, l(1)
    utof r0.w, r0.w
    log r4.xy, |r4.zwzz|
    mul r4.xy, r0.wwww, r4.xyxx
    exp r4.xy, r4.xyxx
    add r1.w, r4.y, r4.x
    rcp r0.w, r0.w
    log r1.w, r1.w
    mul r0.w, r0.w, r1.w
    exp r0.w, r0.w
    movc r0.z, cb0[8].y, r0.w, r0.z
    add r0.z, r0.z, l(-1.000000)
    deriv_rtx_coarse r4.x, r0.z
    deriv_rty_coarse r4.y, r0.z
    dp2 r0.w, r4.xyxx, r4.xyxx
    rsq r0.w, r0.w
    mad_sat r0.z, r0.w, r0.z, l(0.500000)
  else 
    max r0.w, r3.y, r3.x
    add r0.w, r0.w, l(-1.000000)
    deriv_rtx_coarse r4.x, r0.w
    deriv_rty_coarse r4.y, r0.w
    dp2 r1.w, r4.xyxx, r4.xyxx
    rsq r1.w, r1.w
    mad_sat r0.z, r1.w, r0.w, l(0.500000)
  endif 
  add r4.xyz, -r2.xyzx, r1.xyzx
  mad r4.xyz, r0.zzzz, r4.xyzx, r2.xyzx
  mul r4.xyz, r0.xxxx, r4.xyzx
  mul r5.xyz, r2.xyzx, r0.xxxx
  if_nz r0.y
    add r0.y, cb0[8].x, l(-1.000000)
    mad r3.w, r3.x, l(1.777778), l(-0.777778)
    add r6.xyzw, r0.yyyy, r3.wywy
    max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    div r6.xyzw, r6.xyzw, cb0[8].xxxx
    max r0.y, |r6.y|, |r6.x|
    iadd r0.z, cb0[8].y, l(1)
    utof r0.z, r0.z
    log r3.zw, |r6.zzzw|
    mul r3.zw, r0.zzzz, r3.zzzw
    exp r3.zw, r3.zzzw
    add r0.w, r3.w, r3.z
    rcp r0.z, r0.z
    log r0.w, r0.w
    mul r0.z, r0.w, r0.z
    exp r0.z, r0.z
    movc r0.y, cb0[8].y, r0.z, r0.y
    add r0.y, r0.y, l(-1.000000)
    deriv_rtx_coarse r6.x, r0.y
    deriv_rty_coarse r6.y, r0.y
    dp2 r0.z, r6.xyxx, r6.xyxx
    rsq r0.z, r0.z
    mad_sat r0.y, r0.z, r0.y, l(0.500000)
  else 
    max r0.z, r3.y, r3.x
    add r0.z, r0.z, l(-1.000000)
    deriv_rtx_coarse r3.x, r0.z
    deriv_rty_coarse r3.y, r0.z
    dp2 r0.w, r3.xyxx, r3.xyxx
    rsq r0.w, r0.w
    mad_sat r0.y, r0.w, r0.z, l(0.500000)
  endif 
  mad r0.xzw, -r0.xxxx, r2.xxyz, r1.xxyz
  mad r0.xyz, r0.yyyy, r0.xzwx, r5.xyzx
  movc_sat r2.xyz, cb0[6].yyyy, r4.xyzx, r0.xyzx
endif 
ge r0.xyz, l(0.003131, 0.003131, 0.003131, 0.000000), r2.xyzx
mul r1.xyz, r2.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
log r2.xyz, |r2.xyzx|
mul r2.xyz, r2.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
exp r2.xyz, r2.xyzx
mad r2.xyz, r2.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
movc r0.xyz, r0.xyzx, r1.xyzx, r2.xyzx
ftou r1.xy, v0.xyxx
mul r0.xyz, r0.xyzx, l(255.000000, 255.000000, 255.000000, 0.000000)
and r1.xy, r1.xyxx, l(63, 63, 0, 0)
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t4.xyzw
frc r2.xyz, r0.xyzx
ge r1.xyz, r2.xyzx, r1.xyzx
round_pi r2.xyz, r0.xyzx
round_ni r0.xyz, r0.xyzx
movc r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, l(0.003922, 0.003922, 0.003922, 0.000000)
ret 
// Approximately 258 instruction slots used
