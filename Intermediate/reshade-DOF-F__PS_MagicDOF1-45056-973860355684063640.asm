//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__texHDR1                      texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mad r1.x, r0.w, l(2.000000), l(-1.000000)
lt r1.y, r0.w, l(0.500000)
mul r1.xz, |r1.xxxx|, l(15.000000, 0.000000, 4.687500, 0.000000)
movc r1.x, r1.y, r1.z, r1.x
lt r1.y, r1.x, l(1.200000)
if_z r1.y
  mul r1.y, r0.w, l(0.990000)
  mov r2.y, l(0)
  mov r3.xyz, l(0,0,0,0)
  mov r1.zw, l(0,0,0,-8)
  loop 
    itof r2.z, r1.w
    lt r2.w, l(8.000000), r2.z
    breakc_nz r2.w
    mul r2.z, r1.x, r2.z
    mul r2.x, r2.z, l(0.000521)
    div r2.xz, r2.xxyx, l(8.000000, 0.000000, 8.000000, 0.000000)
    add r2.xz, r2.xxzx, v1.xxyx
    sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r2.xzxx, t0.xyzw, s0, l(0.000000)
    ge r2.x, r4.w, r1.y
    mad r2.z, r4.w, l(2.000000), l(-1.000000)
    mul r2.z, |r2.z|, |r2.z|
    mul r2.z, r2.z, r2.z
    movc r2.x, r2.x, l(1.000000), r2.z
    mad r3.xyz, r4.xyzx, r2.xxxx, r3.xyzx
    add r1.z, r1.z, r2.x
    iadd r1.w, r1.w, l(1)
  endloop 
  div r0.xyz, r3.xyzx, r1.zzzz
endif 
mov o0.xyzw, r0.xyzw
ret 
// Approximately 33 instruction slots used
