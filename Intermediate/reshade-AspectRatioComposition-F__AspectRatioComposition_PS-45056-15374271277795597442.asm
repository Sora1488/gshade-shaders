//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int2 iUIAspectRatio;               // Offset:    0 Size:     8
//   int iUIGridType;                   // Offset:    8 Size:     4
//   int iUIGridFractions;              // Offset:   12 Size:     4
//   float4 UIGridColor;                // Offset:   16 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
itof r1.xy, cb0[0].xyxx
div r0.w, r1.x, r1.y
ieq r1.x, cb0[0].z, l(1)
if_nz r1.x
  itof r1.x, cb0[0].w
  lt r1.y, r0.w, l(1.777778)
  if_nz r1.y
    mad r1.y, -r0.w, l(1080.000000), l(1920.000000)
    mul r1.z, r1.y, l(0.500000)
    add r1.w, -r1.y, l(1920.000000)
    div r1.w, r1.w, r1.x
    lt r1.z, v0.x, r1.z
    mad r2.x, -r1.y, l(0.500000), l(1920.000000)
    lt r2.x, r2.x, v0.x
    or r1.z, r1.z, r2.x
    div r2.x, l(1080.000000), r1.x
    mul r2.y, r2.x, v0.y
    ge r2.y, r2.y, -r2.y
    movc r2.x, r2.y, r2.x, -r2.x
    div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
    mul r2.y, r2.y, v0.y
    frc r2.y, r2.y
    mul r2.x, r2.y, r2.x
    lt r2.x, r2.x, l(1.000000)
    or r1.z, r1.z, r2.x
    mad r1.y, -r1.y, l(0.500000), v0.x
    mul r2.x, r1.w, r1.y
    ge r2.x, r2.x, -r2.x
    movc r1.w, r2.x, r1.w, -r1.w
    div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
    mul r1.y, r1.y, r2.x
    frc r1.y, r1.y
    mul r1.y, r1.y, r1.w
    lt r1.y, r1.y, l(1.000000)
    or r1.y, r1.y, r1.z
    movc r1.yzw, r1.yyyy, cb0[1].xxyz, r0.xxyz
  else 
    div r2.x, l(1920.000000), r0.w
    add r2.x, -r2.x, l(1080.000000)
    mul r2.y, r2.x, l(0.500000)
    add r2.z, -r2.x, l(1080.000000)
    div r2.z, r2.z, r1.x
    lt r2.y, v0.y, r2.y
    mad r2.w, -r2.x, l(0.500000), l(1080.000000)
    lt r2.w, r2.w, v0.y
    or r2.y, r2.w, r2.y
    div r1.x, l(1920.000000), r1.x
    mul r2.w, r1.x, v0.x
    ge r2.w, r2.w, -r2.w
    movc r1.x, r2.w, r1.x, -r1.x
    div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
    mul r2.w, r2.w, v0.x
    frc r2.w, r2.w
    mul r1.x, r1.x, r2.w
    lt r1.x, r1.x, l(1.000000)
    or r1.x, r1.x, r2.y
    mad r2.x, -r2.x, l(0.500000), v0.y
    mul r2.y, r2.z, r2.x
    ge r2.y, r2.y, -r2.y
    movc r2.y, r2.y, r2.z, -r2.z
    div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
    mul r2.x, r2.z, r2.x
    frc r2.x, r2.x
    mul r2.x, r2.x, r2.y
    lt r2.x, r2.x, l(1.000000)
    or r1.x, r1.x, r2.x
    movc r1.yzw, r1.xxxx, cb0[1].xxyz, r0.xxyz
  endif 
  ge r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), v0.xyxx
  ge r2.zw, v0.xxxy, l(0.000000, 0.000000, 1919.000000, 1079.000000)
  or r1.x, r2.z, r2.x
  or r1.x, r2.y, r1.x
  or r1.x, r2.w, r1.x
  movc r1.xyz, r1.xxxx, cb0[1].xyzx, r1.yzwy
else 
  ieq r1.w, cb0[0].z, l(2)
  if_nz r1.w
    lt r1.w, r0.w, l(1.777778)
    if_nz r1.w
      mad r2.x, -r0.w, l(1080.000000), l(1920.000000)
      add r2.z, -r2.x, l(1920.000000)
      mul r2.yz, r2.xxzx, l(0.000000, 0.500000, 0.618034, 0.000000)
      lt r2.y, v0.x, r2.y
      mad r2.w, -r2.x, l(0.500000), l(1920.000000)
      lt r2.w, r2.w, v0.x
      or r2.y, r2.w, r2.y
      mul r2.w, v0.y, l(667.476685)
      ge r2.w, r2.w, -r2.w
      movc r3.xy, r2.wwww, l(667.476685,0.001498,0,0), l(-667.476685,-0.001498,0,0)
      mul r2.w, r3.y, v0.y
      frc r2.w, r2.w
      mul r2.w, r2.w, r3.x
      lt r2.w, r2.w, l(1.000000)
      or r2.y, r2.w, r2.y
      mad r2.x, -r2.x, l(0.500000), v0.x
      mul r2.w, r2.z, r2.x
      ge r2.w, r2.w, -r2.w
      movc r2.z, r2.w, r2.z, -r2.z
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
      mul r2.x, r2.w, r2.x
      frc r2.x, r2.x
      mul r2.x, r2.x, r2.z
      lt r2.x, r2.x, l(1.000000)
      or r2.x, r2.x, r2.y
      movc r2.xyz, r2.xxxx, cb0[1].xyzx, r0.xyzx
    else 
      div r2.w, l(1920.000000), r0.w
      add r2.w, -r2.w, l(1080.000000)
      mul r3.x, r2.w, l(0.500000)
      add r3.y, -r2.w, l(1080.000000)
      mul r3.y, r3.y, l(0.618034)
      lt r3.x, v0.y, r3.x
      mad r3.z, -r2.w, l(0.500000), l(1080.000000)
      lt r3.z, r3.z, v0.y
      or r3.x, r3.z, r3.x
      mul r3.z, v0.x, l(1186.625244)
      ge r3.z, r3.z, -r3.z
      movc r3.zw, r3.zzzz, l(0,0,1186.625244,0.000843), l(0,0,-1186.625244,-0.000843)
      mul r3.w, r3.w, v0.x
      frc r3.w, r3.w
      mul r3.z, r3.w, r3.z
      lt r3.z, r3.z, l(1.000000)
      or r3.x, r3.z, r3.x
      mad r2.w, -r2.w, l(0.500000), v0.y
      mul r3.z, r3.y, r2.w
      ge r3.z, r3.z, -r3.z
      movc r3.y, r3.z, r3.y, -r3.y
      div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
      mul r2.w, r2.w, r3.z
      frc r2.w, r2.w
      mul r2.w, r2.w, r3.y
      lt r2.w, r2.w, l(1.000000)
      or r2.w, r2.w, r3.x
      movc r2.xyz, r2.wwww, cb0[1].xyzx, r0.xyzx
    endif 
    ge r3.xy, l(1.000000, 1.000000, 0.000000, 0.000000), v0.xyxx
    ge r3.zw, v0.xxxy, l(0.000000, 0.000000, 1919.000000, 1079.000000)
    or r2.w, r3.z, r3.x
    or r2.w, r3.y, r2.w
    or r2.w, r3.w, r2.w
    add r3.xy, -v0.xyxx, l(1920.000000, 1080.000000, 0.000000, 0.000000)
    if_nz r1.w
      mad r1.w, -r0.w, l(1080.000000), l(1920.000000)
      mul r3.z, r1.w, l(0.500000)
      add r3.w, -r1.w, l(1920.000000)
      mul r3.w, r3.w, l(0.618034)
      lt r3.z, r3.x, r3.z
      mad r4.x, -r1.w, l(0.500000), l(1920.000000)
      lt r4.x, r4.x, r3.x
      or r3.z, r3.z, r4.x
      or r3.z, r2.w, r3.z
      mul r4.x, r3.y, l(667.476685)
      ge r4.x, r4.x, -r4.x
      movc r4.xy, r4.xxxx, l(667.476685,0.001498,0,0), l(-667.476685,-0.001498,0,0)
      mul r4.y, r3.y, r4.y
      frc r4.y, r4.y
      mul r4.x, r4.y, r4.x
      lt r4.x, r4.x, l(1.000000)
      or r3.z, r3.z, r4.x
      mad r1.w, -r1.w, l(0.500000), r3.x
      mul r4.x, r3.w, r1.w
      ge r4.x, r4.x, -r4.x
      movc r3.w, r4.x, r3.w, -r3.w
      div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
      mul r1.w, r1.w, r4.x
      frc r1.w, r1.w
      mul r1.w, r1.w, r3.w
      lt r1.w, r1.w, l(1.000000)
      or r1.w, r1.w, r3.z
      movc r4.xyz, r1.wwww, cb0[1].xyzx, r2.xyzx
    else 
      div r0.w, l(1920.000000), r0.w
      add r0.w, -r0.w, l(1080.000000)
      mul r1.w, r0.w, l(0.500000)
      add r3.z, -r0.w, l(1080.000000)
      mul r3.z, r3.z, l(0.618034)
      lt r1.w, r3.y, r1.w
      mad r3.w, -r0.w, l(0.500000), l(1080.000000)
      lt r3.w, r3.w, r3.y
      or r1.w, r1.w, r3.w
      or r1.w, r1.w, r2.w
      mul r2.w, r3.x, l(1186.625244)
      ge r2.w, r2.w, -r2.w
      movc r5.xy, r2.wwww, l(1186.625244,0.000843,0,0), l(-1186.625244,-0.000843,0,0)
      mul r2.w, r3.x, r5.y
      frc r2.w, r2.w
      mul r2.w, r2.w, r5.x
      lt r2.w, r2.w, l(1.000000)
      or r1.w, r1.w, r2.w
      mad r0.w, -r0.w, l(0.500000), r3.y
      mul r2.w, r3.z, r0.w
      ge r2.w, r2.w, -r2.w
      movc r2.w, r2.w, r3.z, -r3.z
      div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
      mul r0.w, r0.w, r3.z
      frc r0.w, r0.w
      mul r0.w, r0.w, r2.w
      lt r0.w, r0.w, l(1.000000)
      or r0.w, r0.w, r1.w
      movc r4.xyz, r0.wwww, cb0[1].xyzx, r2.xyzx
    endif 
    ge r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r3.xyxx
    ge r2.zw, r3.xxxy, l(0.000000, 0.000000, 1919.000000, 1079.000000)
    or r0.w, r2.z, r2.x
    or r0.w, r2.y, r0.w
    or r0.w, r2.w, r0.w
    movc r1.xyz, r0.wwww, cb0[1].xyzx, r4.xyzx
  else 
    mov r1.xyz, r0.xyzx
  endif 
endif 
add r1.xyz, -r0.xyzx, r1.xyzx
mad o0.xyz, cb0[1].wwww, r1.xyzx, r0.xyzx
ret 
// Approximately 215 instruction slots used
