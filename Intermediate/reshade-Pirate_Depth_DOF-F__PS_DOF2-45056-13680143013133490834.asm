//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool DOF_USE_AUTO_FOCUS;           // Offset:    0 Size:     4
//   float DOF_RADIUS;                  // Offset:    4 Size:     4
//   float DOF_NEAR_STRENGTH;           // Offset:    8 Size:     4 [unused]
//   float DOF_FAR_STRENGTH;            // Offset:   12 Size:     4 [unused]
//   float DOF_FOCAL_RANGE;             // Offset:   16 Size:     4 [unused]
//   float DOF_FOCAL_CURVE;             // Offset:   20 Size:     4 [unused]
//   float DOF_HYPERFOCAL;              // Offset:   24 Size:     4 [unused]
//   float DOF_BLEND;                   // Offset:   28 Size:     4 [unused]
//   float DOF_BOKEH_CONTRAST;          // Offset:   32 Size:     4
//   float DOF_BOKEH_BIAS;              // Offset:   36 Size:     4
//   float DOF_MANUAL_FOCUS;            // Offset:   40 Size:     4 [unused]
//   float DOF_FOCUS_X;                 // Offset:   44 Size:     4 [unused]
//   float DOF_FOCUS_Y;                 // Offset:   48 Size:     4 [unused]
//   float DOF_FOCUS_SPREAD;            // Offset:   52 Size:     4 [unused]
//   float DOF_FOCUS_SPEED;             // Offset:   56 Size:     4 [unused]
//   float DOF_SCRATCHES_STRENGTH;      // Offset:   60 Size:     4 [unused]
//   int DOF_DEBUG;                     // Offset:   64 Size:     4 [unused]
//   int LUMA_MODE;                     // Offset:   68 Size:     4
//   int FOV;                           // Offset:   72 Size:     4 [unused]
//   float Frametime;                   // Offset:   76 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__TexF1                        texture  float4          2d             t6      1 
// __V__TexFocus                     texture  float4          2d            t10      1 
// __V__TexDOF1                      texture  float4          2d            t12      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 10
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t12.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t10.xyzw, s0
ne r1.y, r1.x, l(0.000000)
if_nz r1.y
  if_z cb0[0].x
    sample_indexable(texture2d)(float,float,float,float) r1.y, l(0.500000, 0.500000, 0.000000, 0.000000), t6.yxzw, s0
    add r1.y, r1.y, r1.y
    sincos r2.x, r3.x, r1.y
    mul r1.yz, r2.xxxx, l(0.000000, 0.866025, 0.500000, 0.000000)
    mad r2.x, r3.x, l(0.500000), -r1.y
    mad r2.y, r3.x, l(0.866025), r1.z
  else 
    mov r2.xy, l(0.500000,0.866025,0,0)
  endif 
  mul r1.y, r1.x, cb0[0].y
  ge r1.z, r1.y, l(0.001042)
  if_nz r1.z
    dp3 r1.z, r0.xyzx, l(0.333300, 0.333300, 0.333300, 0.000000)
    max r1.w, r0.y, r0.x
    max r1.w, r0.z, r1.w
    ieq r2.zw, cb0[4].yyyy, l(0, 0, 1, 2)
    min r3.x, r0.y, r0.x
    min r3.x, r0.z, r3.x
    add r3.x, r1.w, r3.x
    mul r3.x, r3.x, l(0.500000)
    dp3 r3.y, r0.xyzx, l(0.210000, 0.720000, 0.070000, 0.000000)
    movc r3.x, r2.w, r3.x, r3.y
    movc r1.w, r2.z, r1.w, r3.x
    movc r1.z, cb0[4].y, r1.w, r1.z
    mul r1.x, r1.x, r1.z
    mul r3.xyz, r0.xyzx, r1.xxxx
    mul r1.yz, r1.yyyy, r2.xxyx
    mul r1.yz, r1.yyzy, l(0.000000, 0.001042, 0.001852, 0.000000)
    mov r4.xyz, r3.xyzx
    mov r5.xyz, r0.xyzx
    mov r1.w, r1.x
    mov r5.w, r1.x
    mov r2.x, l(1)
    loop 
      ilt r2.y, l(4), r2.x
      breakc_nz r2.y
      itof r2.y, r2.x
      mad r6.xy, r1.yzyy, r2.yyyy, v1.xyxx
      sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r6.xyxx, t12.xyzw, s0, l(0.000000)
      sample_l_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t10.yzwx, s0, l(0.000000)
      dp3 r4.w, r7.xyzx, l(0.333300, 0.333300, 0.333300, 0.000000)
      max r6.x, r7.y, r7.x
      max r6.x, r7.z, r6.x
      min r6.y, r7.y, r7.x
      min r6.y, r7.z, r6.y
      add r6.y, r6.y, r6.x
      mul r6.y, r6.y, l(0.500000)
      dp3 r6.z, r7.xyzx, l(0.210000, 0.720000, 0.070000, 0.000000)
      movc r6.y, r2.w, r6.y, r6.z
      movc r6.x, r2.z, r6.x, r6.y
      movc r4.w, cb0[4].y, r6.x, r4.w
      mul r7.w, r3.w, r4.w
      lt r6.x, r5.w, r7.w
      and r6.x, r6.x, l(0x3f800000)
      mul r6.x, r7.w, r6.x
      add r8.xyzw, -r5.xyzw, r7.xyzw
      mad r6.xyzw, r6.xxxx, r8.xyzw, r5.xyzw
      mad r7.xyz, r7.xyzx, r7.wwww, r4.xyzx
      mad r3.w, r3.w, r4.w, r1.w
      mad r8.xy, -r1.yzyy, r2.yyyy, v1.xyxx
      sample_l_indexable(texture2d)(float,float,float,float) r9.xyz, r8.xyxx, t12.xyzw, s0, l(0.000000)
      sample_l_indexable(texture2d)(float,float,float,float) r2.y, r8.xyxx, t10.yxzw, s0, l(0.000000)
      dp3 r4.w, r9.xyzx, l(0.333300, 0.333300, 0.333300, 0.000000)
      max r7.w, r9.y, r9.x
      max r7.w, r9.z, r7.w
      min r8.x, r9.y, r9.x
      min r8.x, r9.z, r8.x
      add r8.x, r7.w, r8.x
      mul r8.x, r8.x, l(0.500000)
      dp3 r8.y, r9.xyzx, l(0.210000, 0.720000, 0.070000, 0.000000)
      movc r8.x, r2.w, r8.x, r8.y
      movc r7.w, r2.z, r7.w, r8.x
      movc r4.w, cb0[4].y, r7.w, r4.w
      mul r9.w, r2.y, r4.w
      lt r7.w, r6.w, r9.w
      and r7.w, r7.w, l(0x3f800000)
      mul r7.w, r9.w, r7.w
      add r8.xyzw, -r6.xyzw, r9.xyzw
      mad r5.xyzw, r7.wwww, r8.xyzw, r6.xyzw
      mad r4.xyz, r9.xyzx, r9.wwww, r7.xyzx
      mad r1.w, r2.y, r4.w, r3.w
      iadd r2.x, r2.x, l(1)
    endloop 
    div r1.xyz, r4.xyzx, r1.wwww
    mul_sat r1.w, r5.w, cb0[2].y
    add r3.xyz, -r1.xyzx, r5.xyzx
    mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
    dp3 r3.w, r1.xyzx, l(0.333300, 0.333300, 0.333300, 0.000000)
    div r3.xyz, r1.xyzx, r3.wwww
    max r1.w, r1.y, r1.x
    max r4.w, r1.z, r1.w
    div r4.xyz, r1.xyzx, r4.wwww
    min r1.w, r1.y, r1.x
    min r1.w, r1.z, r1.w
    add r1.w, r1.w, r4.w
    mul r5.w, r1.w, l(0.500000)
    div r5.xyz, r1.xyzx, r5.wwww
    dp3 r6.w, r1.xyzx, l(0.210000, 0.720000, 0.070000, 0.000000)
    div r6.xyz, r1.xyzx, r6.wwww
    movc r1.xyzw, r2.wwww, r5.xyzw, r6.xyzw
    movc r1.xyzw, r2.zzzz, r4.xyzw, r1.xyzw
    movc r1.xyzw, cb0[4].yyyy, r1.xyzw, r3.xyzw
    mad r2.x, cb0[2].x, l(0.100000), l(1.000000)
    log r1.w, |r1.w|
    mul r1.w, r1.w, r2.x
    exp r1.w, r1.w
    mul o0.xyz, r1.wwww, r1.xyzx
    mov o0.w, l(1.000000)
  else 
    mov o0.xyzw, r0.xyzw
  endif 
else 
  mov o0.xyzw, r0.xyzw
endif 
ret 
// Approximately 120 instruction slots used
