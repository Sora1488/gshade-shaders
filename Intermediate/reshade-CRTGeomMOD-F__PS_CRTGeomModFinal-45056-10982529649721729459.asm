//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int2 inp_video_size;               // Offset:    0 Size:     8
//   int resize_method;                 // Offset:    8 Size:     4
//   bool ROTATED;                      // Offset:   12 Size:     4
//   int inp_screen_ratio;              // Offset:   16 Size:     4
//   int inp_game_ratio;                // Offset:   20 Size:     4
//   float2 aspect_ratio;               // Offset:   24 Size:     8
//   bool USE_BACKGROUND;               // Offset:   32 Size:     4 [unused]
//   bool USE_OFF_BEZEL;                // Offset:   36 Size:     4
//   float2 arts_aspect_ratio;          // Offset:   40 Size:     8
//   float3 bg_col;                     // Offset:   48 Size:    12 [unused]
//   bool CRT_EFFECT;                   // Offset:   60 Size:     4
//   float2 texture_size;               // Offset:   64 Size:     8 [unused]
//   float2 buffer_offset;              // Offset:   72 Size:     8 [unused]
//   bool CURVATURE;                    // Offset:   80 Size:     4 [unused]
//   bool VERTICAL_SCANLINES;           // Offset:   84 Size:     4 [unused]
//   int aperture_type;                 // Offset:   88 Size:     4 [unused]
//   float dotmask;                     // Offset:   92 Size:     4 [unused]
//   float sharper;                     // Offset:   96 Size:     4 [unused]
//   bool OVERSAMPLE;                   // Offset:  100 Size:     4 [unused]
//   float ovs_boost;                   // Offset:  104 Size:     4 [unused]
//   float lum;                         // Offset:  108 Size:     4 [unused]
//   float CRTgamma;                    // Offset:  112 Size:     4 [unused]
//   float monitorgamma;                // Offset:  116 Size:     4
//   float R;                           // Offset:  120 Size:     4 [unused]
//   float d;                           // Offset:  124 Size:     4 [unused]
//   float2 tilt;                       // Offset:  128 Size:     8 [unused]
//   float cornersize;                  // Offset:  136 Size:     4 [unused]
//   float cornersmooth;                // Offset:  140 Size:     4 [unused]
//   bool BLOOM;                        // Offset:  144 Size:     4
//   float BloomBlurOffset;             // Offset:  148 Size:     4 [unused]
//   float BloomStrength;               // Offset:  152 Size:     4
//   float BloomContrast;               // Offset:  156 Size:     4
//   bool USE_BEZEL;                    // Offset:  160 Size:     4
//   bool USE_FRAME;                    // Offset:  164 Size:     4
//   bool USE_OVERLAY;                  // Offset:  168 Size:     4
//   float2 h_starts;                   // Offset:  176 Size:     8
//   float2 v_starts;                   // Offset:  184 Size:     8
//   float2 overscan;                   // Offset:  192 Size:     8 [unused]
//   float2 src_offsets;                // Offset:  200 Size:     8 [unused]
//   bool PASS_THROUGH_BORDERS;         // Offset:  208 Size:     4 [unused]
//   float2 ext_zoom;                   // Offset:  212 Size:     8 [unused]
//   float2 ext_offsets;                // Offset:  224 Size:     8 [unused]
//   bool ACTIVATION_PIXEL_TEST;        // Offset:  232 Size:     4
//   float test_epsilon;                // Offset:  236 Size:     4 [unused]
//   int2 test_pixel;                   // Offset:  240 Size:     8 [unused]
//   float3 test_color;                 // Offset:  256 Size:    12 [unused]
//   int2 test_pixel2;                  // Offset:  272 Size:     8 [unused]
//   float3 test_color2;                // Offset:  288 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __s3                              sampler      NA          NA             s3      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__bezel_texture                texture  float4          2d             t6      1 
// __V__bezel_off_texture            texture  float4          2d             t8      1 
// __V__frame_texture                texture  float4          2d            t10      1 
// __V__overlay_texture              texture  float4          2d            t12      1 
// __V__PixelTestTex                 texture  float4          2d            t18      1 
// __V__BloomBlurTex2                texture  float4          2d            t22      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t18
dcl_resource_texture2d (float,float,float,float) t22
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
switch cb0[0].z
  case l(1)
  mov r0.x, l(3.555556)
  break 
  case l(2)
  mov r0.x, l(2.370370)
  break 
  case l(3)
  mov r0.x, l(1.777778)
  break 
  case l(4)
  mov r0.x, l(1.666667)
  break 
  case l(5)
  mov r0.x, l(1.600000)
  break 
  case l(6)
  mov r0.x, l(1.333333)
  break 
  case l(7)
  mov r0.x, l(1.250000)
  break 
  case l(8)
  mov r0.x, l(1.000000)
  break 
  case l(9)
  mov r0.x, l(0.800000)
  break 
  case l(10)
  mov r0.x, l(0.750000)
  break 
  default 
  mov r0.x, l(1.777778)
  break 
endswitch 
movc r0.yz, cb0[0].wwww, cb0[1].wwzw, cb0[1].zzwz
switch cb0[0].z
  case l(1)
  mov r0.w, l(3.555556)
  break 
  case l(2)
  mov r0.w, l(2.370370)
  break 
  case l(3)
  mov r0.w, l(1.777778)
  break 
  case l(4)
  mov r0.w, l(1.666667)
  break 
  case l(5)
  mov r0.w, l(1.600000)
  break 
  case l(6)
  mov r0.w, l(1.333333)
  break 
  case l(7)
  mov r0.w, l(1.250000)
  break 
  case l(8)
  mov r0.w, l(1.000000)
  break 
  case l(9)
  mov r0.w, l(0.800000)
  break 
  case l(10)
  mov r0.w, l(0.750000)
  break 
  default 
  mov r0.w, l(1.777778)
  break 
endswitch 
itof r1.xy, cb0[0].xyxx
ieq r1.zw, cb0[0].xxxy, l(0, 0, 0, 0)
and r1.z, r1.w, r1.z
ge r1.w, r0.w, l(1.777778)
div r2.y, l(1920.000000), r0.w
mul r2.z, r0.w, l(1080.000000)
mov r2.xw, l(1920.000000,0,0,1080.000000)
movc r2.xy, r1.wwww, r2.xyxx, r2.zwzz
mul r1.w, r0.w, r1.y
movc r3.x, cb0[0].x, r1.x, r1.w
div r0.w, r3.x, r0.w
movc r3.y, cb0[0].y, r1.y, r0.w
movc r2.xy, r1.zzzz, r2.xyxx, r3.xyxx
switch cb0[1].y
  case l(0)
  div r0.w, r2.x, r2.y
  break 
  case l(1)
  mov r0.w, l(3.555556)
  break 
  case l(2)
  mov r0.w, l(2.370370)
  break 
  case l(3)
  mov r0.w, l(1.777778)
  break 
  case l(4)
  mov r0.w, l(1.666667)
  break 
  case l(5)
  mov r0.w, l(1.600000)
  break 
  case l(6)
  mov r0.w, l(1.333333)
  break 
  case l(7)
  mov r0.w, l(1.250000)
  break 
  case l(8)
  mov r0.w, l(1.000000)
  break 
  case l(9)
  mov r0.w, l(0.800000)
  break 
  case l(10)
  mov r0.w, l(0.750000)
  break 
  default 
  div r0.w, r2.x, r2.y
  break 
endswitch 
switch cb0[1].x
  case l(0)
  mov r1.w, l(1.777778)
  break 
  case l(1)
  mov r1.w, l(3.555556)
  break 
  case l(2)
  mov r1.w, l(2.370370)
  break 
  case l(3)
  mov r1.w, l(1.777778)
  break 
  case l(4)
  mov r1.w, l(1.666667)
  break 
  case l(5)
  mov r1.w, l(1.600000)
  break 
  case l(6)
  mov r1.w, l(1.333333)
  break 
  case l(7)
  mov r1.w, l(1.250000)
  break 
  case l(8)
  mov r1.w, l(1.000000)
  break 
  case l(9)
  mov r1.w, l(0.800000)
  break 
  case l(10)
  mov r1.w, l(0.750000)
  break 
  default 
  mov r1.w, l(1.777778)
  break 
endswitch 
ge r2.x, r1.w, r0.w
div r3.x, r1.w, r0.w
div r3.w, r0.w, r1.w
mov r3.yz, l(0,1.000000,1.000000,0)
movc r2.xy, r2.xxxx, r3.xyxx, r3.zwzz
mul r3.y, r0.w, r1.w
mov r3.xz, l(1.000000,0,1920.000000,0)
movc r2.xy, cb0[0].wwww, r3.xyxx, r2.xyxx
div r2.xy, l(1920.000000, 1080.000000, 0.000000, 0.000000), r2.xyxx
div r3.xy, r2.xyxx, r0.yzyy
add r3.xy, -r3.xyxx, l(1920.000000, 1080.000000, 0.000000, 0.000000)
mul r4.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
switch cb0[0].z
  case l(1)
  mov r0.w, l(3.555556)
  break 
  case l(2)
  mov r0.w, l(2.370370)
  break 
  case l(3)
  mov r0.w, l(1.777778)
  break 
  case l(4)
  mov r0.w, l(1.666667)
  break 
  case l(5)
  mov r0.w, l(1.600000)
  break 
  case l(6)
  mov r0.w, l(1.333333)
  break 
  case l(7)
  mov r0.w, l(1.250000)
  break 
  case l(8)
  mov r0.w, l(1.000000)
  break 
  case l(9)
  mov r0.w, l(0.800000)
  break 
  case l(10)
  mov r0.w, l(0.750000)
  break 
  default 
  mov r0.w, l(1.777778)
  break 
endswitch 
ge r1.w, r0.w, l(1.777778)
div r3.w, l(1920.000000), r0.w
mul r5.x, r0.w, l(1080.000000)
mov r5.yz, l(0,1080.000000,1920.000000,0)
movc r3.zw, r1.wwww, r3.zzzw, r5.xxxy
mul r1.w, r1.y, r0.w
movc r5.x, cb0[0].x, r1.x, r1.w
div r0.w, r5.x, r0.w
movc r5.y, cb0[0].y, r1.y, r0.w
movc r3.zw, r1.zzzz, r3.zzzw, r5.xxxy
switch cb0[1].y
  case l(0)
  div r0.w, r3.z, r3.w
  break 
  case l(1)
  mov r0.w, l(3.555556)
  break 
  case l(2)
  mov r0.w, l(2.370370)
  break 
  case l(3)
  mov r0.w, l(1.777778)
  break 
  case l(4)
  mov r0.w, l(1.666667)
  break 
  case l(5)
  mov r0.w, l(1.600000)
  break 
  case l(6)
  mov r0.w, l(1.333333)
  break 
  case l(7)
  mov r0.w, l(1.250000)
  break 
  case l(8)
  mov r0.w, l(1.000000)
  break 
  case l(9)
  mov r0.w, l(0.800000)
  break 
  case l(10)
  mov r0.w, l(0.750000)
  break 
  default 
  div r0.w, r3.z, r3.w
  break 
endswitch 
switch cb0[1].x
  case l(0)
  mov r1.w, l(1.777778)
  break 
  case l(1)
  mov r1.w, l(3.555556)
  break 
  case l(2)
  mov r1.w, l(2.370370)
  break 
  case l(3)
  mov r1.w, l(1.777778)
  break 
  case l(4)
  mov r1.w, l(1.666667)
  break 
  case l(5)
  mov r1.w, l(1.600000)
  break 
  case l(6)
  mov r1.w, l(1.333333)
  break 
  case l(7)
  mov r1.w, l(1.250000)
  break 
  case l(8)
  mov r1.w, l(1.000000)
  break 
  case l(9)
  mov r1.w, l(0.800000)
  break 
  case l(10)
  mov r1.w, l(0.750000)
  break 
  default 
  mov r1.w, l(1.777778)
  break 
endswitch 
ge r2.w, r1.w, r0.w
div r0.w, r1.w, r0.w
div r0.w, l(1920.000000), r0.w
movc r0.w, r2.w, r0.w, l(1920.000000)
movc r0.w, cb0[0].w, l(1920.000000), r0.w
mul r3.zw, r0.wwww, cb0[11].xxxy
mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.010000, 0.010000)
div r3.zw, r3.zzzw, r0.yyyy
switch cb0[0].z
  case l(1)
  mov r0.w, l(3.555556)
  break 
  case l(2)
  mov r0.w, l(2.370370)
  break 
  case l(3)
  mov r0.w, l(1.777778)
  break 
  case l(4)
  mov r0.w, l(1.666667)
  break 
  case l(5)
  mov r0.w, l(1.600000)
  break 
  case l(6)
  mov r0.w, l(1.333333)
  break 
  case l(7)
  mov r0.w, l(1.250000)
  break 
  case l(8)
  mov r0.w, l(1.000000)
  break 
  case l(9)
  mov r0.w, l(0.800000)
  break 
  case l(10)
  mov r0.w, l(0.750000)
  break 
  default 
  mov r0.w, l(1.777778)
  break 
endswitch 
ge r1.w, r0.w, l(1.777778)
div r5.w, l(1920.000000), r0.w
mul r6.x, r0.w, l(1080.000000)
mov r6.yw, l(0,1080.000000,0,1.000000)
movc r4.zw, r1.wwww, r5.zzzw, r6.xxxy
mul r1.w, r1.y, r0.w
movc r5.x, cb0[0].x, r1.x, r1.w
div r0.w, r5.x, r0.w
movc r5.y, cb0[0].y, r1.y, r0.w
movc r4.zw, r1.zzzz, r4.zzzw, r5.xxxy
switch cb0[1].y
  case l(0)
  div r0.w, r4.z, r4.w
  break 
  case l(1)
  mov r0.w, l(3.555556)
  break 
  case l(2)
  mov r0.w, l(2.370370)
  break 
  case l(3)
  mov r0.w, l(1.777778)
  break 
  case l(4)
  mov r0.w, l(1.666667)
  break 
  case l(5)
  mov r0.w, l(1.600000)
  break 
  case l(6)
  mov r0.w, l(1.333333)
  break 
  case l(7)
  mov r0.w, l(1.250000)
  break 
  case l(8)
  mov r0.w, l(1.000000)
  break 
  case l(9)
  mov r0.w, l(0.800000)
  break 
  case l(10)
  mov r0.w, l(0.750000)
  break 
  default 
  div r0.w, r4.z, r4.w
  break 
endswitch 
switch cb0[1].x
  case l(0)
  mov r1.w, l(1.777778)
  break 
  case l(1)
  mov r1.w, l(3.555556)
  break 
  case l(2)
  mov r1.w, l(2.370370)
  break 
  case l(3)
  mov r1.w, l(1.777778)
  break 
  case l(4)
  mov r1.w, l(1.666667)
  break 
  case l(5)
  mov r1.w, l(1.600000)
  break 
  case l(6)
  mov r1.w, l(1.333333)
  break 
  case l(7)
  mov r1.w, l(1.250000)
  break 
  case l(8)
  mov r1.w, l(1.000000)
  break 
  case l(9)
  mov r1.w, l(0.800000)
  break 
  case l(10)
  mov r1.w, l(0.750000)
  break 
  default 
  mov r1.w, l(1.777778)
  break 
endswitch 
ge r2.w, r1.w, r0.w
div r4.z, r0.w, r1.w
movc r2.w, r2.w, l(1.000000), r4.z
mul r0.w, r0.w, r1.w
movc r0.w, cb0[0].w, r0.w, r2.w
div r0.w, l(1080.000000), r0.w
mul r4.zw, r0.wwww, cb0[11].zzzw
mul r4.zw, r4.zzzw, l(0.000000, 0.000000, 0.010000, 0.010000)
div r4.zw, r4.zzzw, r0.zzzz
lt r0.w, r0.x, l(1.777778)
div r6.z, l(1.777778), r0.x
mul r5.xy, r2.xyxx, r6.zwzz
div r5.xy, r5.xyxx, r0.yzyy
add r5.xy, -r5.xyxx, l(1920.000000, 1080.000000, 0.000000, 0.000000)
mul r5.xy, r5.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r2.z, r0.x, r2.y
mul r2.xy, r2.xzxx, l(1.000000, 0.562500, 0.000000, 0.000000)
div r2.xy, r2.xyxx, r0.yzyy
add r2.xy, -r2.xyxx, l(1920.000000, 1080.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
movc r0.xw, r0.wwww, r5.xxxy, r2.xxxy
movc r0.xw, cb0[0].zzzz, r0.xxxw, r4.xxxy
if_z cb0[0].w
  mul r2.xy, r0.wxww, l(0.000926, 0.000521, 0.000000, 0.000000)
  lt r2.xy, r2.xyxx, v1.yxyy
  add r2.zw, -r0.wwwx, l(0.000000, 0.000000, 1080.000000, 1920.000000)
  mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000926, 0.000521)
  lt r2.zw, v1.yyyx, r2.zzzw
  and r2.xy, r2.zwzz, r2.xyxx
  not r4.x, r2.y
  mad r2.zw, r3.yyyy, l(0.000000, 0.000000, 0.500000, 0.500000), r4.zzzw
  mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000926, 0.000926)
  lt r1.w, r2.z, v1.y
  lt r2.z, v1.y, r2.w
  and r1.w, r1.w, r2.z
  mad r2.zw, r3.xxxx, l(0.000000, 0.000000, 0.500000, 0.500000), r3.zzzw
  mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000521, 0.000521)
  lt r2.z, r2.z, v1.x
  lt r2.w, v1.x, r2.w
  and r2.z, r2.w, r2.z
  not r2.z, r2.z
  movc r1.w, r1.w, r2.z, l(-1)
  movc r4.y, r2.y, r1.w, l(-1)
  movc r2.xy, r2.xxxx, r4.xyxx, l(-1,-1,0,0)
  mov r2.zw, l(0,0,0,0)
else 
  mul r4.xy, r0.xwxx, l(0.000521, 0.000926, 0.000000, 0.000000)
  add r1.w, -v1.y, l(1.000000)
  lt r4.x, r4.x, r1.w
  add r0.xw, -r0.xxxw, l(1920.000000, 0.000000, 0.000000, 1080.000000)
  mul r0.xw, r0.xxxw, l(0.000521, 0.000000, 0.000000, 0.000926)
  lt r0.x, r1.w, r0.x
  and r0.x, r0.x, r4.x
  lt r4.x, r4.y, v1.x
  lt r0.w, v1.x, r0.w
  and r0.w, r0.w, r4.x
  not r5.z, r0.w
  mad r3.xz, r3.xxxx, l(0.500000, 0.000000, 0.500000, 0.000000), r3.zzwz
  mul r3.xz, r3.xxzx, l(0.000521, 0.000000, 0.000521, 0.000000)
  lt r3.x, r3.x, r1.w
  lt r1.w, r1.w, r3.z
  and r1.w, r1.w, r3.x
  mad r3.xy, r3.yyyy, l(0.500000, 0.500000, 0.000000, 0.000000), r4.zwzz
  mul r3.xy, r3.xyxx, l(0.000926, 0.000926, 0.000000, 0.000000)
  lt r3.x, r3.x, v1.x
  lt r3.y, v1.x, r3.y
  and r3.x, r3.y, r3.x
  not r3.x, r3.x
  movc r1.w, r1.w, r3.x, l(-1)
  movc r5.w, r0.w, r1.w, l(-1)
  movc r2.zw, r0.xxxx, r5.zzzw, l(0,0,-1,-1)
  mov r2.xy, l(0,0,0,0)
endif 
if_nz cb0[14].z
  sample_indexable(texture2d)(float,float,float,float) r0.x, l(0.500000, 0.500000, 0.000000, 0.000000), t18.xyzw, s3
  ge r0.x, r0.x, l(0.500000)
else 
  mov r0.x, l(-1)
endif 
switch cb0[1].x
  case l(0)
  mov r0.w, l(1.777778)
  break 
  case l(1)
  mov r0.w, l(3.555556)
  break 
  case l(2)
  mov r0.w, l(2.370370)
  break 
  case l(3)
  mov r0.w, l(1.777778)
  break 
  case l(4)
  mov r0.w, l(1.666667)
  break 
  case l(5)
  mov r0.w, l(1.600000)
  break 
  case l(6)
  mov r0.w, l(1.333333)
  break 
  case l(7)
  mov r0.w, l(1.250000)
  break 
  case l(8)
  mov r0.w, l(1.000000)
  break 
  case l(9)
  mov r0.w, l(0.800000)
  break 
  case l(10)
  mov r0.w, l(0.750000)
  break 
  default 
  mov r0.w, l(1.777778)
  break 
endswitch 
switch cb0[0].z
  case l(1)
  mov r1.w, l(3.555556)
  break 
  case l(2)
  mov r1.w, l(2.370370)
  break 
  case l(3)
  mov r1.w, l(1.777778)
  break 
  case l(4)
  mov r1.w, l(1.666667)
  break 
  case l(5)
  mov r1.w, l(1.600000)
  break 
  case l(6)
  mov r1.w, l(1.333333)
  break 
  case l(7)
  mov r1.w, l(1.250000)
  break 
  case l(8)
  mov r1.w, l(1.000000)
  break 
  case l(9)
  mov r1.w, l(0.800000)
  break 
  case l(10)
  mov r1.w, l(0.750000)
  break 
  default 
  mov r1.w, l(1.777778)
  break 
endswitch 
ge r3.x, r1.w, l(1.777778)
div r4.y, l(1920.000000), r1.w
mul r4.z, r1.w, l(1080.000000)
mov r4.xw, l(1920.000000,0,0,1080.000000)
movc r3.xy, r3.xxxx, r4.xyxx, r4.zwzz
mul r3.z, r1.y, r1.w
movc r4.x, cb0[0].x, r1.x, r3.z
div r1.w, r4.x, r1.w
movc r4.y, cb0[0].y, r1.y, r1.w
movc r3.xy, r1.zzzz, r3.xyxx, r4.xyxx
switch cb0[0].z
  case l(1)
  mov r1.w, l(3.555556)
  break 
  case l(2)
  mov r1.w, l(2.370370)
  break 
  case l(3)
  mov r1.w, l(1.777778)
  break 
  case l(4)
  mov r1.w, l(1.666667)
  break 
  case l(5)
  mov r1.w, l(1.600000)
  break 
  case l(6)
  mov r1.w, l(1.333333)
  break 
  case l(7)
  mov r1.w, l(1.250000)
  break 
  case l(8)
  mov r1.w, l(1.000000)
  break 
  case l(9)
  mov r1.w, l(0.800000)
  break 
  case l(10)
  mov r1.w, l(0.750000)
  break 
  default 
  mov r1.w, l(1.777778)
  break 
endswitch 
ge r3.z, r1.w, l(1.777778)
div r4.y, l(1920.000000), r1.w
mul r4.z, r1.w, l(1080.000000)
mov r4.xw, l(1920.000000,0,0,1080.000000)
movc r3.zw, r3.zzzz, r4.xxxy, r4.zzzw
mul r4.x, r1.y, r1.w
movc r4.x, cb0[0].x, r1.x, r4.x
div r1.w, r4.x, r1.w
movc r4.y, cb0[0].y, r1.y, r1.w
movc r3.zw, r1.zzzz, r3.zzzw, r4.xxxy
switch cb0[1].y
  case l(0)
  div r1.w, r3.z, r3.w
  break 
  case l(1)
  mov r1.w, l(3.555556)
  break 
  case l(2)
  mov r1.w, l(2.370370)
  break 
  case l(3)
  mov r1.w, l(1.777778)
  break 
  case l(4)
  mov r1.w, l(1.666667)
  break 
  case l(5)
  mov r1.w, l(1.600000)
  break 
  case l(6)
  mov r1.w, l(1.333333)
  break 
  case l(7)
  mov r1.w, l(1.250000)
  break 
  case l(8)
  mov r1.w, l(1.000000)
  break 
  case l(9)
  mov r1.w, l(0.800000)
  break 
  case l(10)
  mov r1.w, l(0.750000)
  break 
  default 
  div r1.w, r3.z, r3.w
  break 
endswitch 
add r3.zw, v1.yyyx, l(0.000000, 0.000000, -0.500000, -0.500000)
switch cb0[1].x
  case l(0)
  mov r4.x, l(1.777778)
  break 
  case l(1)
  mov r4.x, l(3.555556)
  break 
  case l(2)
  mov r4.x, l(2.370370)
  break 
  case l(3)
  mov r4.x, l(1.777778)
  break 
  case l(4)
  mov r4.x, l(1.666667)
  break 
  case l(5)
  mov r4.x, l(1.600000)
  break 
  case l(6)
  mov r4.x, l(1.333333)
  break 
  case l(7)
  mov r4.x, l(1.250000)
  break 
  case l(8)
  mov r4.x, l(1.000000)
  break 
  case l(9)
  mov r4.x, l(0.800000)
  break 
  case l(10)
  mov r4.x, l(0.750000)
  break 
  default 
  mov r4.x, l(1.777778)
  break 
endswitch 
mul r3.w, r3.w, r4.x
mul r3.w, r3.w, cb0[2].z
mul r4.x, r3.w, l(0.562500)
mul r4.y, r3.z, cb0[2].w
if_z cb0[0].w
  switch cb0[0].z
    case l(1)
    mov r3.z, l(3.555556)
    break 
    case l(2)
    mov r3.z, l(2.370370)
    break 
    case l(3)
    mov r3.z, l(1.777778)
    break 
    case l(4)
    mov r3.z, l(1.666667)
    break 
    case l(5)
    mov r3.z, l(1.600000)
    break 
    case l(6)
    mov r3.z, l(1.333333)
    break 
    case l(7)
    mov r3.z, l(1.250000)
    break 
    case l(8)
    mov r3.z, l(1.000000)
    break 
    case l(9)
    mov r3.z, l(0.800000)
    break 
    case l(10)
    mov r3.z, l(0.750000)
    break 
    default 
    mov r3.z, l(1.777778)
    break 
  endswitch 
  ge r3.z, r0.w, r3.z
  ge r3.w, r0.w, r1.w
  div r4.z, r3.x, r3.y
  div r5.x, r4.z, r1.w
  mov r5.y, l(1.000000)
  mul r5.xy, r4.xyxx, r5.xyxx
  div r6.x, r4.z, r0.w
  div r6.y, r1.w, r0.w
  mul r5.zw, r4.xxxy, r6.xxxy
  movc r5.xy, r3.wwww, r5.xyxx, r5.zwzz
  ge r3.w, r1.w, r0.w
  div r6.x, l(1.777778), r0.w
  div r4.w, r1.w, r4.z
  mul r4.w, r4.w, l(1.777778)
  div r6.y, r4.w, r0.w
  mul r5.zw, r4.xxxy, r6.xxxy
  div r6.x, l(1.777778), r1.w
  div r4.z, r0.w, r4.z
  mul r4.z, r4.z, l(1.777778)
  div r6.y, r4.z, r0.w
  mul r4.zw, r4.xxxy, r6.xxxy
  movc r4.zw, r3.wwww, r5.zzzw, r4.zzzw
  movc r3.zw, r3.zzzz, r5.xxxy, r4.zzzw
else 
  div r0.w, r3.x, r3.y
  div r3.x, r1.w, r0.w
  mov r3.y, l(1.000000)
  mul r3.zw, r3.xxxy, r4.xxxy
endif 
add r3.xy, r3.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
switch cb0[0].z
  case l(1)
  mov r0.w, l(3.555556)
  break 
  case l(2)
  mov r0.w, l(2.370370)
  break 
  case l(3)
  mov r0.w, l(1.777778)
  break 
  case l(4)
  mov r0.w, l(1.666667)
  break 
  case l(5)
  mov r0.w, l(1.600000)
  break 
  case l(6)
  mov r0.w, l(1.333333)
  break 
  case l(7)
  mov r0.w, l(1.250000)
  break 
  case l(8)
  mov r0.w, l(1.000000)
  break 
  case l(9)
  mov r0.w, l(0.800000)
  break 
  case l(10)
  mov r0.w, l(0.750000)
  break 
  default 
  mov r0.w, l(1.777778)
  break 
endswitch 
ge r1.w, r0.w, l(1.777778)
div r4.y, l(1920.000000), r0.w
mul r4.z, r0.w, l(1080.000000)
mov r4.xw, l(1920.000000,0,0,1080.000000)
movc r3.zw, r1.wwww, r4.xxxy, r4.zzzw
mul r1.w, r1.y, r0.w
movc r4.x, cb0[0].x, r1.x, r1.w
div r0.w, r4.x, r0.w
movc r4.y, cb0[0].y, r1.y, r0.w
movc r3.zw, r1.zzzz, r3.zzzw, r4.xxxy
switch cb0[1].y
  case l(0)
  div r0.w, r3.z, r3.w
  break 
  case l(1)
  mov r0.w, l(3.555556)
  break 
  case l(2)
  mov r0.w, l(2.370370)
  break 
  case l(3)
  mov r0.w, l(1.777778)
  break 
  case l(4)
  mov r0.w, l(1.666667)
  break 
  case l(5)
  mov r0.w, l(1.600000)
  break 
  case l(6)
  mov r0.w, l(1.333333)
  break 
  case l(7)
  mov r0.w, l(1.250000)
  break 
  case l(8)
  mov r0.w, l(1.000000)
  break 
  case l(9)
  mov r0.w, l(0.800000)
  break 
  case l(10)
  mov r0.w, l(0.750000)
  break 
  default 
  div r0.w, r3.z, r3.w
  break 
endswitch 
switch cb0[1].x
  case l(0)
  mov r1.w, l(1.777778)
  break 
  case l(1)
  mov r1.w, l(3.555556)
  break 
  case l(2)
  mov r1.w, l(2.370370)
  break 
  case l(3)
  mov r1.w, l(1.777778)
  break 
  case l(4)
  mov r1.w, l(1.666667)
  break 
  case l(5)
  mov r1.w, l(1.600000)
  break 
  case l(6)
  mov r1.w, l(1.333333)
  break 
  case l(7)
  mov r1.w, l(1.250000)
  break 
  case l(8)
  mov r1.w, l(1.000000)
  break 
  case l(9)
  mov r1.w, l(0.800000)
  break 
  case l(10)
  mov r1.w, l(0.750000)
  break 
  default 
  mov r1.w, l(1.777778)
  break 
endswitch 
switch cb0[0].z
  case l(1)
  mov r3.z, l(3.555556)
  break 
  case l(2)
  mov r3.z, l(2.370370)
  break 
  case l(3)
  mov r3.z, l(1.777778)
  break 
  case l(4)
  mov r3.z, l(1.666667)
  break 
  case l(5)
  mov r3.z, l(1.600000)
  break 
  case l(6)
  mov r3.z, l(1.333333)
  break 
  case l(7)
  mov r3.z, l(1.250000)
  break 
  case l(8)
  mov r3.z, l(1.000000)
  break 
  case l(9)
  mov r3.z, l(0.800000)
  break 
  case l(10)
  mov r3.z, l(0.750000)
  break 
  default 
  mov r3.z, l(1.777778)
  break 
endswitch 
ge r3.w, r3.z, l(1.777778)
div r4.y, l(1920.000000), r3.z
mul r4.z, r3.z, l(1080.000000)
mov r4.xw, l(1920.000000,0,0,1080.000000)
movc r4.xy, r3.wwww, r4.xyxx, r4.zwzz
mul r3.w, r1.y, r3.z
movc r5.x, cb0[0].x, r1.x, r3.w
div r3.z, r5.x, r3.z
movc r5.y, cb0[0].y, r1.y, r3.z
movc r3.zw, r1.zzzz, r4.xxxy, r5.xxxy
switch cb0[1].y
  case l(0)
  div r4.x, r3.z, r3.w
  break 
  case l(1)
  mov r4.x, l(3.555556)
  break 
  case l(2)
  mov r4.x, l(2.370370)
  break 
  case l(3)
  mov r4.x, l(1.777778)
  break 
  case l(4)
  mov r4.x, l(1.666667)
  break 
  case l(5)
  mov r4.x, l(1.600000)
  break 
  case l(6)
  mov r4.x, l(1.333333)
  break 
  case l(7)
  mov r4.x, l(1.250000)
  break 
  case l(8)
  mov r4.x, l(1.000000)
  break 
  case l(9)
  mov r4.x, l(0.800000)
  break 
  case l(10)
  mov r4.x, l(0.750000)
  break 
  default 
  div r4.x, r3.z, r3.w
  break 
endswitch 
switch cb0[1].x
  case l(0)
  mov r3.z, l(1.777778)
  break 
  case l(1)
  mov r3.z, l(3.555556)
  break 
  case l(2)
  mov r3.z, l(2.370370)
  break 
  case l(3)
  mov r3.z, l(1.777778)
  break 
  case l(4)
  mov r3.z, l(1.666667)
  break 
  case l(5)
  mov r3.z, l(1.600000)
  break 
  case l(6)
  mov r3.z, l(1.333333)
  break 
  case l(7)
  mov r3.z, l(1.250000)
  break 
  case l(8)
  mov r3.z, l(1.000000)
  break 
  case l(9)
  mov r3.z, l(0.800000)
  break 
  case l(10)
  mov r3.z, l(0.750000)
  break 
  default 
  mov r3.z, l(1.777778)
  break 
endswitch 
switch cb0[0].z
  case l(1)
  mov r3.w, l(3.555556)
  break 
  case l(2)
  mov r3.w, l(2.370370)
  break 
  case l(3)
  mov r3.w, l(1.777778)
  break 
  case l(4)
  mov r3.w, l(1.666667)
  break 
  case l(5)
  mov r3.w, l(1.600000)
  break 
  case l(6)
  mov r3.w, l(1.333333)
  break 
  case l(7)
  mov r3.w, l(1.250000)
  break 
  case l(8)
  mov r3.w, l(1.000000)
  break 
  case l(9)
  mov r3.w, l(0.800000)
  break 
  case l(10)
  mov r3.w, l(0.750000)
  break 
  default 
  mov r3.w, l(1.777778)
  break 
endswitch 
ge r4.y, r3.w, l(1.777778)
div r5.y, l(1920.000000), r3.w
mul r5.z, r3.w, l(1080.000000)
mov r5.xw, l(1920.000000,0,0,1080.000000)
movc r4.yz, r4.yyyy, r5.xxyx, r5.zzwz
mul r4.w, r1.y, r3.w
movc r5.x, cb0[0].x, r1.x, r4.w
div r1.x, r5.x, r3.w
movc r5.y, cb0[0].y, r1.y, r1.x
movc r1.xy, r1.zzzz, r4.yzyy, r5.xyxx
switch cb0[1].y
  case l(0)
  div r1.z, r1.x, r1.y
  break 
  case l(1)
  mov r1.z, l(3.555556)
  break 
  case l(2)
  mov r1.z, l(2.370370)
  break 
  case l(3)
  mov r1.z, l(1.777778)
  break 
  case l(4)
  mov r1.z, l(1.666667)
  break 
  case l(5)
  mov r1.z, l(1.600000)
  break 
  case l(6)
  mov r1.z, l(1.333333)
  break 
  case l(7)
  mov r1.z, l(1.250000)
  break 
  case l(8)
  mov r1.z, l(1.000000)
  break 
  case l(9)
  mov r1.z, l(0.800000)
  break 
  case l(10)
  mov r1.z, l(0.750000)
  break 
  default 
  div r1.z, r1.x, r1.y
  break 
endswitch 
switch cb0[1].x
  case l(0)
  mov r1.x, l(1.777778)
  break 
  case l(1)
  mov r1.x, l(3.555556)
  break 
  case l(2)
  mov r1.x, l(2.370370)
  break 
  case l(3)
  mov r1.x, l(1.777778)
  break 
  case l(4)
  mov r1.x, l(1.666667)
  break 
  case l(5)
  mov r1.x, l(1.600000)
  break 
  case l(6)
  mov r1.x, l(1.333333)
  break 
  case l(7)
  mov r1.x, l(1.250000)
  break 
  case l(8)
  mov r1.x, l(1.000000)
  break 
  case l(9)
  mov r1.x, l(0.800000)
  break 
  case l(10)
  mov r1.x, l(0.750000)
  break 
  default 
  mov r1.x, l(1.777778)
  break 
endswitch 
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, v1.xyxx, t0.xyzw, s0
ieq r1.y, cb0[3].w, l(0)
not r0.x, r0.x
or r0.x, r0.x, r1.y
if_nz r0.x
  if_nz cb0[2].y
    sample_indexable(texture2d)(float,float,float,float) r6.xyzw, r3.xyxx, t8.xyzw, s1
    add r4.yzw, -r5.xxyz, r6.xxyz
    mad r5.xyz, r6.wwww, r4.yzwy, r5.xyzx
  endif 
  mov o0.xyzw, r5.xyzw
  ret 
else 
  or r0.x, r2.z, r2.x
  or r0.x, r2.y, r0.x
  or r0.x, r2.w, r0.x
  if_nz r0.x
    if_nz cb0[10].x
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t6.xyzw, s1
      add r2.xyz, -r5.xyzx, r2.xyzx
      mad r2.xyz, r2.wwww, r2.xyzx, r5.xyzx
    else 
      mov r2.xyz, r5.xyzx
    endif 
    mov r2.w, r5.w
    mov o0.xyzw, r2.xyzw
    ret 
  endif 
  ge r0.x, r1.w, r0.w
  div r0.w, r1.w, r0.w
  div r0.w, l(1920.000000), r0.w
  movc r0.x, r0.x, r0.w, l(1920.000000)
  movc r0.x, cb0[0].w, l(1920.000000), r0.x
  mul r0.xw, r0.xxxx, cb0[11].xxxy
  mul r0.x, r0.x, l(0.010000)
  ge r1.y, r3.z, r4.x
  div r1.w, r4.x, r3.z
  movc r1.y, r1.y, l(1.000000), r1.w
  mul r1.w, r4.x, r3.z
  movc r1.y, cb0[0].w, r1.w, r1.y
  div r1.y, l(1080.000000), r1.y
  mul r1.yw, r1.yyyy, cb0[11].zzzw
  mul r1.y, r1.y, l(0.010000)
  ge r2.x, r1.x, r1.z
  div r4.xw, r1.xxxz, r1.zzzx
  mov r4.yz, l(0,1.000000,1.000000,0)
  movc r2.xy, r2.xxxx, r4.xyxx, r4.zwzz
  mul r4.y, r1.z, r1.x
  mov r4.x, l(1.000000)
  movc r1.xz, cb0[0].wwww, r4.xxyx, r2.xxyx
  div r1.xz, l(1920.000000, 0.000000, 1080.000000, 0.000000), r1.xxzx
  add r1.xz, -r1.xxzx, l(1920.000000, 0.000000, 1080.000000, 0.000000)
  mad r2.xy, v1.yxyy, l(-1.000000, 1.000000, 0.000000, 0.000000), l(1.000000, 0.000000, 0.000000, 0.000000)
  movc r2.xy, cb0[0].wwww, r2.xyxx, v1.xyxx
  add r2.xy, r2.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
  mad r0.yz, r2.xxyx, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
  mad r0.y, r0.y, l(1920.000000), -r0.x
  mad r0.y, -r1.x, l(0.500000), r0.y
  mad r0.x, r0.w, l(0.010000), -r0.x
  div r0.x, r0.y, r0.x
  mad r0.z, r0.z, l(1080.000000), -r1.y
  mad r0.z, -r1.z, l(0.500000), r0.z
  mad r0.w, r1.w, l(0.010000), -r1.y
  div r0.y, r0.z, r0.w
  if_nz cb0[9].x
    sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t22.xyzw, s0
    mul r1.xyz, r1.xyzx, cb0[7].yyyy
    mul r1.xyz, r1.xyzx, cb0[9].wwww
    log r1.xyz, |r1.xyzx|
    mul r1.xyz, r1.xyzx, cb0[9].wwww
    exp r1.xyz, r1.xyzx
    mad r5.xyz, r1.xyzx, cb0[9].zzzz, r5.xyzx
  endif 
  if_nz cb0[10].z
    sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t12.xyzw, s1
    add r1.xyz, -r5.xyzx, r1.xyzx
    mad r5.xyz, r1.wwww, r1.xyzx, r5.xyzx
  endif 
  if_nz cb0[10].y
    sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t10.xyzw, s1
    add r0.xyz, -r5.xyzx, r0.xyzx
    mad r5.xyz, r0.wwww, r0.xyzx, r5.xyzx
  endif 
  if_nz cb0[10].x
    sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r3.xyxx, t6.xyzw, s1
    add r0.xyz, -r5.xyzx, r0.xyzx
    mad r5.xyz, r0.wwww, r0.xyzx, r5.xyzx
  endif 
  mov o0.xyz, r5.xyzx
  mov o0.w, l(1.000000)
  ret 
endif 
ret 
// Approximately 1232 instruction slots used
