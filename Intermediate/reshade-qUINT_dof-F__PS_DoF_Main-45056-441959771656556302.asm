//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__CommonTex0                   texture  float4          2d             t8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float     zw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xy          3     NONE   float   xy  
// TEXCOORD                 3   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 15
max r0.x, v1.w, v1.z
lt r0.x, l(1.010000), r0.x
if_nz r0.x
  discard_nz l(-1)
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.zwzz, t8.xyzw, s0
mad r1.x, r0.w, l(2.000000), l(-1.000000)
lt r1.y, |r1.x|, l(0.010586)
if_nz r1.y
  mov o0.xyzw, r0.xyzw
  ret 
endif 
mul r1.yz, |r1.xxxx|, l(0.000000, 0.012300, 0.021867, 0.000000)
min r1.w, |r1.x|, l(1.000000)
mad r1.w, r1.w, l(4.000000), l(1.000000)
dp2 r2.x, v0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
add r2.y, r2.x, r2.x
ge r2.y, r2.y, -r2.y
movc r2.yz, r2.yyyy, l(0,2.000000,0.500000,0), l(0,-2.000000,-0.500000,0)
mul r2.x, r2.z, r2.x
frc r2.x, r2.x
mul r2.x, r2.x, r2.y
mad r1.w, r2.x, l(0.500000), r1.w
div r1.yz, r1.yyzy, r1.wwww
div r1.x, |r1.x|, r1.w
ge r2.x, r1.w, l(1.000000)
mov r3.xyzw, r0.xyzw
mov r2.yzw, r0.xxyz
mov r4.xyzw, v2.xyzw
mov r5.w, r0.w
mov r6.xyz, l(1.000000,0,-1,0)
loop 
  breakc_z r6.z
  add r7.xy, -r4.xyxx, r4.zwzz
  mov r8.xyzw, r3.xyzw
  mov r9.xyz, r2.yzwy
  mov r6.w, r5.w
  mov r7.z, r6.x
  mov r7.w, l(1.000000)
  mov r9.w, r2.x
  loop 
    breakc_z r9.w
    lt r10.x, l(0.000000), r7.w
    mul r10.yz, r1.yyzy, r7.wwww
    mov r11.xyzw, r8.xyzw
    mov r12.xyz, r9.xyzx
    mov r12.w, r6.w
    mov r10.w, r7.z
    mov r13.x, l(0)
    mov r13.y, r10.x
    loop 
      breakc_z r13.y
      div r13.z, r13.x, r7.w
      mul r13.w, r13.z, r13.z
      mad r14.x, -r13.z, l(2.000000), l(3.000000)
      mul r13.w, r13.w, r14.x
      mul r13.w, r13.w, l(0.190298)
      mad r13.z, r13.z, l(1.190299), -r13.w
      mad r13.zw, r13.zzzz, r7.xxxy, r4.xxxy
      dp2 r14.x, r13.zwzz, r13.zwzz
      rsq r14.x, r14.x
      mul r13.zw, r13.zzzw, r14.xxxx
      mad r13.zw, r13.zzzw, r10.yyyz, v1.zzzw
      sample_l_indexable(texture2d)(float,float,float,float) r14.xyzw, r13.zwzz, t8.xyzw, s0, l(0.000000)
      mad r13.z, r14.w, l(2.000000), l(-1.000000)
      mad r13.z, -r1.x, r7.w, |r13.z|
      mad_sat r13.z, r13.z, l(1000000.000000), l(1.000000)
      mul r14.xyz, r13.zzzz, r14.xyzx
      add r10.w, r10.w, r13.z
      add r11.xyzw, r11.xyzw, r14.xyzw
      max r12.xyzw, r14.xyzw, r12.xyzw
      add r13.x, r13.x, l(1.000000)
      lt r13.z, r13.x, r7.w
      lt r13.w, r13.x, l(52.000000)
      and r13.y, r13.w, r13.z
    endloop 
    mov r8.xyzw, r11.xyzw
    mov r9.xyz, r12.xyzx
    mov r6.w, r12.w
    mov r7.z, r10.w
    add r7.w, r7.w, l(1.000000)
    ge r10.x, r1.w, r7.w
    lt r10.y, r7.w, l(26.000000)
    and r9.w, r10.y, r10.x
  endloop 
  mov r3.xyzw, r8.xyzw
  mov r2.yzw, r9.xxyz
  mov r5.w, r6.w
  mov r6.x, r7.z
  dp2 r7.x, r4.zwzz, v3.xyxx
  dp2 r7.y, r4.zwzz, v4.xyxx
  iadd r6.y, r6.y, l(1)
  ilt r6.z, r6.y, l(6)
  mov r4.xy, r4.zwzz
  mov r4.zw, r7.xxxy
endloop 
div r0.xyzw, r3.xyzw, r6.xxxx
mov_sat r3.xyz, r0.xyzx
add r3.xyz, -r3.xyzx, l(1.200000, 1.200000, 1.200000, 0.000000)
rcp r3.xyz, r3.xyzx
mul r0.xyz, r0.xyzx, r3.xyzx
mov_sat r3.xyz, r2.yzwy
add r3.xyz, -r3.xyzx, l(1.200000, 1.200000, 1.200000, 0.000000)
rcp r3.xyz, r3.xyzx
mul r5.xyz, r2.yzwy, r3.xyzx
dp3 r1.y, l(0.300000, 0.590000, 0.110000, 0.000000), r5.xyzx
dp3 r1.z, l(0.300000, 0.590000, 0.110000, 0.000000), r0.xyzx
add r1.y, -r1.z, r1.y
max r1.y, r1.y, l(0.000000)
mul r1.y, r1.y, l(0.600000)
mul r1.y, r1.y, r1.y
mul r1.x, r1.x, r1.y
mul r1.x, r1.w, r1.x
min r1.x, r1.x, l(1.000000)
mad r0.xyzw, r5.xyzw, r1.xxxx, r0.xyzw
mul r1.xyz, r0.xyzx, l(1.200000, 1.200000, 1.200000, 0.000000)
add r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
rcp r0.xyz, r0.xyzx
mul o0.xyz, r0.xyzx, r1.xyzx
mov o0.w, r0.w
ret 
// Approximately 123 instruction slots used
