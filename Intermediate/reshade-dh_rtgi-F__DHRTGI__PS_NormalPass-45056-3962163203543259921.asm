//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float frametime;                   // Offset:    0 Size:     4 [unused]
//   int framecount;                    // Offset:    4 Size:     4 [unused]
//   int random;                        // Offset:    8 Size:     4 [unused]
//   bool bDebug;                       // Offset:   12 Size:     4 [unused]
//   float fPeviousDepth;               // Offset:   16 Size:     4 [unused]
//   bool bBrightnessOpacity;           // Offset:   20 Size:     4 [unused]
//   float fDepthMultiplier;            // Offset:   24 Size:     4
//   bool bFrameAccuAuto;               // Offset:   28 Size:     4 [unused]
//   int iFrameAccu;                    // Offset:   32 Size:     4 [unused]
//   float fSkyDepth;                   // Offset:   36 Size:     4 [unused]
//   float fWeaponDepth;                // Offset:   40 Size:     4 [unused]
//   int iRayPreciseHit;                // Offset:   44 Size:     4 [unused]
//   int iRayPreciseHitSteps;           // Offset:   48 Size:     4 [unused]
//   float fRayStepPrecision;           // Offset:   52 Size:     4 [unused]
//   float fRayStepMultiply;            // Offset:   56 Size:     4 [unused]
//   float fRayHitDepthThreshold;       // Offset:   60 Size:     4 [unused]
//   float fRayBounce;                  // Offset:   64 Size:     4 [unused]
//   float fFadePower;                  // Offset:   68 Size:     4 [unused]
//   float fSaturateColor;              // Offset:   72 Size:     4 [unused]
//   float fSaturateColorPower;         // Offset:   76 Size:     4 [unused]
//   float fAOMultiplier;               // Offset:   80 Size:     4 [unused]
//   int iAODistance;                   // Offset:   84 Size:     4 [unused]
//   bool bNormalWeight;                // Offset:   88 Size:     4 [unused]
//   int iSmoothRadius;                 // Offset:   92 Size:     4 [unused]
//   int iSmoothLod;                    // Offset:   96 Size:     4 [unused]
//   float fSmoothPass;                 // Offset:  100 Size:     4 [unused]
//   float fSmoothDepthThreshold;       // Offset:  104 Size:     4 [unused]
//   float fSmoothNormalThreshold;      // Offset:  108 Size:     4 [unused]
//   float fSourceColor;                // Offset:  112 Size:     4 [unused]
//   float fSourceDesat;                // Offset:  116 Size:     4 [unused]
//   float fLightMult;                  // Offset:  120 Size:     4 [unused]
//   float fLightOffset;                // Offset:  124 Size:     4 [unused]
//   float fMaxLight;                   // Offset:  128 Size:     4 [unused]
//   float fLightNormalize;             // Offset:  132 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
add r0.xyzw, v1.xyxy, l(-0.500000, -0.500000, -0.000000, -0.000926)
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t2.yzxw, s0, l(0.000000)
mad r0.w, -r0.z, l(999.000000), l(1000.000000)
div r1.x, r0.z, r0.w
add r2.xyzw, v1.xyxy, l(-0.500000, -0.500926, 0.000521, 0.000000)
mul r1.yz, r1.xxxx, r2.xxyx
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r2.zwzz, t2.yzxw, s0, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t2.yzwx, s0, l(0.000000)
mad r1.w, -r0.w, l(999.000000), l(1000.000000)
div r2.y, r0.w, r1.w
mul r2.xz, r0.yyxy, r2.yyyy
mul r0.x, cb0[1].z, l(1875.000000)
round_z r3.y, r0.x
mov r3.xz, l(1080.000000,0,1920.000000,0)
mul r0.xyw, r2.xyxz, r3.xyxz
mad r1.xyz, -r1.xyzx, r3.yzxy, r0.ywxy
mad r1.w, -r0.z, l(999.000000), l(1000.000000)
div r2.y, r0.z, r1.w
add r4.xy, v1.yxyy, l(-0.500000, -0.499479, 0.000000, 0.000000)
mul r2.xz, r2.yyyy, r4.xxyx
mad r0.xyz, -r2.xyzx, r3.xyzx, r0.xywx
mul r2.xyz, r0.xyzx, r1.xyzx
mad r0.xyz, r1.zxyz, r0.yzxy, -r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mad o0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 29 instruction slots used
