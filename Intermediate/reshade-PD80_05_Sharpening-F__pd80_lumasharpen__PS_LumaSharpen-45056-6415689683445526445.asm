//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool enableShowEdges;              // Offset:    0 Size:     4
//   float BlurSigma;                   // Offset:    4 Size:     4 [unused]
//   float Sharpening;                  // Offset:    8 Size:     4
//   float Threshold;                   // Offset:   12 Size:     4
//   float limiter;                     // Offset:   16 Size:     4
//   bool enable_depth;                 // Offset:   20 Size:     4
//   bool enable_reverse;               // Offset:   24 Size:     4
//   bool display_depth;                // Offset:   28 Size:     4
//   float depthStart;                  // Offset:   32 Size:     4
//   float depthEnd;                    // Offset:   36 Size:     4
//   float depthCurve;                  // Offset:   40 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__pd80_lumasharpen__texGaussian    texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t2.xyzw, s0, l(0.000000)
mad r0.y, -r0.x, l(999.000000), l(1000.000000)
div r0.x, r0.x, r0.y
add r0.x, r0.x, -cb0[2].x
add r0.y, -cb0[2].x, cb0[2].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mul_sat r0.x, r0.y, r0.x
mad r0.y, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.y
log r0.x, r0.x
mul r0.x, r0.x, cb0[2].z
exp r0.x, r0.x
add r0.y, -r0.x, l(1.000000)
movc r0.x, cb0[1].z, r0.y, r0.x
movc r0.y, cb0[1].y, l(1.000000), l(0)
mul r0.z, r0.x, r0.y
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t6.xyzw, s0
add_sat r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t0.xyzw, s0
add_sat r2.xyz, r2.xyzx, r3.xyzx
add r2.xyz, -r2.xyzx, -cb0[0].wwww
add r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul_sat r2.xyz, r2.xyzx, cb0[0].zzzz
add_sat r1.xyz, -r1.xyzx, r3.xyzx
add r1.xyz, r1.xyzx, -cb0[0].wwww
max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul_sat r1.xyz, r1.xyzx, cb0[0].zzzz
add r1.xyz, -r2.xyzx, r1.xyzx
max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r1.xyz, r1.xyzx, cb0[1].xxxx
mad r2.xyz, r0.zzzz, -r1.xyzx, r1.xyzx
add r2.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, -r4.xyzx, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
dp3 r0.z, r2.xzyx, l(0.333333, 0.333333, 0.333334, 0.000000)
dp3 r0.w, r3.xzyx, l(0.333333, 0.333333, 0.333334, 0.000000)
add r0.z, -r0.w, r0.z
add r2.xyz, r0.zzzz, r3.xyzx
min r0.z, r2.y, r2.x
min r0.z, r2.z, r0.z
lt r0.w, r0.z, l(0.000000)
dp3 r1.w, r2.xzyx, l(0.333333, 0.333333, 0.333334, 0.000000)
add r3.xyz, -r1.wwww, r2.xyzx
mul r3.xyz, r1.wwww, r3.xyzx
add r0.z, -r0.z, r1.w
div r3.xyz, r3.xyzx, r0.zzzz
add r3.xyz, r1.wwww, r3.xyzx
movc r3.xyz, r0.wwww, r3.xyzx, r2.xyzx
add r4.xyz, -r1.wwww, r3.xyzx
add r0.z, -r1.w, l(1.000000)
mul r4.xyz, r0.zzzz, r4.xyzx
max r0.z, r2.y, r2.x
max r0.z, r2.z, r0.z
add r0.w, -r1.w, r0.z
lt r0.z, l(1.000000), r0.z
div r2.xyz, r4.xyzx, r0.wwww
add r2.xyz, r1.wwww, r2.xyzx
movc r2.xyz, r0.zzzz, r2.xyzx, r3.xyzx
mad r3.xyz, r1.xyzx, r0.xxxx, -r1.xyzx
mad r0.yzw, r0.yyyy, r3.xxyz, r1.xxyz
movc r0.yzw, cb0[0].xxxx, r0.yyzw, r2.xxyz
movc o0.xyz, cb0[1].wwww, r0.xxxx, r0.yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 66 instruction slots used
