//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float hueMid;                      // Offset:    0 Size:     4
//   float hueRange;                    // Offset:    4 Size:     4
//   float satLimit;                    // Offset:    8 Size:     4
//   float fxcolorMix;                  // Offset:   12 Size:     4
//   bool fxuseColorSat;                // Offset:   16 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
mov_sat r1.xyz, r0.xyzx
dp3 r0.w, r1.xyzx, l(0.212656, 0.715158, 0.072186, 0.000000)
lt r1.w, r1.y, r1.z
mov r2.xy, r1.zyzz
mov r2.zw, l(0,0,-1.000000,0.666667)
mov r3.xy, r2.yxyy
mov r3.zw, l(0,0,0,-0.333333)
movc r2.xyzw, r1.wwww, r2.xyzw, r3.xyzw
lt r1.w, r1.x, r2.x
mov r3.z, r1.x
mov r3.xyw, r2.xwxz
movc r2.xzw, r1.wwww, r3.xxyz, r3.zzwx
min r1.w, r2.y, r2.w
add r1.w, -r1.w, r2.x
add r2.x, -r2.y, r2.w
mad r2.y, r1.w, l(6.000000), l(0.000000)
div r2.x, r2.x, r2.y
add r2.x, r2.z, r2.x
movc r1.w, cb0[1].x, r1.w, l(1.000000)
add r2.y, -cb0[0].y, cb0[0].x
add r2.z, cb0[0].y, cb0[0].x
lt r2.w, r2.y, l(0.000000)
if_nz r2.w
  ge r2.w, |r2.x|, r2.y
  ge r3.x, cb0[0].x, |r2.x|
  and r2.w, r2.w, r3.x
  if_nz r2.w
    add r2.w, -r2.y, |r2.x|
    add r3.x, -r2.y, cb0[0].x
    div_sat r2.w, r2.w, r3.x
    mul r3.x, r2.w, r2.w
    mul r3.x, r2.w, r3.x
    mad r3.y, r2.w, l(6.000000), l(-15.000000)
    mad r2.w, r2.w, r3.y, l(10.000000)
    mul r2.w, r2.w, r3.x
    mul r3.x, r1.w, cb0[0].z
    mul r2.w, r2.w, r3.x
    add r3.xyz, -r0.wwww, r1.xyzx
    mad r3.xyz, r2.wwww, r3.xyzx, r0.wwww
  else 
    add r2.w, r2.y, l(1.000000)
    add r3.w, cb0[0].x, l(1.000000)
    ge r4.x, |r2.x|, cb0[0].x
    ge r4.y, r2.z, |r2.x|
    and r4.x, r4.y, r4.x
    add r4.y, |r2.x|, -cb0[0].x
    div_sat r4.y, r4.y, cb0[0].y
    mul r4.z, r4.y, r4.y
    mul r4.z, r4.y, r4.z
    mad r4.w, r4.y, l(6.000000), l(-15.000000)
    mad r4.y, r4.y, r4.w, l(10.000000)
    mad r4.y, -r4.z, r4.y, l(1.000000)
    mul r4.z, r1.w, cb0[0].z
    mul r4.y, r4.z, r4.y
    add r5.xyz, -r0.wwww, r1.xyzx
    mad r6.xyz, r4.yyyy, r5.xyzx, r0.wwww
    ge r4.y, |r2.x|, r2.w
    ge r4.w, r3.w, |r2.x|
    and r4.y, r4.w, r4.y
    add r4.w, -r2.w, |r2.x|
    add r2.w, -r2.w, r3.w
    div_sat r2.w, r4.w, r2.w
    mul r3.w, r2.w, r2.w
    mul r3.w, r2.w, r3.w
    mad r4.w, r2.w, l(6.000000), l(-15.000000)
    mad r2.w, r2.w, r4.w, l(10.000000)
    mul r2.w, r2.w, r3.w
    mul r2.w, r4.z, r2.w
    mad r5.xyz, r2.wwww, r5.xyzx, r0.wwww
    movc r4.yzw, r4.yyyy, r5.xxyz, r0.wwww
    movc r3.xyz, r4.xxxx, r6.xyzx, r4.yzwy
  endif 
else 
  lt r2.w, l(1.000000), r2.z
  if_nz r2.w
    ge r2.w, |r2.x|, r2.y
    ge r3.w, cb0[0].x, |r2.x|
    and r2.w, r2.w, r3.w
    if_nz r2.w
      add r2.w, -r2.y, |r2.x|
      add r3.w, -r2.y, cb0[0].x
      div_sat r2.w, r2.w, r3.w
      mul r3.w, r2.w, r2.w
      mul r3.w, r2.w, r3.w
      mad r4.x, r2.w, l(6.000000), l(-15.000000)
      mad r2.w, r2.w, r4.x, l(10.000000)
      mul r2.w, r2.w, r3.w
      mul r3.w, r1.w, cb0[0].z
      mul r2.w, r2.w, r3.w
      add r4.xyz, -r0.wwww, r1.xyzx
      mad r3.xyz, r2.wwww, r4.xyzx, r0.wwww
    else 
      add r2.w, -cb0[0].x, l(1.000000)
      add r3.w, r2.z, l(-1.000000)
      ge r4.x, |r2.x|, cb0[0].x
      ge r4.y, r2.z, |r2.x|
      and r4.x, r4.y, r4.x
      add r4.y, |r2.x|, -cb0[0].x
      div_sat r4.y, r4.y, cb0[0].y
      mul r4.z, r4.y, r4.y
      mul r4.z, r4.y, r4.z
      mad r4.w, r4.y, l(6.000000), l(-15.000000)
      mad r4.y, r4.y, r4.w, l(10.000000)
      mad r4.y, -r4.z, r4.y, l(1.000000)
      mul r4.z, r1.w, cb0[0].z
      mul r4.y, r4.z, r4.y
      add r5.xyz, -r0.wwww, r1.xyzx
      mad r6.xyz, r4.yyyy, r5.xyzx, r0.wwww
      ge r4.y, |r2.x|, -r2.w
      ge r4.w, r3.w, |r2.x|
      and r4.y, r4.w, r4.y
      add r4.w, r2.w, |r2.x|
      add r2.w, r2.w, r3.w
      div_sat r2.w, r4.w, r2.w
      mul r3.w, r2.w, r2.w
      mul r3.w, r2.w, r3.w
      mad r4.w, r2.w, l(6.000000), l(-15.000000)
      mad r2.w, r2.w, r4.w, l(10.000000)
      mad r2.w, -r3.w, r2.w, l(1.000000)
      mul r2.w, r4.z, r2.w
      mad r5.xyz, r2.wwww, r5.xyzx, r0.wwww
      movc r4.yzw, r4.yyyy, r5.xxyz, r0.wwww
      movc r3.xyz, r4.xxxx, r6.xyzx, r4.yzwy
    endif 
  else 
    ge r2.w, |r2.x|, r2.y
    ge r3.w, cb0[0].x, |r2.x|
    and r2.w, r2.w, r3.w
    add r3.w, -r2.y, |r2.x|
    add r2.y, -r2.y, cb0[0].x
    div_sat r2.y, r3.w, r2.y
    mul r3.w, r2.y, r2.y
    mul r3.w, r2.y, r3.w
    mad r4.x, r2.y, l(6.000000), l(-15.000000)
    mad r2.y, r2.y, r4.x, l(10.000000)
    mul r2.y, r2.y, r3.w
    mul r1.w, r1.w, cb0[0].z
    mul r2.y, r1.w, r2.y
    add r1.xyz, -r0.wwww, r1.xyzx
    mad r4.xyz, r2.yyyy, r1.xyzx, r0.wwww
    lt r2.y, cb0[0].x, |r2.x|
    ge r2.z, r2.z, |r2.x|
    and r2.y, r2.z, r2.y
    add r2.x, |r2.x|, -cb0[0].x
    div_sat r2.x, r2.x, cb0[0].y
    mul r2.z, r2.x, r2.x
    mul r2.z, r2.x, r2.z
    mad r3.w, r2.x, l(6.000000), l(-15.000000)
    mad r2.x, r2.x, r3.w, l(10.000000)
    mad r2.x, -r2.z, r2.x, l(1.000000)
    mul r1.w, r1.w, r2.x
    mad r1.xyz, r1.wwww, r1.xyzx, r0.wwww
    movc r1.xyz, r2.yyyy, r1.xyzx, r0.wwww
    movc r3.xyz, r2.wwww, r4.xyzx, r1.xyzx
  endif 
endif 
add r1.xyz, -r0.xyzx, r3.xyzx
mad o0.xyz, cb0[0].wwww, r1.xyzx, r0.xyzx
ret 
// Approximately 160 instruction slots used
