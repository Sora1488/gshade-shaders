//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int VRS_FrameCount;                // Offset:    0 Size:     4
//   float TransmissionMultiplier;      // Offset:    4 Size:     4
//   float DepthMultiplier;             // Offset:    8 Size:     4
//   float VarianceCutoff;              // Offset:   12 Size:     4
//   bool UseVRS;                       // Offset:   16 Size:     4
//   int Debug;                         // Offset:   20 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__VRS                          texture  float4          2d             t4      1 
// __V__VRSUpdated                   texture  float4          2d             t6      1 
// __V__ReVeilCS__BackBuffer         texture  float4          2d             t8      1 
// __V__ReVeilCS__Mean               texture  float4          2d            t10      1 
// __V__ReVeilCS__Variance           texture  float4          2d            t12      1 
// __V__ReVeilCS__Maximum            texture  float4          2d            t20      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   x           0   TARGET   float   x   
// SV_TARGET                1   x           1   TARGET   float   x   
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xy
dcl_output o0.x
dcl_output o1.x
dcl_temps 2
ld_indexable(texture2d)(float,float,float,float) r0.x, l(0, 0, 0, 0), t6.xyzw
ieq r0.y, r0.x, cb0[0].x
iadd r0.z, cb0[0].x, l(-1)
ieq r0.x, r0.z, r0.x
or r0.x, r0.x, r0.y
not r0.x, r0.x
ieq r0.yz, cb0[1].xxyx, l(0, 0, 0, 0)
or r0.x, r0.y, r0.x
if_nz r0.x
  mov r0.x, l(5)
else 
  mul r0.yw, v1.xxxy, l(0.000000, 240.000000, 0.000000, 135.000000)
  ftoi r1.xy, r0.ywyy
  mov r1.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t4.xyzw
  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
  lt r0.y, r1.z, cb0[0].w
  lt r0.w, r1.y, r1.x
  lt r1.xy, cb0[0].wwww, r1.yxyy
  movc r1.xy, r1.xyxx, l(0,0,0,0), l(1,4,0,0)
  movc r0.w, r0.w, r1.x, r1.y
  movc r0.x, r0.y, l(5), r0.w
endif 
ieq r0.x, r0.x, l(0)
and r0.x, r0.z, r0.x
if_nz r0.x
  mov o0.x, l(1.000000)
  mov o1.x, l(0)
else 
  sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t10.xyzw, s0
  sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t12.yxzw, s0
  sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t12.yzxw, s0, l(8.000000)
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t8.xyzw, s0
  min r0.w, r1.y, r1.x
  min r0.w, r1.z, r0.w
  sample_l_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t20.xyzw, s0, l(1.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r1.y, v1.xyxx, t20.yxzw, s0, l(2.000000)
  add r1.x, r1.y, r1.x
  sample_l_indexable(texture2d)(float,float,float,float) r1.y, v1.xyxx, t20.yxzw, s0, l(3.000000)
  add r1.x, r1.y, r1.x
  sample_l_indexable(texture2d)(float,float,float,float) r1.y, v1.xyxx, t20.yxzw, s0, l(4.000000)
  add r1.x, r1.y, r1.x
  mul r1.x, r1.x, l(0.250000)
  add r0.z, -r0.z, r0.y
  max r0.z, r0.z, l(0.000000)
  div r0.y, r0.z, r0.y
  add r0.z, -r0.x, r0.w
  mul_sat r0.y, r0.z, r0.y
  add_sat r0.x, r0.y, r0.x
  max r0.y, r1.x, l(0.050000)
  min r0.y, r0.y, l(1.000000)
  mul r0.x, r0.w, r0.x
  div r0.x, r0.x, r0.y
  add r0.x, -r0.x, l(1.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t2.yzxw, s0, l(0.000000)
  mad r0.w, -r0.z, l(999.000000), l(1000.000000)
  div r0.z, r0.z, r0.w
  mul r0.z, r0.z, cb0[0].z
  mul r0.z, r0.z, l(1.442695)
  exp r0.z, r0.z
  mul r0.x, r0.z, r0.x
  mul r0.z, cb0[0].y, l(1.442695)
  exp r0.z, r0.z
  mul o0.x, r0.z, r0.x
  mov o1.x, r0.y
endif 
ret 
// Approximately 67 instruction slots used
