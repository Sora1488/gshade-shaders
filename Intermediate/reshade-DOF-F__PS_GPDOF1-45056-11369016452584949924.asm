//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__texHDR1                      texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mad r1.x, r0.w, l(2.000000), l(-1.000000)
add_sat r1.x, |r1.x|, l(-0.100000)
mul r1.xy, r1.xxxx, l(15.000000, 4.687500, 0.000000, 0.000000)
lt r1.z, r0.w, l(0.500000)
movc r1.x, r1.z, r1.y, r1.x
mad r1.xyzw, r1.xxxx, l(-0.000078, -0.000139, 0.000078, 0.000139), v1.xyxy
sample_indexable(texture2d)(float,float,float,float) r1.xy, r1.xyxx, t0.xwyz, s0
sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t0.xyzw, s0
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul_sat r1.yw, r1.yyyw, r2.xxxx
add r1.xz, -r0.xxzx, r1.xxzx
mad r2.x, r1.y, l(-2.000000), l(3.000000)
mul r1.y, r1.y, r1.y
mul r1.y, r1.y, r2.x
mad o0.x, r1.y, r1.x, r0.x
mad r0.x, r1.w, l(-2.000000), l(3.000000)
mul r1.x, r1.w, r1.w
mul r0.x, r0.x, r1.x
mad o0.z, r0.x, r1.z, r0.z
mov o0.yw, r0.yyyw
ret 
// Approximately 22 instruction slots used
