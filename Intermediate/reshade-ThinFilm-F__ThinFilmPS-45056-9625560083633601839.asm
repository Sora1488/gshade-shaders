//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int FOV;                           // Offset:    0 Size:     4
//   float FarPlane;                    // Offset:    4 Size:     4
//   bool Skip4Background;              // Offset:    8 Size:     4
//   int thick;                         // Offset:   12 Size:     4
//   float nmedium;                     // Offset:   16 Size:     4
//   float nfilm;                       // Offset:   20 Size:     4
//   float ninternal;                   // Offset:   24 Size:     4
//   int BlendingMode;                  // Offset:   28 Size:     4
//   bool LumaBlending;                 // Offset:   32 Size:     4
//   float BlendingAmount;              // Offset:   36 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 7
if_nz cb0[0].z
  sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t2.xyzw, s0, l(0.000000)
  add r0.y, cb0[0].y, l(-1.000000)
  mad r0.y, -r0.x, r0.y, cb0[0].y
  div r0.x, r0.x, r0.y
  eq r0.x, r0.x, l(1.000000)
  if_nz r0.x
    sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
    mov o0.xyz, r0.xyzx
    ret 
  endif 
endif 
add r0.xyzw, v1.xyxy, l(-0.000000, -0.000926, 0.000521, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t2.xyzw, s0, l(0.000000)
add r1.y, cb0[0].y, l(-1.000000)
mad r1.z, -r1.x, r1.y, cb0[0].y
div r1.x, r1.x, r1.z
add r2.xz, v1.yyxy, l(-0.500000, 0.000000, -0.500000, 0.000000)
mov r2.y, l(1.000000)
mul r1.xzw, r1.xxxx, r2.xxyz
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s0, l(0.000000)
mad r0.y, -r0.x, r1.y, cb0[0].y
div r0.x, r0.x, r0.y
add r2.yz, v1.xxyx, l(0.000000, -0.500000, -0.500926, 0.000000)
mov r2.x, l(1.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, r1.y, cb0[0].y
div r0.y, r0.y, r0.z
add r3.xz, v1.yyxy, l(-0.500000, 0.000000, -0.499479, 0.000000)
mov r3.y, l(1.000000)
mad r0.xzw, -r2.xxyz, r0.xxxx, r1.zzwx
mad r1.xyz, -r3.xyzx, r0.yyyy, r1.xzwx
mul r2.xyz, r0.xzwx, r1.xyzx
mad r0.xyz, r0.wxzw, r1.yzxy, -r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
itof r0.w, cb0[0].x
mul r0.w, r0.w, l(0.008727)
sincos r1.x, r2.x, r0.w
div r0.w, r1.x, r2.x
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mad r1.xy, v1.xyxx, l(2.000000, 1.125000, 0.000000, 0.000000), l(-1.000000, -0.562500, 0.000000, 0.000000)
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 1.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp3 r0.x, r1.xyzx, r0.xyzx
div r0.y, cb0[1].x, cb0[1].y
mul r0.y, r0.y, r0.y
mad r0.z, -|r0.x|, |r0.x|, l(1.000000)
mul r0.w, r0.z, r0.y
ge r0.w, l(1.000000), r0.w
if_nz r0.w
  itof r0.w, cb0[0].w
  lt r1.xy, cb0[1].yyyy, cb0[1].xzxx
  and r1.xy, r1.xyxx, l(0x40490fdb, 0x40490fdb, 0, 0)
  add r1.x, r1.y, r1.x
  div r1.y, cb0[1].x, cb0[1].z
  mul r1.y, r1.y, r1.y
  mul r1.z, r0.z, r1.y
  ge r1.z, l(1.000000), r1.z
  if_nz r1.z
    mad r1.w, -r0.y, r0.z, l(1.000000)
    sqrt r1.w, r1.w
    mad r2.x, -r1.y, r0.z, l(1.000000)
    sqrt r2.x, r2.x
    mul r2.yz, |r0.xxxx|, cb0[1].xxyx
    mad r3.xy, cb0[1].yxyy, r1.wwww, -r2.yzyy
    mad r2.zw, cb0[1].yyyx, r1.wwww, r2.yyyz
    div r3.xy, r3.xyxx, r2.zwzz
    mul r3.zw, r2.xxxx, cb0[1].zzzy
    mad r4.xy, cb0[1].yzyy, r1.wwww, -r3.zwzz
    mad r4.zw, cb0[1].yyyz, r1.wwww, r3.zzzw
    div r4.xy, r4.xyxx, r4.zwzz
    mul r3.xy, r3.xyxx, r4.xyxx
    add r2.x, r2.y, r2.y
    div r2.xz, r2.xxxx, r2.zzwz
    add r2.w, cb0[1].y, cb0[1].y
    mul r3.w, r1.w, r2.w
    div r4.xy, r3.wwww, r4.zwzz
    mul r2.xz, r2.xxzx, r4.xxyx
    mul r2.w, r0.w, r2.w
    mul r1.w, r1.w, r2.w
    mad r1.w, r1.w, l(0.009666), r1.x
    mul r2.xz, r2.xxzx, r2.xxzx
    mul r2.w, r3.x, r3.x
    add r3.x, r3.x, r3.x
    sincos null, r1.w, r1.w
    mad r2.w, -r3.x, r1.w, r2.w
    add r2.w, r2.w, l(1.000000)
    div r2.x, r2.x, r2.w
    dp2 r1.w, r1.wwww, r3.yyyy
    mad r1.w, r3.y, r3.y, -r1.w
    add r1.w, r1.w, l(1.000000)
    div r1.w, r2.z, r1.w
    div r2.y, r3.z, r2.y
    add r1.w, r1.w, r2.x
    mul r1.w, r1.w, r2.y
    mad r2.x, -r1.w, l(0.500000), l(1.000000)
  else 
    mov r2.x, l(1.000000)
  endif 
  if_nz r1.z
    mad r1.w, -r0.y, r0.z, l(1.000000)
    sqrt r1.w, r1.w
    mad r2.w, -r1.y, r0.z, l(1.000000)
    sqrt r2.w, r2.w
    mul r3.xy, |r0.xxxx|, cb0[1].xyxx
    mad r3.zw, cb0[1].yyyx, r1.wwww, -r3.xxxy
    mad r4.xy, cb0[1].yxyy, r1.wwww, r3.xyxx
    div r3.yz, r3.zzwz, r4.xxyx
    mul r4.zw, r2.wwww, cb0[1].zzzy
    mad r5.xy, cb0[1].yzyy, r1.wwww, -r4.zwzz
    mad r5.zw, cb0[1].yyyz, r1.wwww, r4.zzzw
    div r5.xy, r5.xyxx, r5.zwzz
    mul r3.yz, r3.yyzy, r5.xxyx
    add r2.w, r3.x, r3.x
    div r4.xy, r2.wwww, r4.xyxx
    add r2.w, cb0[1].y, cb0[1].y
    mul r3.w, r1.w, r2.w
    div r5.xy, r3.wwww, r5.zwzz
    mul r4.xy, r4.xyxx, r5.xyxx
    mul r2.w, r0.w, r2.w
    mul r1.w, r1.w, r2.w
    mad r1.w, r1.w, l(0.012320), r1.x
    mul r4.xy, r4.xyxx, r4.xyxx
    mul r2.w, r3.y, r3.y
    add r3.y, r3.y, r3.y
    sincos null, r1.w, r1.w
    mad r2.w, -r3.y, r1.w, r2.w
    add r2.w, r2.w, l(1.000000)
    div r2.w, r4.x, r2.w
    dp2 r1.w, r1.wwww, r3.zzzz
    mad r1.w, r3.z, r3.z, -r1.w
    add r1.w, r1.w, l(1.000000)
    div r1.w, r4.y, r1.w
    div r3.x, r4.z, r3.x
    add r1.w, r1.w, r2.w
    mul r1.w, r1.w, r3.x
    mad r2.y, -r1.w, l(0.500000), l(1.000000)
  else 
    mov r2.y, l(1.000000)
  endif 
  if_nz r1.z
    mad r0.y, -r0.y, r0.z, l(1.000000)
    mad r0.z, -r1.y, r0.z, l(1.000000)
    sqrt r0.yz, r0.yyzy
    mul r1.yz, |r0.xxxx|, cb0[1].xxyx
    mad r3.xy, cb0[1].yxyy, r0.yyyy, -r1.yzyy
    mad r1.zw, cb0[1].yyyx, r0.yyyy, r1.yyyz
    div r3.xy, r3.xyxx, r1.zwzz
    mul r0.xz, r0.zzzz, cb0[1].zzyz
    mad r3.zw, cb0[1].yyyz, r0.yyyy, -r0.xxxz
    mad r4.xy, cb0[1].yzyy, r0.yyyy, r0.xzxx
    div r3.zw, r3.zzzw, r4.xxxy
    mul r3.xy, r3.zwzz, r3.xyxx
    add r0.z, r1.y, r1.y
    div r1.zw, r0.zzzz, r1.zzzw
    add r0.z, cb0[1].y, cb0[1].y
    mul r2.w, r0.y, r0.z
    div r3.zw, r2.wwww, r4.xxxy
    mul r1.zw, r1.zzzw, r3.zzzw
    mul r0.z, r0.w, r0.z
    mul r0.y, r0.y, r0.z
    mad r0.y, r0.y, l(0.013228), r1.x
    mul r0.zw, r1.zzzw, r1.zzzw
    mul r1.x, r3.x, r3.x
    add r1.z, r3.x, r3.x
    sincos null, r0.y, r0.y
    mad r1.x, -r1.z, r0.y, r1.x
    add r1.x, r1.x, l(1.000000)
    dp2 r0.y, r0.yyyy, r3.yyyy
    mad r0.y, r3.y, r3.y, -r0.y
    add r0.y, r0.y, l(1.000000)
    div r0.y, r0.w, r0.y
    div r0.xz, r0.xxzx, r1.yyxy
    add r0.y, r0.y, r0.z
    mul r0.x, r0.y, r0.x
    mad r2.z, -r0.x, l(0.500000), l(1.000000)
  else 
    mov r2.z, l(1.000000)
  endif 
else 
  mov r2.xyz, l(1.000000,1.000000,1.000000,0)
endif 
max r0.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
eq r0.w, cb0[2].y, l(1.000000)
ieq r1.w, cb0[1].w, l(0)
and r1.w, r0.w, r1.w
ieq r2.x, cb0[2].x, l(0)
and r1.w, r1.w, r2.x
if_nz r1.w
  mov o0.xyz, r1.xyzx
  ret 
endif 
sample_indexable(texture2d)(float,float,float,float) r2.yzw, v1.xyxx, t0.wxyz, s0
switch cb0[1].w
  case l(1)
  mul r1.xyz, r1.xyzx, r2.yzwy
  break 
  case l(2)
  add r3.xyz, r1.xyzx, r2.yzwy
  mad r1.xyz, -r1.xyzx, r2.yzwy, r3.xyzx
  break 
  case l(3)
  max r3.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  max r4.xyz, r2.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
  min r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  min r5.xyz, r2.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
  add r6.xyz, r3.xyzx, r4.xyzx
  mad r3.xyz, -r3.xyzx, r4.xyzx, r6.xyzx
  mad r0.xyz, r0.xyzx, r5.xyzx, r3.xyzx
  mad r1.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.500000, -1.500000, -1.500000, 0.000000)
  break 
  case l(4)
  mul r0.xyz, r1.xyzx, r1.xyzx
  mul r3.xyz, r1.xyzx, r2.yzwy
  mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r0.xyzx
  mul r0.xyz, r0.xyzx, r2.yzwy
  mad r1.xyz, -r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r3.xyzx
  break 
  default 
  break 
endswitch 
and r0.x, r0.w, r2.x
if_nz r0.x
  mov o0.xyz, r1.xyzx
  ret 
else 
  if_nz cb0[2].x
    dp3 r0.x, l(0.212600, 0.715200, 0.072200, 0.000000), r2.yzwy
    mul r0.x, r0.x, cb0[2].y
    add r0.yzw, -r2.yyzw, r1.xxyz
    mad o0.xyz, r0.xxxx, r0.yzwy, r2.yzwy
    ret 
  endif 
endif 
add r0.xyz, -r2.yzwy, r1.xyzx
mad o0.xyz, cb0[2].yyyy, r0.xyzx, r2.yzwy
ret 
// Approximately 240 instruction slots used
