//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool preserve_luma;                // Offset:    0 Size:     4
//   int separation_mode;               // Offset:    4 Size:     4
//   float s_RedShift;                  // Offset:    8 Size:     4
//   float s_GreenShift;                // Offset:   12 Size:     4
//   float s_BlueShift;                 // Offset:   16 Size:     4
//   float m_RedShift;                  // Offset:   20 Size:     4
//   float m_GreenShift;                // Offset:   24 Size:     4
//   float m_BlueShift;                 // Offset:   28 Size:     4
//   float h_RedShift;                  // Offset:   32 Size:     4
//   float h_GreenShift;                // Offset:   36 Size:     4
//   float h_BlueShift;                 // Offset:   40 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 9
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
mov_sat r0.xyz, r0.xyzx
dp3 r0.w, r0.xzyx, l(0.333333, 0.333333, 0.333334, 0.000000)
switch cb0[0].y
  case l(0)
  mad r3.xyz, -r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
  max r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  mul r4.xyz, r3.xyzx, r3.xyzx
  mad r3.xyz, -r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
  mul r1.xyz, r3.xyzx, r4.xyzx
  add r3.xyz, r0.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  add r3.xyz, r3.xyzx, r3.xyzx
  max r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  mul r4.xyz, r3.xyzx, r3.xyzx
  mad r3.xyz, -r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
  mul r2.xyz, r3.xyzx, r4.xyzx
  break 
  case l(1)
  add r3.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r3.xyzx
  mul r1.xyz, r3.xyzx, r3.xyzx
  mul r3.xyz, r0.xyzx, r0.xyzx
  mul r2.xyz, r3.xyzx, r3.xyzx
  break 
  default 
  mov r1.xyz, l(0,0,0,0)
  mov r2.xyz, l(0,0,0,0)
  break 
endswitch 
mov r3.xy, cb0[0].zwzz
mov r3.z, cb0[1].x
lt r4.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r3.xyzx
mul r5.xyz, r3.xyzx, l(0.701000, 0.413000, 0.886000, 0.000000)
mul r6.xyz, |r3.xyzx|, l(0.649500, 0.793500, 0.557000, 0.000000)
movc r4.xyz, r4.xyzx, r5.xyzx, r6.xyzx
lt r5.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[1].yzwy
mul r6.xyz, cb0[1].yzwy, l(0.701000, 0.413000, 0.886000, 0.000000)
mul r7.xyz, |cb0[1].yzwy|, l(0.649500, 0.793500, 0.557000, 0.000000)
movc r5.xyz, r5.xyzx, r6.xyzx, r7.xyzx
lt r6.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[2].xyzx
mul r7.xyz, cb0[2].xyzx, l(0.701000, 0.413000, 0.886000, 0.000000)
mul r8.xyz, |cb0[2].xyzx|, l(0.649500, 0.793500, 0.557000, 0.000000)
movc r6.xyz, r6.xyzx, r7.xyzx, r8.xyzx
movc r4.xyz, cb0[0].xxxx, r4.xyzx, l(1.000000,1.000000,1.000000,0)
movc r5.xyz, cb0[0].xxxx, r5.xyzx, l(1.000000,1.000000,1.000000,0)
movc r6.xyz, cb0[0].xxxx, r6.xyzx, l(1.000000,1.000000,1.000000,0)
add r7.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r7.xyz, -r2.xyzx, r7.xyzx
max r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r6.xyz, r6.xyzx, cb0[2].xyzx
add r0.w, -r0.w, l(1.000000)
mul r6.xyz, r0.wwww, r6.xyzx
mul r2.xyz, r2.xyzx, r6.xyzx
mul r1.xyz, r1.xyzx, r3.xyzx
mul r3.xyz, r7.xyzx, cb0[1].yzwy
mul r3.xyz, r5.xyzx, r3.xyzx
mad r1.xyz, r1.xyzx, r4.xyzx, r3.xyzx
mul r1.xyz, r0.xyzx, r1.xyzx
add r3.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r1.xyz, r1.xyzx, r3.xyzx, r2.xyzx
add_sat o0.xyz, r0.xyzx, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 63 instruction slots used
