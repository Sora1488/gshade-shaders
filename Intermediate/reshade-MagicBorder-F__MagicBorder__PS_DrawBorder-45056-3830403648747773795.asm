//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xy          2     NONE   float   xy  
// TEXCOORD                 3     zw        2     NONE   float     zw
// TEXCOORD                 4   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xy
dcl_input_ps linear v2.zw
dcl_input_ps linear v3.xy
dcl_output o0.xyzw
dcl_temps 3
add r0.xy, -v2.xyxx, v2.zwzz
add r0.zw, v1.yyyy, -v2.yyyw
mul r0.x, r0.z, r0.x
div r0.x, r0.x, r0.y
add r0.x, r0.x, v2.x
lt r0.x, v1.x, r0.x
lt r0.yz, v2.wwyw, v1.yyyy
ge r1.xy, v2.ywyy, v1.yyyy
and r1.zw, r0.yyyz, r1.xxxy
or r1.z, r1.w, r1.z
and r0.x, r0.x, r1.z
add r1.z, -v1.w, v1.y
add r2.xy, -v1.zwzz, v2.xyxx
mul r1.z, r1.z, r2.x
div r1.z, r1.z, r2.y
add r1.z, r1.z, v1.z
lt r1.z, v1.x, r1.z
ge r1.w, v1.w, v1.y
and r0.z, r0.z, r1.w
lt r2.x, v1.w, v1.y
and r1.x, r1.x, r2.x
or r0.z, r0.z, r1.x
and r0.z, r1.z, r0.z
not r1.x, r0.z
movc r0.x, r0.x, r1.x, r0.z
not r0.z, r0.x
add r1.xz, -v2.zzwz, v3.xxyx
mul r0.w, r0.w, r1.x
div r0.w, r0.w, r1.z
add r0.w, r0.w, v2.z
lt r0.w, v1.x, r0.w
lt r1.x, v3.y, v1.y
and r1.y, r1.x, r1.y
and r1.x, r1.w, r1.x
ge r1.z, v3.y, v1.y
and r0.y, r0.y, r1.z
and r1.z, r2.x, r1.z
or r1.x, r1.x, r1.z
or r0.y, r0.y, r1.y
and r0.y, r0.w, r0.y
movc r0.x, r0.y, r0.z, r0.x
not r0.y, r0.x
add r1.yzw, v1.zzyw, -v3.xxyy
mul r0.z, r1.z, r1.y
div r0.z, r0.z, r1.w
add r0.z, r0.z, v3.x
lt r0.z, v1.x, r0.z
and r0.z, r0.z, r1.x
movc r0.x, r0.z, r0.y, r0.x
movc r0.xyzw, r0.xxxx, l(0.700000,0.700000,0.700000,1.000000), l(1.000000,1.000000,1.000000,1.000000)
dp2 r1.x, -v1.xyxx, -v1.xyxx
sqrt r1.x, r1.x
add r2.xyzw, -v1.xyxy, l(1.000000, 0.000000, 1.000000, 1.000000)
dp2 r1.y, r2.xyxx, r2.xyxx
dp2 r1.z, r2.zwzz, r2.zwzz
sqrt r1.yz, r1.yyzy
add r1.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r1.w, r1.y, l(0.001000)
add r1.y, r1.y, r1.x
mad r1.x, r1.x, l(0.001000), r1.w
mad r1.x, r1.z, l(0.001000), r1.x
add r1.y, r1.z, r1.y
add r1.zw, -v1.xxxy, l(0.000000, 0.000000, 0.000000, 1.000000)
dp2 r1.z, r1.zwzz, r1.zwzz
sqrt r1.z, r1.z
add r1.z, -r1.z, l(1.000000)
mad r1.x, r1.z, l(0.001000), r1.x
add r1.y, r1.z, r1.y
div_sat r1.x, r1.x, r1.y
sample_l_indexable(texture2d)(float,float,float,float) r1.y, v1.xyxx, t2.yxzw, s0, l(0.000000)
mad r1.z, -r1.y, l(999.000000), l(1000.000000)
div r1.y, r1.y, r1.z
lt r1.x, r1.x, r1.y
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0
movc o0.xyzw, r1.xxxx, r0.xyzw, r2.xyzw
ret 
// Approximately 76 instruction slots used
