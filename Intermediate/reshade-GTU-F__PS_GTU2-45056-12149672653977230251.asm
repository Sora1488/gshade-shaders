//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float texture_sizeX;               // Offset:    0 Size:     4
//   float texture_sizeY;               // Offset:    4 Size:     4 [unused]
//   float video_sizeX;                 // Offset:    8 Size:     4
//   float video_sizeY;                 // Offset:   12 Size:     4 [unused]
//   bool compositeConnection;          // Offset:   16 Size:     4
//   bool noScanlines;                  // Offset:   20 Size:     4 [unused]
//   float signalResolution;            // Offset:   24 Size:     4
//   float signalResolutionI;           // Offset:   28 Size:     4
//   float signalResolutionQ;           // Offset:   32 Size:     4
//   float tvVerticalResolution;        // Offset:   36 Size:     4 [unused]
//   float blackLevel;                  // Offset:   40 Size:     4 [unused]
//   float contrast;                    // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__target0_gtu                  texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
mad r0.x, v1.x, cb0[0].x, l(-0.500000)
frc r0.x, r0.x
min r0.y, cb0[1].w, cb0[1].z
min r0.y, r0.y, cb0[2].x
div r0.y, cb0[0].z, r0.y
add r0.y, r0.y, l(0.500000)
div r0.z, cb0[0].z, cb0[1].z
add r0.z, r0.z, l(0.500000)
round_pi r0.yz, r0.yyzy
movc r0.y, cb0[1].x, r0.y, r0.z
if_nz cb0[1].x
  add r0.z, r0.y, l(2.000000)
  lt r0.w, -r0.y, r0.z
  div r1.xy, cb0[1].zwzz, cb0[0].zzzz
  mul r1.zw, r1.xxxy, l(0.000000, 0.000000, 3.141593, 3.141593)
  div r2.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r1.xyxx
  div r1.xy, l(-1.000000, -1.000000, 0.000000, 0.000000), r1.xyxx
  div r2.z, cb0[2].x, cb0[0].z
  mul r2.w, r2.z, l(3.141593)
  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
  div r2.z, l(-1.000000), r2.z
  mov r4.y, v1.y
  mov r3.yzw, l(0,0,0,0)
  mov r4.z, -r0.y
  mov r4.w, r0.w
  loop 
    breakc_z r4.w
    add r5.x, r0.x, -r4.z
    div r5.y, r5.x, cb0[0].x
    add r4.x, -r5.y, v1.x
    sample_l_indexable(texture2d)(float,float,float,float) r5.yzw, r4.xyxx, t4.wxyz, s0, l(0.000000)
    add r6.xy, |r5.xxxx|, l(0.500000, -0.500000, 0.000000, 0.000000)
    min r6.zw, r2.xxxy, r6.xxxx
    mul r7.xy, r1.zwzz, r6.zwzz
    sincos r7.xy, null, r7.xyxx
    mad r6.zw, r1.zzzw, r6.zzzw, r7.xxxy
    max r7.xy, r1.xyxx, r6.yyyy
    min r7.xy, r2.xyxx, r7.xyxx
    mul r7.zw, r1.zzzw, r7.xxxy
    mad r6.zw, -r1.zzzw, r7.xxxy, r6.zzzw
    sincos r7.xy, null, -r7.zwzz
    add r6.zw, r6.zzzw, r7.xxxy
    mul r5.xy, r5.yzyy, r6.zwzz
    mul r5.xy, r5.xyxx, l(0.159155, 0.159155, 0.000000, 0.000000)
    min r4.x, r3.x, r6.x
    mul r6.x, r2.w, r4.x
    sincos r6.x, null, r6.x
    mad r4.x, r2.w, r4.x, r6.x
    max r6.x, r2.z, r6.y
    min r6.x, r3.x, r6.x
    mul r6.y, r2.w, r6.x
    mad r4.x, -r2.w, r6.x, r4.x
    sincos r6.x, null, -r6.y
    add r4.x, r4.x, r6.x
    mul r4.x, r5.w, r4.x
    mul r5.z, r4.x, l(0.159155)
    add r3.yzw, r3.yyzw, r5.xxyz
    add r4.z, r4.z, l(1.000000)
    lt r4.w, r4.z, r0.z
  endloop 
else 
  add r0.z, r0.y, l(2.000000)
  lt r0.w, -r0.y, r0.z
  div r1.x, cb0[1].z, cb0[0].z
  mul r1.y, r1.x, l(3.141593)
  div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
  div r1.x, l(-1.000000), r1.x
  mov r2.y, v1.y
  mov r3.yzw, l(0,0,0,0)
  mov r1.w, -r0.y
  mov r2.z, r0.w
  loop 
    breakc_z r2.z
    add r2.w, r0.x, -r1.w
    div r3.x, r2.w, cb0[0].x
    add r2.x, -r3.x, v1.x
    sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r2.xyxx, t4.xyzw, s0, l(0.000000)
    add r2.xw, |r2.wwww|, l(0.500000, 0.000000, 0.000000, -0.500000)
    min r2.x, r1.z, r2.x
    mul r3.x, r1.y, r2.x
    sincos r3.x, null, r3.x
    mad r2.x, r1.y, r2.x, r3.x
    max r2.w, r1.x, r2.w
    min r2.w, r1.z, r2.w
    mul r3.x, r1.y, r2.w
    mad r2.x, -r1.y, r2.w, r2.x
    sincos r2.w, null, -r3.x
    add r2.x, r2.w, r2.x
    mul r2.x, r2.x, l(0.159155)
    mad r3.yzw, r4.xxyz, r2.xxxx, r3.yyzw
    add r1.w, r1.w, l(1.000000)
    lt r2.z, r1.w, r0.z
  endloop 
endif 
dp3_sat r0.x, l(1.000000, 0.956300, 0.621000, 0.000000), r3.yzwy
dp3_sat r0.y, l(1.000000, -0.272100, -0.647400, 0.000000), r3.yzwy
dp3_sat r0.z, l(1.000000, -1.107000, 1.704600, 0.000000), r3.yzwy
mov_sat r3.yzw, r3.yyzw
movc o0.xyz, cb0[1].xxxx, r0.xyzx, r3.yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 101 instruction slots used
