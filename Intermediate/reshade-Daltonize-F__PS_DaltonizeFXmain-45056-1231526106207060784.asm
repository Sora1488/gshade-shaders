//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int Type;                          // Offset:    0 Size:     4
//   float RedAdjust;                   // Offset:    4 Size:     4
//   float GreenAdjust;                 // Offset:    8 Size:     4
//   float BlueAdjust;                  // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 5
ieq r0.xy, cb0[0].xxxx, l(1, 2, 0, 0)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
mul r2.xyz, r1.xyzx, cb0[0].yzwy
mul r0.zw, r2.xxxy, l(0.000000, 0.000000, 17.882401, 43.516102)
add r0.z, r0.w, r0.z
mad r3.x, r2.z, l(4.119350), r0.z
mul r4.xyz, r2.yxyy, l(27.155399, 0.029957, 0.184309, 0.000000)
mad r0.z, r2.x, l(3.455650), r4.x
add r0.w, r4.z, r4.y
mad r4.z, r2.z, l(1.467090), r0.w
mad r3.y, r2.z, l(3.867140), r0.z
mul r0.zw, r3.yyyx, l(0.000000, 0.000000, 0.801109, -0.395913)
add r3.z, r0.z, r0.w
and r0.yzw, r0.yyyy, r3.xxyz
mul r2.xy, r4.zzzz, l(-2.525810, 1.248270, 0.000000, 0.000000)
mad r4.y, r3.x, l(0.494207), r2.y
mad r2.x, r3.y, l(2.023440), r2.x
mov r2.y, r3.y
mov r4.x, r3.x
movc r0.xyz, r0.xxxx, r4.xyzx, r0.yzwy
mov r2.z, r4.z
movc r0.xyz, cb0[0].xxxx, r0.xyzx, r2.xyzx
dp3 r2.x, r0.xyzx, l(0.080944, -0.130504, 0.116721, 0.000000)
dp3 r2.y, r0.xyzx, l(-0.010249, 0.054019, -0.113615, 0.000000)
dp3 r2.z, r0.xyzx, l(-0.000365, -0.004122, 0.693511, 0.000000)
mad r0.xyz, r1.xyzx, cb0[0].yzwy, -r2.xyzx
mad r0.yz, r0.xxxx, l(0.000000, 0.700000, 0.700000, 0.000000), r0.yyzy
mov r0.x, l(0)
mad o0.xyz, r1.xyzx, cb0[0].yzwy, r0.xyzx
ret 
// Approximately 30 instruction slots used
