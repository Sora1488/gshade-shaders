//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int shadowMask;                    // Offset:    0 Size:     4
//   float MaskGamma;                   // Offset:    4 Size:     4
//   float CGWG;                        // Offset:    8 Size:     4
//   float maskDark;                    // Offset:   12 Size:     4
//   float maskLight;                   // Offset:   16 Size:     4
//   float slotmask;                    // Offset:   20 Size:     4
//   int slotwidth;                     // Offset:   24 Size:     4
//   int masksize;                      // Offset:   28 Size:     4
//   int smasksize;                     // Offset:   32 Size:     4
//   float bloom;                       // Offset:   36 Size:     4
//   float glow;                        // Offset:   40 Size:     4
//   float glow_size;                   // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__Shinra01L                    texture  float4          2d             t4      1 
// __V__Shinra03L                    texture  float4          2d             t8      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 9
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t4.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t8.xyzw, s0
mul r2.xy, v1.xyxx, l(1919.999878, 1080.000000, 0.000000, 0.000000)
round_ni r2.xy, r2.xyxx
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[0].y
log r3.xyz, |r0.xyzx|
mul r3.xyz, r0.wwww, r3.xyzx
exp r3.xyz, r3.xyzx
itof r2.zw, cb0[1].wwwz
div r4.xy, r2.xyxx, r2.zzzz
round_ni r4.xy, r4.xyxx
switch cb0[0].x
  case l(-1)
  mov r5.xyz, l(1.000000,1.000000,1.000000,0)
  break 
  case l(0)
  mul r1.w, r4.x, l(0.500000)
  frc r1.w, r1.w
  lt r1.w, r1.w, l(0.500000)
  mov r6.xz, l(1.100000,0,1.100000,0)
  add r6.y, -cb0[0].z, l(1.000000)
  movc r5.xyz, r1.wwww, r6.xyzx, r6.yzyy
  break 
  case l(1)
  mul r1.w, r4.x, l(0.333333)
  frc r1.w, r1.w
  lt r4.zw, r1.wwww, l(0.000000, 0.000000, 0.333000, 0.666000)
  mov r6.x, l(1.000000)
  add r6.yz, -cb0[0].zzzz, l(0.000000, 1.100000, 1.100000, 0.000000)
  movc r7.yz, r4.wwww, r6.xxzx, r6.zzxz
  add r7.x, -cb0[0].z, l(1.100000)
  movc r5.xyz, r4.zzzz, r6.xyzx, r7.xyzx
  break 
  case l(2)
  mul r1.w, r4.x, l(0.500000)
  frc r1.w, r1.w
  lt r1.w, r1.w, l(0.500000)
  mov r6.xz, l(1.100000,0,1.100000,0)
  add r6.y, -cb0[0].z, l(1.000000)
  movc r5.xyz, r1.wwww, r6.xyzx, r6.yzyy
  break 
  case l(3)
  add r1.w, r4.y, r4.x
  mul r1.w, r1.w, l(0.500000)
  frc r1.w, r1.w
  lt r1.w, r1.w, l(0.500000)
  mov r6.xz, l(1.100000,0,1.100000,0)
  add r6.y, -cb0[0].z, l(1.000000)
  movc r5.xyz, r1.wwww, r6.xyzx, r6.yzyy
  break 
  case l(4)
  mul r6.xyz, r4.xxxx, l(0.166667, 0.333333, 0.333333, 0.000000)
  frc r6.xyz, r6.xyzx
  lt r6.xyz, r6.xyzx, l(0.500000, 0.333000, 0.666000, 0.000000)
  and r1.w, r6.x, l(0x3f800000)
  add r1.w, r1.w, r4.y
  mul r1.w, r1.w, l(0.500000)
  frc r1.w, r1.w
  lt r1.w, r1.w, l(0.500000)
  movc r1.w, r1.w, cb0[0].w, cb0[1].x
  mov r7.x, cb0[1].x
  mov r7.yz, cb0[0].wwww
  movc r8.yz, r6.zzzz, r7.xxzx, r7.zzxz
  mov r8.x, cb0[0].w
  movc r6.xyz, r6.yyyy, r7.xyzx, r8.xyzx
  mul r5.xyz, r1.wwww, r6.xyzx
  break 
  case l(5)
  mul r1.w, r4.x, l(0.333333)
  frc r1.w, r1.w
  lt r4.zw, r1.wwww, l(0.000000, 0.000000, 0.333000, 0.666000)
  mov r6.x, cb0[1].x
  mov r6.yz, cb0[0].wwww
  movc r7.yz, r4.wwww, r6.xxzx, r6.zzxz
  mov r7.x, cb0[0].w
  movc r5.xyz, r4.zzzz, r6.xyzx, r7.xyzx
  break 
  case l(6)
  mad r1.w, r4.y, l(3.000000), r4.x
  mul r1.w, r1.w, l(0.166667)
  frc r1.w, r1.w
  lt r4.zw, r1.wwww, l(0.000000, 0.000000, 0.333000, 0.666000)
  mov r6.x, cb0[1].x
  mov r6.yz, cb0[0].wwww
  movc r7.yz, r4.wwww, r6.xxzx, r6.zzxz
  mov r7.x, cb0[0].w
  movc r5.xyz, r4.zzzz, r6.xyzx, r7.xyzx
  break 
  case l(7)
  mul r4.yz, r4.xxyx, l(0.000000, 1.000000, 0.500000, 0.000000)
  round_ni r4.yz, r4.yyzy
  mad r1.w, r4.z, l(3.000000), r4.y
  mul r1.w, r1.w, l(0.166667)
  frc r1.w, r1.w
  lt r4.yz, r1.wwww, l(0.000000, 0.333000, 0.666000, 0.000000)
  mov r6.x, cb0[1].x
  mov r6.yz, cb0[0].wwww
  movc r7.yz, r4.zzzz, r6.xxzx, r6.zzxz
  mov r7.x, cb0[0].w
  movc r5.xyz, r4.yyyy, r6.xyzx, r7.xyzx
  break 
  case l(8)
  max r1.w, r3.y, r3.x
  max r1.w, r3.z, r1.w
  add r2.z, r1.w, l(-0.250000)
  max r2.z, r2.z, l(0.000000)
  mul r2.z, r2.z, l(1.666667)
  add r3.w, -cb0[0].w, l(1.000000)
  mul r3.w, r1.w, r3.w
  mad r3.w, r3.w, l(0.200000), cb0[0].w
  min r6.y, r2.z, r3.w
  mul r2.z, cb0[1].x, l(0.800000)
  mad r3.w, cb0[1].x, l(0.800000), l(-1.000000)
  mul r3.w, r1.w, r3.w
  mad r2.z, -r3.w, l(0.500000), r2.z
  add r1.w, -r1.w, l(1.000000)
  mad r6.xz, r1.wwww, l(0.750000, 0.000000, 0.750000, 0.000000), r2.zzzz
  mul r1.w, r4.x, l(0.500000)
  frc r1.w, r1.w
  lt r1.w, r1.w, l(0.500000)
  movc r5.xyz, r1.wwww, r6.xyzx, r6.yzyy
  break 
  case l(9)
  max r1.w, r3.y, r3.x
  max r1.w, r3.z, r1.w
  add r2.z, r1.w, l(-0.250000)
  max r2.z, r2.z, l(0.000000)
  mul r2.z, r2.z, l(1.773333)
  add r3.w, -cb0[0].w, l(1.000000)
  mul r3.w, r1.w, r3.w
  mad r3.w, r3.w, l(0.225000), cb0[0].w
  min r6.y, r2.z, r3.w
  mul r2.z, cb0[1].x, l(0.800000)
  mad r3.w, cb0[1].x, l(0.800000), l(-1.000000)
  mul r3.w, r1.w, r3.w
  mad r2.z, -r3.w, l(0.500000), r2.z
  add r1.w, -r1.w, l(1.000000)
  mad r6.x, r1.w, l(0.750000), r2.z
  mul r1.w, r4.x, l(0.333333)
  frc r1.w, r1.w
  lt r4.yz, r1.wwww, l(0.000000, 0.333000, 0.666000, 0.000000)
  movc r6.zw, r4.zzzz, r6.xxxy, r6.yyyx
  movc r5.xyz, r4.yyyy, r6.xyyx, r6.yzwy
  break 
  case l(10)
  max r1.w, r3.y, r3.x
  max r1.w, r3.z, r1.w
  add r2.z, r1.w, l(-0.250000)
  max r2.z, r2.z, l(0.000000)
  mul r2.z, r2.z, l(2.133333)
  add r1.w, -r1.w, l(1.000000)
  mad r1.w, r1.w, l(0.600000), l(1.000000)
  min r2.z, r1.w, r2.z
  mul r3.w, r4.x, l(0.500000)
  frc r3.w, r3.w
  lt r3.w, r3.w, l(0.500000)
  movc r5.xyz, r3.wwww, r1.wwww, r2.zzzz
  break 
  default 
  mov r5.xyz, cb0[0].wwww
  break 
endswitch 
ieq r4.xyz, cb0[0].xxxx, l(0, 1, 3, 0)
or r1.w, r4.y, r4.x
or r1.w, r4.z, r1.w
movc r3.xyz, r1.wwww, r3.xyzx, r0.xyzx
mul r3.xyz, r5.xyzx, r3.xyzx
log r4.xyz, |r3.xyzx|
mul r4.xyz, r4.xyzx, cb0[0].yyyy
exp r4.xyz, r4.xyzx
movc r3.xyz, r1.wwww, r4.xyzx, r3.xyzx
min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
ne r1.w, cb0[1].y, l(0.000000)
itof r2.z, cb0[2].x
div r2.xy, r2.xyxx, r2.zzzz
round_ni r2.xy, r2.xyxx
max r2.z, r3.y, r3.x
max r2.z, r3.z, r2.z
log r2.z, |r2.z|
mul r2.yz, r2.yyzy, l(0.000000, 0.500000, 1.330000, 0.000000)
exp r2.z, r2.z
add r2.w, r2.w, r2.w
div r2.x, r2.x, r2.w
frc r2.xy, r2.xyxx
add r2.y, r2.y, r2.y
round_ni r2.y, r2.y
add r2.w, -cb0[1].y, l(1.000000)
mul r3.w, cb0[1].y, l(0.700000)
mad r4.x, -cb0[1].y, l(0.800000), l(1.000000)
add r4.x, -r2.w, r4.x
mad r2.w, r2.z, r4.x, r2.w
add r2.z, -r2.z, l(1.000000)
mad r2.z, r3.w, r2.z, l(1.000000)
eq r4.xy, r2.yyyy, l(0.000000, 1.000000, 0.000000, 0.000000)
lt r2.y, r2.x, l(0.500000)
ge r2.x, r2.x, l(0.500000)
and r2.xy, r2.xyxx, r4.yxyy
or r2.x, r2.y, r2.x
movc r2.x, r2.x, r2.w, r2.z
movc r1.w, r1.w, r2.x, l(1.000000)
mul r2.xyz, r1.wwww, r3.xyzx
mul r4.xyz, r1.xyzx, r1.xyzx
add r4.xyz, r4.xyzx, r4.xyzx
min r4.xyz, r4.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000)
max r2.w, r4.y, r4.x
max r2.w, r4.z, r2.w
mul r2.w, r2.w, l(0.850000)
min r4.xyz, r2.wwww, r4.xyzx
mul r6.xyz, r4.xyzx, l(1.176471, 1.176471, 1.176471, 0.000000)
min r6.xyz, r2.xyzx, r6.xyzx
mad r0.xyz, r3.xyzx, r1.wwww, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mad r3.xyz, r4.xyzx, l(1.176471, 1.176471, 1.176471, 0.000000), -r6.xyzx
mad r0.xyz, r0.xyzx, r3.xyzx, r6.xyzx
mad r0.xyz, cb0[2].yyyy, r0.xyzx, r2.xyzx
mad r0.xyz, cb0[2].zzzz, r1.xyzx, r0.xyzx
min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
min r1.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r1.xyz, r2.xyzx, l(0.600000, 0.600000, 0.600000, 0.000000), r1.xyzx
min r0.xyz, r0.xyzx, r1.xyzx
log r0.xyz, |r0.xyzx|
mul r0.xyz, r0.xyzx, r0.wwww
exp o0.xyz, r0.xyzx
ret 
// Approximately 225 instruction slots used
