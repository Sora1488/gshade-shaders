//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int cLayer_SelectGame;             // Offset:    0 Size:     4 [unused]
//   int cLayer_Select;                 // Offset:    4 Size:     4 [unused]
//   float cLayer_Scale;                // Offset:    8 Size:     4 [unused]
//   float cLayer_ScaleX;               // Offset:   12 Size:     4 [unused]
//   float cLayer_ScaleY;               // Offset:   16 Size:     4 [unused]
//   bool cLayer_Mouse;                 // Offset:   20 Size:     4 [unused]
//   float cLayer_PosX;                 // Offset:   24 Size:     4 [unused]
//   float cLayer_PosY;                 // Offset:   28 Size:     4 [unused]
//   int cLayer_SnapRotate;             // Offset:   32 Size:     4 [unused]
//   float cLayer_Rotate;               // Offset:   36 Size:     4 [unused]
//   bool cLayer_Color_Invert;          // Offset:   40 Size:     4 [unused]
//   int cLayer_Color_Override;         // Offset:   44 Size:     4 [unused]
//   int cLayer_BlendMode;              // Offset:   48 Size:     4 [unused]
//   float cLayer_Blend;                // Offset:   52 Size:     4 [unused]
//   float Gauss_Blend;                 // Offset:   56 Size:     4 [unused]
//   float cLayer_PosX_Gauss;           // Offset:   60 Size:     4 [unused]
//   float cLayer_PosY_Gauss;           // Offset:   64 Size:     4 [unused]
//   float cLayer_Scale_Gauss;          // Offset:   68 Size:     4 [unused]
//   int GaussianBlurRadius;            // Offset:   72 Size:     4 [unused]
//   float GaussWeight;                 // Offset:   76 Size:     4 [unused]
//   float GaussWeightH;                // Offset:   80 Size:     4 [unused]
//   float GaussWeightV;                // Offset:   84 Size:     4 [unused]
//   float3 GaussColor;                 // Offset:   96 Size:    12 [unused]
//   int cLayer_BlendMode_Gauss;        // Offset:  108 Size:     4 [unused]
//   int cLayer_BlendMode_BG;           // Offset:  112 Size:     4 [unused]
//   float cLayer_Blend_BG;             // Offset:  116 Size:     4 [unused]
//   float4 cLayer_CAb_Color_A;         // Offset:  128 Size:    16 [unused]
//   float4 cLayer_CAb_Color_B;         // Offset:  144 Size:    16 [unused]
//   float2 cLayer_CAb_Shift;           // Offset:  160 Size:     8 [unused]
//   float cLayer_CAb_Strength;         // Offset:  168 Size:     4 [unused]
//   float cLayer_CAb_Blur;             // Offset:  172 Size:     4
//   int cLayer_BlendMode_CAb;          // Offset:  176 Size:     4 [unused]
//   float cLayer_Depth;                // Offset:  180 Size:     4 [unused]
//   float2 MouseCoords;                // Offset:  184 Size:     8 [unused]
//   bool LeftMouseDown;                // Offset:  192 Size:     4 [unused]
//   bool RightMouseDown;               // Offset:  196 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__Copyright_Texture_CAb_Gauss_Out    texture  float4          2d            t14      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 0.132980, 0, 0},
                              { 1.458430, 0.232276, 0, 0},
                              { 3.403985, 0.135326, 0, 0},
                              { 5.351806, 0.051156, 0, 0},
                              { 7.302941, 0.012539, 0, 0},
                              { 9.258160, 0.001991, 0, 0} }
dcl_constantbuffer CB0[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t14
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t14.xyzw, s0
mul r0.xyzw, r0.xyzw, l(0.132980, 0.132980, 0.132980, 0.132980)
mov r1.y, l(0)
mov r2.xyzw, r0.xyzw
mov r1.z, l(1)
loop 
  ige r1.w, r1.z, l(6)
  breakc_nz r1.w
  mul r1.w, cb0[10].w, icb[r1.z + 0].x
  mul r1.x, r1.w, l(0.000521)
  add r3.xy, r1.xyxx, v1.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.xyxx, t14.xyzw, s0, l(0.000000)
  mad r3.xyzw, r3.xyzw, icb[r1.z + 0].yyyy, r2.xyzw
  add r1.xw, -r1.xxxy, v1.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xwxx, t14.xyzw, s0, l(0.000000)
  mad r2.xyzw, r4.xyzw, icb[r1.z + 0].yyyy, r3.xyzw
  iadd r1.z, r1.z, l(1)
endloop 
mov o0.xyzw, r2.xyzw
ret 
// Approximately 20 instruction slots used
