//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   uint framecount;                   // Offset:    0 Size:     4
//   float frametime;                   // Offset:    4 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s1                              sampler      NA          NA             s1      1 
// __V__texBC                        texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t4.xyzw, s1
and r1.x, cb0[0].x, l(1)
if_z r1.x
  add r1.xyzw, v1.xyxy, l(0.009766, 0.000000, -0.009766, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyxx, t4.xyzw, s1
  add r2.xyzw, r0.xyzw, r2.xyzw
  sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.zwzz, t4.xyzw, s1
  add r1.xyzw, r1.xyzw, r2.xyzw
  add r2.xyzw, v1.xyxy, l(0.000000, 0.017361, 0.000000, -0.017361)
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t4.xyzw, s1
  add r1.xyzw, r1.xyzw, r3.xyzw
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.zwzz, t4.xyzw, s1
  add r1.xyzw, r1.xyzw, r2.xyzw
  add r2.xyzw, v1.xyxy, l(0.007324, 0.013021, -0.007324, -0.013021)
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t4.xyzw, s1
  add r1.xyzw, r1.xyzw, r3.xyzw
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.zwzz, t4.xyzw, s1
  add r1.xyzw, r1.xyzw, r2.xyzw
  add r2.xyzw, v1.xyxy, l(0.007324, -0.013021, -0.007324, 0.013021)
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t4.xyzw, s1
  add r1.xyzw, r1.xyzw, r3.xyzw
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.zwzz, t4.xyzw, s1
  add r1.xyzw, r1.xyzw, r2.xyzw
else 
  add r2.xyzw, v1.xyxy, l(0.004883, 0.000000, -0.004883, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t4.xyzw, s1
  add r0.xyzw, r0.xyzw, r3.xyzw
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.zwzz, t4.xyzw, s1
  add r0.xyzw, r0.xyzw, r2.xyzw
  add r2.xyzw, v1.xyxy, l(0.000000, 0.008681, 0.000000, -0.008681)
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t4.xyzw, s1
  add r0.xyzw, r0.xyzw, r3.xyzw
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.zwzz, t4.xyzw, s1
  add r0.xyzw, r0.xyzw, r2.xyzw
  add r2.xyzw, v1.xyxy, l(0.003662, 0.006510, -0.003662, -0.006510)
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t4.xyzw, s1
  add r0.xyzw, r0.xyzw, r3.xyzw
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.zwzz, t4.xyzw, s1
  add r0.xyzw, r0.xyzw, r2.xyzw
  add r2.xyzw, v1.xyxy, l(0.003662, -0.006510, -0.003662, 0.006510)
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t4.xyzw, s1
  add r0.xyzw, r0.xyzw, r3.xyzw
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.zwzz, t4.xyzw, s1
  add r1.xyzw, r0.xyzw, r2.xyzw
endif 
mul o0.xyzw, r1.xyzw, l(0.111111, 0.111111, 0.111111, 0.111111)
ret 
// Approximately 47 instruction slots used
