//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float Minimum;                     // Offset:    0 Size:     4
//   float DarkThreshold;               // Offset:    4 Size:     4
//   float LightThreshold;              // Offset:    8 Size:     4
//   float Maximum;                     // Offset:   12 Size:     4
//   float MaxVariance;                 // Offset:   16 Size:     4
//   float DarkPeak;                    // Offset:   20 Size:     4
//   float DarkMax;                     // Offset:   24 Size:     4
//   float MidPeak;                     // Offset:   28 Size:     4
//   float MidMax;                      // Offset:   32 Size:     4
//   float LightPeak;                   // Offset:   36 Size:     4
//   float LightMax;                    // Offset:   40 Size:     4
//   uint Debug;                        // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __V__Contrast__PrefixSums         texture  float4          2d             t4      1 
// __V__Contrast__Variances          texture  float4          2d             t8      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   x           0   TARGET   float   x   
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.x
dcl_output o0.x
dcl_temps 3
mul r0.x, v1.x, l(1023.000000)
round_ne r0.x, r0.x
ftoi r1.x, r0.x
mov r1.yzw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.y, r1.xyzw, t4.yxzw
mul r0.zw, cb0[0].yyyz, l(0.000000, 0.000000, 1023.000000, 1023.000000)
round_ne r0.zw, r0.zzzw
ftou r0.zw, r0.zzzw
utof r0.z, r0.z
ge r1.x, r0.z, r0.x
if_nz r1.x
  lt r1.x, l(0.000000), r0.y
  if_nz r1.x
    ftoi r1.x, r0.z
    mov r1.yzw, l(0,0,0,0)
    ld_indexable(texture2d)(float,float,float,float) r1.x, r1.xyzw, t4.xyzw
    div r1.x, r0.y, r1.x
    add r1.y, -cb0[0].x, cb0[0].y
    mad r1.x, r1.x, r1.y, cb0[0].x
    ld_indexable(texture2d)(float,float,float,float) r1.y, l(0, 0, 0, 0), t8.yxzw
    max r1.y, r1.y, l(0.000000)
    min r1.y, r1.y, cb0[1].x
    ge r1.z, cb0[1].y, r1.y
    div r1.w, |r1.y|, cb0[1].y
    mul r1.w, r1.w, cb0[1].z
    add r1.y, r1.y, -cb0[1].y
    add r2.x, -cb0[1].y, cb0[1].x
    div r1.y, |r1.y|, r2.x
    mad r1.y, r1.y, -cb0[1].z, cb0[1].z
    movc r1.y, r1.z, r1.w, r1.y
    add r1.x, r1.x, -v1.x
    mad o0.x, r1.y, r1.x, v1.x
  else 
    add r1.x, -cb0[0].x, cb0[0].y
    mad o0.x, v1.x, r1.x, cb0[0].x
  endif 
else 
  utof r0.w, r0.w
  ge r0.x, r0.w, r0.x
  if_nz r0.x
    ftoi r1.x, r0.z
    mov r1.yzw, l(0,0,0,0)
    ld_indexable(texture2d)(float,float,float,float) r0.x, r1.xyzw, t4.xyzw
    ftoi r1.x, r0.w
    mov r1.yzw, l(0,0,0,0)
    ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzw, t4.yzxw
    add r0.z, -r0.x, r0.z
    lt r1.x, r0.z, l(1.000000)
    if_nz r1.x
      add r1.x, -cb0[0].y, cb0[0].z
      mad o0.x, v1.x, r1.x, cb0[0].y
    else 
      add r0.x, -r0.x, r0.y
      div r0.x, r0.x, r0.z
      add r0.z, -cb0[0].y, cb0[0].z
      mad r0.x, r0.x, r0.z, cb0[0].y
      ld_indexable(texture2d)(float,float,float,float) r0.z, l(1, 0, 0, 0), t8.yzxw
      max r0.z, r0.z, l(0.000000)
      min r0.z, r0.z, cb0[1].x
      ge r1.x, cb0[1].w, r0.z
      div r1.y, |r0.z|, cb0[1].w
      mul r1.y, r1.y, cb0[2].x
      add r0.z, r0.z, -cb0[1].w
      add r1.z, -cb0[1].w, cb0[1].x
      div r0.z, |r0.z|, r1.z
      mad r0.z, r0.z, -cb0[2].x, cb0[2].x
      movc r0.z, r1.x, r1.y, r0.z
      add r0.x, r0.x, -v1.x
      mad o0.x, r0.z, r0.x, v1.x
    endif 
  else 
    ftoi r1.x, r0.w
    mov r1.yzw, l(0,0,0,0)
    ld_indexable(texture2d)(float,float,float,float) r0.x, r1.xyzw, t4.xyzw
    ld_indexable(texture2d)(float,float,float,float) r0.z, l(1023, 0, 0, 0), t4.yzxw
    add r0.z, -r0.x, r0.z
    lt r0.w, r0.z, l(1.000000)
    if_nz r0.w
      add r0.w, -cb0[0].z, cb0[0].w
      mad o0.x, v1.x, r0.w, cb0[0].z
    else 
      add r0.x, -r0.x, r0.y
      div r0.x, r0.x, r0.z
      add r0.y, -cb0[0].z, cb0[0].w
      mad r0.x, r0.x, r0.y, cb0[0].z
      ld_indexable(texture2d)(float,float,float,float) r0.y, l(2, 0, 0, 0), t8.yxzw
      max r0.y, r0.y, l(0.000000)
      min r0.y, r0.y, cb0[1].x
      ge r0.z, cb0[2].y, r0.y
      div r0.w, |r0.y|, cb0[2].y
      mul r0.w, r0.w, cb0[2].z
      add r0.y, r0.y, -cb0[2].y
      add r1.x, cb0[1].x, -cb0[2].y
      div r0.y, |r0.y|, r1.x
      mad r0.y, r0.y, -cb0[2].z, cb0[2].z
      movc r0.y, r0.z, r0.w, r0.y
      add r0.x, r0.x, -v1.x
      mad o0.x, r0.y, r0.x, v1.x
    endif 
  endif 
endif 
ret 
// Approximately 102 instruction slots used
