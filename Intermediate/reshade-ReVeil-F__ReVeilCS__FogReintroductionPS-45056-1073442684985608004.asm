//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int VRS_FrameCount;                // Offset:    0 Size:     4
//   float TransmissionMultiplier;      // Offset:    4 Size:     4 [unused]
//   float DepthMultiplier;             // Offset:    8 Size:     4 [unused]
//   float VarianceCutoff;              // Offset:   12 Size:     4
//   bool UseVRS;                       // Offset:   16 Size:     4 [unused]
//   int Debug;                         // Offset:   20 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__VRS                          texture  float4          2d             t4      1 
// __V__VRSUpdated                   texture  float4          2d             t6      1 
// __V__ReVeilCS__BackBuffer         texture  float4          2d             t8      1 
// __V__ReVeilCS__Airlight           texture  float4          2d            t14      1 
// __V__ReVeilCS__OriginalImage      texture  float4          2d            t16      1 
// __V__ReVeilCS__Transmission       texture  float4          2d            t18      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t18
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t18.xyzw, s0
max r0.xyzw, r0.xxxx, l(0.050000, 0.050000, 0.050000, 0.050000)
eq r1.x, r0.w, l(1.000000)
ieq r1.y, cb0[1].y, l(0)
and r1.x, r1.y, r1.x
if_nz r1.x
  discard_nz l(-1)
  mov o0.xyzw, l(0,0,0,0)
else 
  ieq r1.x, cb0[1].y, l(1)
  if_nz r1.x
    mov o0.xyzw, r0.xyzw
  else 
    ieq r0.x, cb0[1].y, l(2)
    if_nz r0.x
      sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t16.xyzw, s0
      ld_indexable(texture2d)(float,float,float,float) r1.x, l(0, 0, 0, 0), t6.xyzw
      ieq r1.y, r1.x, cb0[0].x
      iadd r1.z, cb0[0].x, l(-1)
      ieq r1.x, r1.z, r1.x
      or r1.x, r1.x, r1.y
      if_z r1.x
        mov r1.x, l(0)
      else 
        mul r1.yz, v1.xxyx, l(0.000000, 240.000000, 135.000000, 0.000000)
        ftoi r2.xy, r1.yzyy
        mov r2.zw, l(0,0,0,0)
        ld_indexable(texture2d)(float,float,float,float) r1.yzw, r2.xyzw, t4.wxyz
        mul r1.yzw, r1.yyzw, l(0.000000, 0.250000, 0.250000, 0.250000)
        lt r1.w, r1.w, cb0[0].w
        lt r2.x, r1.z, r1.y
        lt r1.yz, cb0[0].wwww, r1.zzyz
        movc r1.yz, r1.yyzy, l(0,0,0,0), l(0,1,4,0)
        movc r1.y, r2.x, r1.y, r1.z
        movc r1.x, r1.w, l(5), r1.y
      endif 
      switch r1.x
        case l(0)
        mov r1.xyz, l(0.500000,0,0,0)
        break 
        case l(1)
        mov r1.xyz, l(0.500000,0.500000,0,0)
        break 
        case l(4)
        mov r1.xyz, l(0.500000,0.250000,0,0)
        break 
        case l(5)
        mov r1.xyz, l(0,0.500000,0,0)
        break 
        default 
        mov r1.xyz, l(1.000000,1.000000,1.000000,0)
        break 
      endswitch 
      add r0.xyz, r0.xyzx, -r1.xyzx
      mad r0.xyz, r0.xyzx, l(0.350000, 0.350000, 0.350000, 0.000000), r1.xyzx
      mul r1.xy, v1.xyxx, l(1920.000000, 1080.000000, 0.000000, 0.000000)
      ftou r1.xy, r1.xyxx
      and r1.xy, r1.xyxx, l(7, 7, 0, 0)
      ieq r1.xy, r1.xyxx, l(0, 0, 0, 0)
      or r1.x, r1.y, r1.x
      movc r1.x, r1.x, l(0.500000), l(1.000000)
      mul r0.xyz, r0.xyzx, r1.xxxx
    else 
      sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t14.xyzw, s0
      sample_indexable(texture2d)(float,float,float,float) r1.yzw, v1.xyxx, t8.wxyz, s0
      sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t16.xyzw, s0
      dp3 r2.x, r2.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
      add r2.x, -r1.x, r2.x
      div r2.x, r2.x, r0.w
      dp3 r2.y, r1.yzwy, l(0.299000, 0.587000, 0.114000, 0.000000)
      add r2.y, -r1.x, r2.y
      div r2.y, r2.y, r0.w
      add r2.xy, r1.xxxx, r2.xyxx
      add r2.y, -r2.x, r2.y
      mad r2.x, r0.w, r2.y, r2.x
      add r2.x, -r1.x, r2.x
      mad r0.w, r2.x, r0.w, r1.x
      mul r1.x, r1.z, l(0.331264)
      mad r1.x, r1.y, l(-0.168736), -r1.x
      mad r1.x, r1.w, l(0.500000), r1.x
      mul r1.z, r1.z, l(0.418688)
      mad r1.y, r1.y, l(0.500000), -r1.z
      mad r1.y, -r1.w, l(0.081312), r1.y
      mad r0.x, r1.y, l(1.402000), r0.w
      mad r1.z, -r1.x, l(0.344136), r0.w
      mad r0.y, -r1.y, l(0.714136), r1.z
      mad r0.z, r1.x, l(1.772000), r0.w
    endif 
    mov o0.xyz, r0.xyzx
    mov o0.w, l(1.000000)
  endif 
endif 
ret 
// Approximately 93 instruction slots used
