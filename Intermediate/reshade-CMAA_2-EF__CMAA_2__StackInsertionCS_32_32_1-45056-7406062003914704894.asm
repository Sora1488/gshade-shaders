//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__CMAA_2__ZShapes              texture  float4          2d             t0      1 
// __V__CMAA_2__StackAlloc           texture  float4          2d            t10      1 
// V__CMAA_2__wZShapeCoords              UAV   float          2d             u2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t10
dcl_uav_typed_texture2d (float,float,float,float) u2
dcl_input vThreadGroupID.xy
dcl_input vThreadIDInGroup.xy
dcl_input vThreadID.xy
dcl_temps 5
dcl_tgsm_raw g0, 4
dcl_thread_group 32, 32, 1
ieq r0.xy, vThreadIDInGroup.xyxx, l(0, 0, 0, 0)
and r0.x, r0.y, r0.x
if_nz r0.x
  store_raw g0.x, l(0), l(0)
endif 
sync_g_t
mov r0.xy, vThreadGroupID.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t10.xyzw
ishl r0.yz, vThreadID.xxyx, l(0, 1, 1, 0)
imad r1.xy, vThreadID.xyxx, l(2, 2, 0, 0), l(1, 1, 0, 0)
utof r1.xy, r1.xyxx
mul r1.xy, r1.xyxx, l(0.000521, 0.000926, 0.000000, 0.000000)
gather4_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.xyzw, s0.w
lt r1.xyzw, l(0.015294, 0.015294, 0.015294, 0.015294), r1.xyzw
and r2.xyzw, r1.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
dp4 r0.w, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
ftou r0.w, r0.w
imm_atomic_iadd r2.x, g0, l(0), r0.w
if_nz r1.x
  iadd r0.w, r0.x, r2.x
  imad r1.x, vThreadID.y, l(2), l(1)
  ishl r2.y, r0.y, l(16)
  or r1.x, r1.x, r2.y
  udiv r3.x, r4.x, r0.w, l(1920)
  mov r4.yzw, r3.xxxx
  store_uav_typed u2.xyzw, r4.xyzw, r1.xxxx
  mov r0.w, l(1)
else 
  mov r0.w, l(0)
endif 
if_nz r1.y
  iadd r1.x, r0.x, r2.x
  iadd r1.x, r0.w, r1.x
  imad r1.y, vThreadID.y, l(2), l(1)
  ishl r2.y, r0.y, l(16)
  or r1.y, r1.y, r2.y
  or r1.y, r1.y, l(0x00010001)
  udiv r1.x, r3.x, r1.x, l(1920)
  mov r3.yzw, r1.xxxx
  store_uav_typed u2.xyzw, r3.xyzw, r1.yyyy
  iadd r0.w, r0.w, l(1)
endif 
if_nz r1.z
  iadd r1.x, r0.x, r2.x
  iadd r1.x, r0.w, r1.x
  ishl r1.y, r0.y, l(16)
  or r1.y, r0.z, r1.y
  or r1.y, r1.y, l(0x00010000)
  udiv r1.x, r3.x, r1.x, l(1920)
  mov r3.yzw, r1.xxxx
  store_uav_typed u2.xyzw, r3.xyzw, r1.yyyy
  iadd r0.w, r0.w, l(1)
endif 
if_nz r1.w
  iadd r0.x, r0.x, r2.x
  iadd r0.x, r0.w, r0.x
  ishl r0.y, r0.y, l(16)
  or r0.y, r0.z, r0.y
  udiv r0.x, r1.x, r0.x, l(1920)
  mov r1.yzw, r0.xxxx
  store_uav_typed u2.xyzw, r1.xyzw, r0.yyyy
endif 
ret 
// Approximately 64 instruction slots used
