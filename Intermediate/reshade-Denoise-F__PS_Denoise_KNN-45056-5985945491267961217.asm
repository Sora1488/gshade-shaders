//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float NoiseLevel;                  // Offset:    0 Size:     4
//   float LerpCoefficeint;             // Offset:    4 Size:     4
//   float WeightThreshold;             // Offset:    8 Size:     4
//   float CounterThreshold;            // Offset:   12 Size:     4
//   float GaussianSigma;               // Offset:   16 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
rcp r0.w, cb0[0].x
rcp r1.x, cb0[1].x
mov r1.yzw, l(0,0,0,0)
mov r2.xyz, l(0,0,-3,0)
loop 
  ilt r2.w, l(3), r2.z
  breakc_nz r2.w
  itof r3.x, r2.z
  mov r4.xyz, r1.yzwy
  mov r2.w, r2.x
  mov r3.z, r2.y
  mov r3.w, l(-3)
  loop 
    ilt r4.w, l(3), r3.w
    breakc_nz r4.w
    itof r3.y, r3.w
    mad r5.xy, r3.xyxx, l(0.000521, 0.000926, 0.000000, 0.000000), v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyxx, t0.xyzw, s0, l(0.000000)
    add r6.xyz, r0.xyzx, -r5.xyzx
    dp3 r3.y, r6.xyzx, r6.xyzx
    imul null, r4.w, r3.w, r3.w
    imad r4.w, r2.z, r2.z, r4.w
    itof r4.w, r4.w
    mul r4.w, r1.x, r4.w
    mad r3.y, r3.y, r0.w, r4.w
    mul r3.y, r3.y, l(-1.442695)
    exp r3.y, r3.y
    lt r4.w, cb0[0].z, r3.y
    and r4.w, r4.w, l(0x3f800000)
    add r2.w, r2.w, r4.w
    add r3.z, r3.y, r3.z
    mad r4.xyz, r5.xyzx, r3.yyyy, r4.xyzx
    iadd r3.w, r3.w, l(1)
  endloop 
  mov r1.yzw, r4.xxyz
  mov r2.x, r2.w
  mov r2.y, r3.z
  iadd r2.z, r2.z, l(1)
endloop 
div r1.xyz, r1.yzwy, r2.yyyy
mul r0.w, cb0[0].w, l(49.000000)
lt r0.w, r0.w, r2.x
if_nz r0.w
  add r0.w, -cb0[0].y, l(1.000000)
  add r2.xyz, r0.xyzx, -r1.xyzx
  mad o0.xyz, r0.wwww, r2.xyzx, r1.xyzx
  ret 
else 
  add r0.xyz, r0.xyzx, -r1.xyzx
  mad o0.xyz, cb0[0].yyyy, r0.xyzx, r1.xyzx
  ret 
endif 
ret 
// Approximately 54 instruction slots used
