//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float SSR_FIELD_OF_VIEW;           // Offset:    0 Size:     4 [unused]
//   float SSR_REFLECTION_INTENSITY;    // Offset:    4 Size:     4 [unused]
//   float SSR_FRESNEL_EXP;             // Offset:    8 Size:     4 [unused]
//   float SSR_FADE_DIST;               // Offset:   12 Size:     4 [unused]
//   float SSR_RAY_INC;                 // Offset:   16 Size:     4 [unused]
//   float SSR_ACCEPT_RANGE;            // Offset:   20 Size:     4 [unused]
//   float SSR_JITTER_AMOUNT;           // Offset:   24 Size:     4 [unused]
//   float SSR_FILTER_SIZE;             // Offset:   28 Size:     4
//   float SSR_RELIEF_AMOUNT;           // Offset:   32 Size:     4 [unused]
//   float SSR_RELIEF_SCALE;            // Offset:   36 Size:     4 [unused]
//   float FRAME_TIME;                  // Offset:   40 Size:     4 [unused]
//   int FRAME_COUNT;                   // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__CommonTex0                   texture  float4          2d             t6      1 
// __V__CommonTex1                   texture  float4          2d             t8      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 4   xyz         2     NONE   float       
// TEXCOORD                 5   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t6.xyzw, s0, l(0.000000)
ne r1.x, cb0[1].w, l(0.000000)
if_nz r1.x
  sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t8.xyzw, s0, l(0.000000)
  mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r2.x, cb0[1].w, cb0[1].w, l(0.001000)
  rcp r2.x, r2.x
  mul r2.x, r2.x, l(-2.000000)
  round_ni r2.y, cb0[1].w
  ge r2.z, r2.y, -r2.y
  mov r3.xyzw, l(0,0,0,0)
  mov r2.w, l(0.001000)
  mov r4.x, -r2.y
  mov r4.y, r2.z
  loop 
    breakc_z r4.y
    mad r4.z, r4.x, l(2.000000), l(-0.500000)
    mad r4.zw, r4.zzzz, l(0.000000, 0.000000, 0.000000, 0.000926), v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r4.zwzz, t6.xyzw, s0, l(0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r4.zwzz, t8.xyzw, s0, l(0.000000)
    mad r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    add r4.z, -r1.w, r6.w
    mad r4.z, -|r4.z|, l(50.000000), l(1.000000)
    max r4.z, r4.z, l(0.000000)
    dp3 r4.w, r6.xyzx, r1.xyzx
    mad_sat r4.w, r4.w, l(50.000000), l(-49.000000)
    mul r4.z, r4.w, r4.z
    mul r6.xyzw, r4.zzzz, r5.xyzw
    mul r4.w, r4.x, r4.x
    mul r4.w, r2.x, r4.w
    mul r4.w, r4.w, l(1.442695)
    exp r4.w, r4.w
    mul r6.xyzw, r4.wwww, r6.xyzw
    mad r3.xyzw, r6.xyzw, r5.wwww, r3.xyzw
    mul r4.z, r4.w, r4.z
    mad r2.w, r4.z, r5.w, r2.w
    add r4.x, r4.x, l(1.000000)
    ge r4.y, r2.y, r4.x
  endloop 
  div r1.xyzw, r3.xyzw, r2.wwww
  add_sat r2.x, r2.w, r2.w
  add r1.xyzw, -r0.xyzw, r1.xyzw
  mad o0.xyzw, r2.xxxx, r1.xyzw, r0.xyzw
else 
  mov o0.xyzw, r0.xyzw
endif 
ret 
// Approximately 47 instruction slots used
