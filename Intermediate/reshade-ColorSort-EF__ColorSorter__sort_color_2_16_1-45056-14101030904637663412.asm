//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __V__ColorSorter__texHalfRes      texture  float4          2d             t4      1 
// V__ColorSorter__texColorSortStorage        UAV  float4          2d             u0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_resource_texture2d (float,float,float,float) t4
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadIDInGroup.xy
dcl_input vThreadID.x
dcl_temps 10
dcl_indexableTemp x0[40], 4
dcl_indexableTemp x1[16], 4
dcl_indexableTemp x2[16], 4
dcl_indexableTemp x3[80], 4
dcl_tgsm_structured g0, 16, 1280
dcl_tgsm_structured g1, 4, 32
dcl_tgsm_structured g2, 4, 32
dcl_thread_group 2, 16, 1
imul null, r0.x, vThreadIDInGroup.y, l(640)
ushr r0.x, r0.x, l(4)
imad r0.y, vThreadIDInGroup.x, l(640), r0.x
iadd r0.z, r0.x, l(39)
imad r0.w, vThreadIDInGroup.x, l(640), r0.z
mov r1.x, vThreadID.x
mov r1.zw, l(0,0,0,0)
mov r1.y, r0.x
mov r2.x, l(-1)
loop 
  breakc_z r2.x
  imad r2.y, vThreadIDInGroup.x, l(640), r1.y
  ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyzw, t4.xyzw
  store_structured g0.xyzw, r2.y, l(0), r3.xyzw
  iadd r1.y, r1.y, l(1)
  uge r2.x, r0.z, r1.y
endloop 
if_z vThreadIDInGroup.y
  mov r0.z, l(0)
  mov r1.xyz, l(0,0,0,0)
  loop 
    uge r1.w, r0.z, l(640)
    breakc_nz r1.w
    imad r1.w, vThreadIDInGroup.x, l(640), r0.z
    ld_structured r2.x, r1.w, l(12), g0.xxxx
    lt r2.yz, r2.xxxx, l(0.000000, 0.900000, 0.600000, 0.000000)
    add r2.x, r2.x, r2.x
    and r2.x, r2.x, r2.z
    lt r2.x, r2.x, l(0.000000)
    and r2.x, r2.x, r2.y
    and r2.z, r1.x, r2.y
    not r2.w, r1.y
    and r2.w, r2.w, r2.x
    not r2.w, r2.w
    and r2.z, r2.w, r2.z
    iadd r2.w, r1.z, l(1)
    movc r1.z, r2.z, r1.z, r2.w
    and r2.z, r2.y, l(0x3f000000)
    itof r2.w, r1.z
    add r2.z, r2.z, r2.w
    store_structured g0.x, r1.w, l(12), r2.z
    iadd r0.z, r0.z, l(1)
    mov r1.xy, r2.yxyy
  endloop 
endif 
sync_g_t
mov x0[0].xyzw, l(0,0,0,0)
mov x0[1].xyzw, l(0,0,0,0)
mov x0[2].xyzw, l(0,0,0,0)
mov x0[3].xyzw, l(0,0,0,0)
mov x0[4].xyzw, l(0,0,0,0)
mov x0[5].xyzw, l(0,0,0,0)
mov x0[6].xyzw, l(0,0,0,0)
mov x0[7].xyzw, l(0,0,0,0)
mov x0[8].xyzw, l(0,0,0,0)
mov x0[9].xyzw, l(0,0,0,0)
mov x0[10].xyzw, l(0,0,0,0)
mov x0[11].xyzw, l(0,0,0,0)
mov x0[12].xyzw, l(0,0,0,0)
mov x0[13].xyzw, l(0,0,0,0)
mov x0[14].xyzw, l(0,0,0,0)
mov x0[15].xyzw, l(0,0,0,0)
mov x0[16].xyzw, l(0,0,0,0)
mov x0[17].xyzw, l(0,0,0,0)
mov x0[18].xyzw, l(0,0,0,0)
mov x0[19].xyzw, l(0,0,0,0)
mov x0[20].xyzw, l(0,0,0,0)
mov x0[21].xyzw, l(0,0,0,0)
mov x0[22].xyzw, l(0,0,0,0)
mov x0[23].xyzw, l(0,0,0,0)
mov x0[24].xyzw, l(0,0,0,0)
mov x0[25].xyzw, l(0,0,0,0)
mov x0[26].xyzw, l(0,0,0,0)
mov x0[27].xyzw, l(0,0,0,0)
mov x0[28].xyzw, l(0,0,0,0)
mov x0[29].xyzw, l(0,0,0,0)
mov x0[30].xyzw, l(0,0,0,0)
mov x0[31].xyzw, l(0,0,0,0)
mov x0[32].xyzw, l(0,0,0,0)
mov x0[33].xyzw, l(0,0,0,0)
mov x0[34].xyzw, l(0,0,0,0)
mov x0[35].xyzw, l(0,0,0,0)
mov x0[36].xyzw, l(0,0,0,0)
mov x0[37].xyzw, l(0,0,0,0)
mov x0[38].xyzw, l(0,0,0,0)
mov x0[39].xyzw, l(0,0,0,0)
mov r0.z, l(0)
loop 
  uge r1.x, r0.z, l(40)
  breakc_nz r1.x
  iadd r1.x, r0.z, r0.y
  ld_structured r1.xyzw, r1.x, l(0), g0.xyzw
  mov x0[r0.z + 0].xyzw, r1.xyzw
  iadd r0.z, r0.z, l(1)
endloop 
iadd r0.z, -r0.y, r0.w
ige r1.x, r0.z, l(1)
mov r1.y, l(1)
mov r1.z, r1.x
loop 
  breakc_z r1.z
  ishl r1.w, r1.y, l(1)
  mov r2.x, r0.y
  loop 
    ige r2.y, r2.x, r0.w
    breakc_nz r2.y
    iadd r2.y, r1.y, r2.x
    iadd r2.z, r2.y, l(-1)
    iadd r2.w, r1.w, r2.x
    iadd r3.x, r2.w, l(-1)
    imin r3.x, r0.w, r3.x
    ige r3.y, r2.z, r2.x
    ige r3.z, r3.x, r2.y
    and r3.y, r3.z, r3.y
    mov r3.zw, r2.xxxx
    mov r4.x, r2.y
    mov r4.y, r3.y
    loop 
      breakc_z r4.y
      ld_structured r5.xyzw, r3.w, l(0), g0.xyzw
      ld_structured r6.xyzw, r4.x, l(0), g0.xyzw
      add r4.z, -r5.w, r6.w
      lt r4.w, |r4.z|, l(0.100000)
      add r7.x, r5.y, r5.x
      add r7.x, r5.z, r7.x
      add r7.y, r6.y, r6.x
      add r7.y, r6.z, r7.y
      add r7.x, -r7.y, r7.x
      movc r4.z, r4.w, r7.x, r4.z
      lt r4.z, r4.z, l(0.000000)
      if_z r4.z
        iadd r4.z, r3.z, l(1)
        iadd r4.w, -r0.y, r3.z
        iadd r3.w, r3.w, l(1)
        mov x0[r4.w + 0].xyzw, r5.xyzw
        mov r3.z, r4.z
      else 
        iadd r4.z, r3.z, l(1)
        iadd r4.w, -r0.y, r3.z
        iadd r4.x, r4.x, l(1)
        mov x0[r4.w + 0].xyzw, r6.xyzw
        mov r3.z, r4.z
      endif 
      ige r4.z, r2.z, r3.w
      ige r4.w, r3.x, r4.x
      and r4.y, r4.w, r4.z
    endloop 
    ilt r2.y, r3.w, r0.w
    ige r3.y, r2.z, r3.w
    and r2.y, r2.y, r3.y
    mov r4.xy, r3.zwzz
    mov r3.y, r2.y
    loop 
      breakc_z r3.y
      iadd r4.z, -r0.y, r4.x
      iadd r5.xy, r4.xyxx, l(1, 1, 0, 0)
      ld_structured r6.xyzw, r4.y, l(0), g0.xyzw
      mov x0[r4.z + 0].xyzw, r6.xyzw
      ilt r4.z, r5.y, r0.w
      ige r4.w, r2.z, r5.y
      and r3.y, r4.w, r4.z
      mov r4.xy, r5.xyxx
    endloop 
    mov r2.y, r2.x
    loop 
      ilt r2.z, r3.x, r2.y
      breakc_nz r2.z
      iadd r2.z, -r0.y, r2.y
      mov r4.xyzw, x0[r2.z + 0].xyzw
      store_structured g0.xyzw, r2.y, l(0), r4.xyzw
      iadd r2.y, r2.y, l(1)
    endloop 
    mov r2.x, r2.w
  endloop 
  ige r1.z, r0.z, r1.w
  mov r1.yz, r1.wwzw
endloop 
mov x1[0].xyzw, l(0,0,0,0)
mov x1[1].xyzw, l(0,0,0,0)
mov x1[2].xyzw, l(0,0,0,0)
mov x1[3].xyzw, l(0,0,0,0)
mov x1[4].xyzw, l(0,0,0,0)
mov x1[5].xyzw, l(0,0,0,0)
mov x1[6].xyzw, l(0,0,0,0)
mov x1[7].xyzw, l(0,0,0,0)
mov x1[8].xyzw, l(0,0,0,0)
mov x1[9].xyzw, l(0,0,0,0)
mov x1[10].xyzw, l(0,0,0,0)
mov x1[11].xyzw, l(0,0,0,0)
mov x1[12].xyzw, l(0,0,0,0)
mov x1[13].xyzw, l(0,0,0,0)
mov x1[14].xyzw, l(0,0,0,0)
mov x1[15].xyzw, l(0,0,0,0)
mov x2[0].xyzw, l(0,0,0,0)
mov x2[1].xyzw, l(0,0,0,0)
mov x2[2].xyzw, l(0,0,0,0)
mov x2[3].xyzw, l(0,0,0,0)
mov x2[4].xyzw, l(0,0,0,0)
mov x2[5].xyzw, l(0,0,0,0)
mov x2[6].xyzw, l(0,0,0,0)
mov x2[7].xyzw, l(0,0,0,0)
mov x2[8].xyzw, l(0,0,0,0)
mov x2[9].xyzw, l(0,0,0,0)
mov x2[10].xyzw, l(0,0,0,0)
mov x2[11].xyzw, l(0,0,0,0)
mov x2[12].xyzw, l(0,0,0,0)
mov x2[13].xyzw, l(0,0,0,0)
mov x2[14].xyzw, l(0,0,0,0)
mov x2[15].xyzw, l(0,0,0,0)
mov x3[0].xyzw, l(0,0,0,0)
mov x3[1].xyzw, l(0,0,0,0)
mov x3[2].xyzw, l(0,0,0,0)
mov x3[3].xyzw, l(0,0,0,0)
mov x3[4].xyzw, l(0,0,0,0)
mov x3[5].xyzw, l(0,0,0,0)
mov x3[6].xyzw, l(0,0,0,0)
mov x3[7].xyzw, l(0,0,0,0)
mov x3[8].xyzw, l(0,0,0,0)
mov x3[9].xyzw, l(0,0,0,0)
mov x3[10].xyzw, l(0,0,0,0)
mov x3[11].xyzw, l(0,0,0,0)
mov x3[12].xyzw, l(0,0,0,0)
mov x3[13].xyzw, l(0,0,0,0)
mov x3[14].xyzw, l(0,0,0,0)
mov x3[15].xyzw, l(0,0,0,0)
mov x3[16].xyzw, l(0,0,0,0)
mov x3[17].xyzw, l(0,0,0,0)
mov x3[18].xyzw, l(0,0,0,0)
mov x3[19].xyzw, l(0,0,0,0)
mov x3[20].xyzw, l(0,0,0,0)
mov x3[21].xyzw, l(0,0,0,0)
mov x3[22].xyzw, l(0,0,0,0)
mov x3[23].xyzw, l(0,0,0,0)
mov x3[24].xyzw, l(0,0,0,0)
mov x3[25].xyzw, l(0,0,0,0)
mov x3[26].xyzw, l(0,0,0,0)
mov x3[27].xyzw, l(0,0,0,0)
mov x3[28].xyzw, l(0,0,0,0)
mov x3[29].xyzw, l(0,0,0,0)
mov x3[30].xyzw, l(0,0,0,0)
mov x3[31].xyzw, l(0,0,0,0)
mov x3[32].xyzw, l(0,0,0,0)
mov x3[33].xyzw, l(0,0,0,0)
mov x3[34].xyzw, l(0,0,0,0)
mov x3[35].xyzw, l(0,0,0,0)
mov x3[36].xyzw, l(0,0,0,0)
mov x3[37].xyzw, l(0,0,0,0)
mov x3[38].xyzw, l(0,0,0,0)
mov x3[39].xyzw, l(0,0,0,0)
mov x3[40].xyzw, l(0,0,0,0)
mov x3[41].xyzw, l(0,0,0,0)
mov x3[42].xyzw, l(0,0,0,0)
mov x3[43].xyzw, l(0,0,0,0)
mov x3[44].xyzw, l(0,0,0,0)
mov x3[45].xyzw, l(0,0,0,0)
mov x3[46].xyzw, l(0,0,0,0)
mov x3[47].xyzw, l(0,0,0,0)
mov x3[48].xyzw, l(0,0,0,0)
mov x3[49].xyzw, l(0,0,0,0)
mov x3[50].xyzw, l(0,0,0,0)
mov x3[51].xyzw, l(0,0,0,0)
mov x3[52].xyzw, l(0,0,0,0)
mov x3[53].xyzw, l(0,0,0,0)
mov x3[54].xyzw, l(0,0,0,0)
mov x3[55].xyzw, l(0,0,0,0)
mov x3[56].xyzw, l(0,0,0,0)
mov x3[57].xyzw, l(0,0,0,0)
mov x3[58].xyzw, l(0,0,0,0)
mov x3[59].xyzw, l(0,0,0,0)
mov x3[60].xyzw, l(0,0,0,0)
mov x3[61].xyzw, l(0,0,0,0)
mov x3[62].xyzw, l(0,0,0,0)
mov x3[63].xyzw, l(0,0,0,0)
mov x3[64].xyzw, l(0,0,0,0)
mov x3[65].xyzw, l(0,0,0,0)
mov x3[66].xyzw, l(0,0,0,0)
mov x3[67].xyzw, l(0,0,0,0)
mov x3[68].xyzw, l(0,0,0,0)
mov x3[69].xyzw, l(0,0,0,0)
mov x3[70].xyzw, l(0,0,0,0)
mov x3[71].xyzw, l(0,0,0,0)
mov x3[72].xyzw, l(0,0,0,0)
mov x3[73].xyzw, l(0,0,0,0)
mov x3[74].xyzw, l(0,0,0,0)
mov x3[75].xyzw, l(0,0,0,0)
mov x3[76].xyzw, l(0,0,0,0)
mov x3[77].xyzw, l(0,0,0,0)
mov x3[78].xyzw, l(0,0,0,0)
mov x3[79].xyzw, l(0,0,0,0)
utof r0.y, vThreadIDInGroup.y
ishl r0.z, vThreadIDInGroup.x, l(4)
imad r0.w, vThreadIDInGroup.x, l(16), vThreadIDInGroup.y
iadd r1.x, vThreadIDInGroup.y, l(1)
iadd r1.y, r0.z, r1.x
mov r1.z, l(1)
loop 
  uge r1.w, r1.z, l(16)
  breakc_nz r1.w
  sync_g_t
  ishl r1.z, r1.z, l(1)
  udiv null, r1.w, vThreadIDInGroup.y, r1.z
  iadd r2.x, -r1.w, vThreadIDInGroup.y
  mov r2.y, l(0)
  loop 
    uge r2.z, r2.y, r1.z
    breakc_nz r2.z
    iadd r2.z, r2.y, r2.x
    imul null, r2.w, r2.z, l(640)
    ushr r2.w, r2.w, l(4)
    imad r2.w, vThreadIDInGroup.x, l(640), r2.w
    ld_structured r3.xyzw, r2.w, l(0), g0.xyzw
    mov x1[r2.z + 0].xyzw, r3.xyzw
    iadd r2.y, r2.y, l(1)
  endloop 
  utof r2.y, r1.z
  mul r2.z, r2.y, l(0.500000)
  itof r2.w, r2.x
  mad r2.w, r2.y, l(0.500000), r2.w
  add r2.w, r2.w, l(-1.000000)
  ftoi r2.w, r2.w
  iadd r3.x, r2.w, l(1)
  iadd r3.y, r1.z, r2.x
  iadd r3.z, r3.y, l(-1)
  ige r3.w, r2.w, r2.x
  ige r4.x, r3.z, r3.x
  and r3.w, r3.w, r4.x
  mov r4.x, l(0)
  mov r4.yz, r2.xxxx
  mov r4.w, r3.x
  mov r5.x, r3.w
  loop 
    breakc_z r5.x
    mov r6.xyzw, x1[r4.y + 0].xyzw
    mov r7.xyzw, x1[r4.w + 0].xyzw
    add r5.y, -r6.w, r7.w
    lt r5.z, |r5.y|, l(0.100000)
    add r5.w, r6.y, r6.x
    add r5.w, r6.z, r5.w
    add r8.x, r7.y, r7.x
    add r8.x, r7.z, r8.x
    add r5.w, r5.w, -r8.x
    movc r5.y, r5.z, r5.w, r5.y
    lt r5.y, r5.y, l(0.000000)
    if_z r5.y
      ieq r5.y, r4.y, vThreadIDInGroup.y
      movc r4.x, r5.y, r4.z, r4.x
      iadd r5.y, r4.z, l(1)
      iadd r4.y, r4.y, l(1)
      mov r7.xyzw, r6.xyzw
    else 
      ieq r5.z, r4.w, vThreadIDInGroup.y
      movc r4.x, r5.z, r4.z, r4.x
      iadd r5.y, r4.z, l(1)
      iadd r4.w, r4.w, l(1)
    endif 
    mov x2[r4.z + 0].xyzw, r7.xyzw
    ige r5.z, r2.w, r4.y
    ige r5.w, r3.z, r4.w
    and r5.x, r5.w, r5.z
    mov r4.z, r5.y
  endloop 
  mov r3.xw, r4.xxxy
  mov r5.x, r4.z
  loop 
    ilt r5.y, r2.w, r3.w
    breakc_nz r5.y
    ieq r5.y, r3.w, vThreadIDInGroup.y
    movc r3.x, r5.y, r5.x, r3.x
    iadd r5.y, r5.x, l(1)
    iadd r5.z, r3.w, l(1)
    mov r6.xyzw, x1[r3.w + 0].xyzw
    mov x2[r5.x + 0].xyzw, r6.xyzw
    mov r3.w, r5.z
    mov r5.x, r5.y
  endloop 
  mov r2.w, r3.x
  mov r3.w, r5.x
  mov r5.y, r4.w
  loop 
    ilt r5.z, r3.z, r5.y
    breakc_nz r5.z
    ieq r5.z, r5.y, vThreadIDInGroup.y
    movc r2.w, r5.z, r3.w, r2.w
    iadd r5.z, r3.w, l(1)
    iadd r5.w, r5.y, l(1)
    mov r6.xyzw, x1[r5.y + 0].xyzw
    mov x2[r3.w + 0].xyzw, r6.xyzw
    mov r3.w, r5.z
    mov r5.y, r5.w
  endloop 
  udiv null, r3.z, r2.w, r1.z
  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
  mul r3.w, r0.y, r3.w
  frc r3.w, r3.w
  utof r3.z, r3.z
  mad r3.z, -r2.z, r3.w, r3.z
  ftoi r3.w, r3.z
  utof r1.w, r1.w
  lt r1.w, r1.w, r2.z
  if_nz r1.w
    iadd r1.w, r0.z, r2.w
    store_structured g1.x, r1.w, l(0), r0.x
    if_z r3.w
      utof r2.z, r2.x
      mad r2.z, r2.y, l(0.500000), r2.z
      mul r2.z, r2.z, l(40.000000)
      ftoi r2.z, r2.z
      store_structured g2.x, r1.w, l(0), r2.z
    else 
      utof r2.z, r2.x
      mad r2.z, r2.y, l(0.500000), r2.z
      round_z r3.z, r3.z
      add r2.z, r2.z, r3.z
      add r2.z, r2.z, l(-1.000000)
      mul r2.z, r2.z, l(40.000000)
      ftoi r2.z, r2.z
      mov r6.xyzw, x2[r2.w + 0].xyzw
      add r3.z, r6.y, r6.x
      add r3.z, r6.z, r3.z
      mov r5.y, l(0)
      loop 
        uge r5.z, r5.y, l(40)
        breakc_nz r5.z
        iadd r5.z, r2.z, r5.y
        store_structured g2.x, r1.w, l(0), r5.z
        imad r5.w, vThreadIDInGroup.x, l(640), r5.z
        ld_structured r7.xyzw, r5.w, l(0), g0.xyzw
        add r5.w, -r6.w, r7.w
        lt r7.w, |r5.w|, l(0.100000)
        add r7.x, r7.y, r7.x
        add r7.x, r7.z, r7.x
        add r7.x, r3.z, -r7.x
        movc r5.w, r7.w, r7.x, r5.w
        lt r5.w, r5.w, l(0.000000)
        if_z r5.w
          break 
        else 
          iadd r5.z, r5.z, l(1)
          store_structured g2.x, r1.w, l(0), r5.z
        endif 
        iadd r5.y, r5.y, l(1)
      endloop 
    endif 
  else 
    iadd r1.w, r0.z, r2.w
    store_structured g2.x, r1.w, l(0), r0.x
    if_z r3.w
      iadd r1.w, r0.z, r2.w
      imul null, r2.z, r2.x, l(640)
      ushr r2.z, r2.z, l(4)
      store_structured g1.x, r1.w, l(0), r2.z
    else 
      iadd r1.w, r2.x, r3.w
      imad r1.w, r1.w, l(640), l(-640)
      ushr r1.w, r1.w, l(4)
      iadd r2.z, r0.z, r2.w
      mov r6.xyzw, x2[r2.w + 0].xyzw
      add r3.z, r6.y, r6.x
      add r3.z, r6.z, r3.z
      mov r3.w, l(0)
      loop 
        uge r5.y, r3.w, l(40)
        breakc_nz r5.y
        iadd r5.y, r1.w, r3.w
        store_structured g1.x, r2.z, l(0), r5.y
        imad r5.z, vThreadIDInGroup.x, l(640), r5.y
        ld_structured r7.xyzw, r5.z, l(0), g0.xyzw
        add r5.z, -r6.w, r7.w
        lt r5.w, |r5.z|, l(0.100000)
        add r7.x, r7.y, r7.x
        add r7.x, r7.z, r7.x
        add r7.x, r3.z, -r7.x
        movc r5.z, r5.w, r7.x, r5.z
        lt r5.z, r5.z, l(0.000000)
        if_z r5.z
          break 
        else 
          iadd r5.y, r5.y, l(1)
          store_structured g1.x, r2.z, l(0), r5.y
        endif 
        iadd r3.w, r3.w, l(1)
      endloop 
    endif 
  endif 
  sync_g_t
  ld_structured r1.w, r0.w, l(0), g1.xxxx
  ld_structured r2.z, r0.w, l(0), g2.xxxx
  udiv null, r3.z, r1.x, r1.z
  if_z r3.z
    utof r3.z, r2.x
    mad r3.z, r2.y, l(0.500000), r3.z
    mul r3.z, r3.z, l(40.000000)
    ftoi r6.x, r3.z
    imul null, r3.y, r3.y, l(640)
    ushr r6.y, r3.y, l(4)
  else 
    ld_structured r6.x, r1.y, l(0), g1.xxxx
    ld_structured r6.y, r1.y, l(0), g2.xxxx
  endif 
  ilt r3.y, r1.w, r6.x
  ilt r3.z, r2.z, r6.y
  and r3.y, r3.z, r3.y
  mov r3.z, r1.w
  mov r3.w, r2.z
  mov r5.y, l(0)
  mov r5.z, r3.y
  loop 
    breakc_z r5.z
    imad r5.w, vThreadIDInGroup.x, l(640), r3.z
    imad r6.z, vThreadIDInGroup.x, l(640), r3.w
    ld_structured r7.xyzw, r5.w, l(0), g0.xyzw
    ld_structured r8.xyzw, r6.z, l(0), g0.xyzw
    add r5.w, -r7.w, r8.w
    lt r6.z, |r5.w|, l(0.100000)
    add r6.w, r7.y, r7.x
    add r6.w, r7.z, r6.w
    add r9.x, r8.y, r8.x
    add r9.x, r8.z, r9.x
    add r6.w, r6.w, -r9.x
    movc r5.w, r6.z, r6.w, r5.w
    lt r5.w, r5.w, l(0.000000)
    if_z r5.w
      iadd r5.w, r5.y, l(1)
      iadd r3.z, r3.z, l(1)
      mov r8.xyzw, r7.xyzw
    else 
      iadd r5.w, r5.y, l(1)
      iadd r3.w, r3.w, l(1)
    endif 
    mov x3[r5.y + 0].xyzw, r8.xyzw
    ilt r6.zw, r3.zzzw, r6.xxxy
    and r5.z, r6.w, r6.z
    mov r5.yz, r5.wwzw
  endloop 
  mov r5.w, r3.z
  mov r5.z, r5.y
  loop 
    ige r3.y, r5.w, r6.x
    breakc_nz r3.y
    iadd r6.zw, r5.wwwz, l(0, 0, 1, 1)
    imad r3.y, vThreadIDInGroup.x, l(640), r5.w
    ld_structured r7.xyzw, r3.y, l(0), g0.xyzw
    mov x3[r5.z + 0].xyzw, r7.xyzw
    mov r5.zw, r6.wwwz
  endloop 
  mov r6.z, r3.w
  mov r6.x, r5.z
  loop 
    ige r3.y, r6.z, r6.y
    breakc_nz r3.y
    iadd r7.xy, r6.zxzz, l(1, 1, 0, 0)
    imad r3.y, vThreadIDInGroup.x, l(640), r6.z
    ld_structured r8.xyzw, r3.y, l(0), g0.xyzw
    mov x3[r6.x + 0].xyzw, r8.xyzw
    mov r6.xz, r7.yyxy
  endloop 
  sync_g_t
  iadd r1.w, r1.w, r2.z
  utof r2.x, r2.x
  mad r2.x, r2.y, l(0.500000), r2.x
  itof r1.w, r1.w
  mad r1.w, -r2.x, l(40.000000), r1.w
  ftoi r1.w, r1.w
  mov r2.x, l(0)
  loop 
    ige r2.y, r2.x, r6.x
    breakc_nz r2.y
    iadd r2.y, r1.w, r2.x
    imad r2.y, vThreadIDInGroup.x, l(640), r2.y
    mov r7.xyzw, x3[r2.x + 0].xyzw
    store_structured g0.xyzw, r2.y, l(0), r7.xyzw
    iadd r2.x, r2.x, l(1)
  endloop 
endloop 
sync_g_t
utof r0.y, vThreadID.x
ftoi r1.x, r0.y
mov r0.y, l(0)
loop 
  uge r0.z, r0.y, l(40)
  breakc_nz r0.z
  iadd r0.z, r0.y, r0.x
  imad r0.w, vThreadIDInGroup.x, l(640), r0.z
  ld_structured r2.x, r0.w, l(12), g0.xxxx
  ge r2.y, r2.x, -r2.x
  movc r2.y, r2.y, l(1.000000), l(-1.000000)
  mul r2.x, r2.y, r2.x
  frc r2.x, r2.x
  mul r2.w, r2.x, r2.y
  store_structured g0.x, r0.w, l(12), r2.w
  utof r0.z, r0.z
  ftoi r1.yzw, r0.zzzz
  ld_structured r2.xyz, r0.w, l(0), g0.xyzx
  store_uav_typed u0.xyzw, r1.xyzw, r2.xyzw
  iadd r0.y, r0.y, l(1)
endloop 
ret 
// Approximately 597 instruction slots used
