//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int CA_type;                       // Offset:    0 Size:     4
//   int degrees;                       // Offset:    4 Size:     4
//   float CA;                          // Offset:    8 Size:     4
//   int sampleSTEPS;                   // Offset:   12 Size:     4
//   float CA_strength;                 // Offset:   16 Size:     4
//   bool show_CA;                      // Offset:   20 Size:     4
//   float3 vignetteColor;              // Offset:   32 Size:    12
//   float CA_width;                    // Offset:   44 Size:     4
//   float CA_curve;                    // Offset:   48 Size:     4
//   float oX;                          // Offset:   52 Size:     4
//   float oY;                          // Offset:   56 Size:     4
//   float CA_shapeX;                   // Offset:   60 Size:     4
//   float CA_shapeY;                   // Offset:   64 Size:     4
//   bool enable_depth_int;             // Offset:   68 Size:     4
//   bool enable_depth_width;           // Offset:   72 Size:     4
//   bool display_depth;                // Offset:   76 Size:     4
//   float depthStart;                  // Offset:   80 Size:     4
//   float depthEnd;                    // Offset:   84 Size:     4
//   float depthCurve;                  // Offset:   88 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
sample_l_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t2.yzwx, s0, l(0.000000)
mad r1.x, -r0.w, l(999.000000), l(1000.000000)
div r0.w, r0.w, r1.x
add r1.x, -cb0[5].x, cb0[5].y
add r0.w, r0.w, -cb0[5].x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul_sat r0.w, r0.w, r1.x
mad r1.x, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.x
log r0.w, r0.w
mul r0.w, r0.w, cb0[5].z
exp r0.w, r0.w
mul r1.x, r0.w, cb0[2].w
movc r1.x, cb0[4].z, r1.x, cb0[2].w
add r1.yz, cb0[3].yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
mad r1.yz, v1.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), -r1.yyzy
mul r1.w, cb0[3].w, l(0.562500)
div r2.x, r1.y, r1.w
div r2.y, r1.z, cb0[4].x
dp2 r1.w, r2.xyxx, r2.xyxx
sqrt r1.w, r1.w
mul r1.x, r1.x, r1.w
mad r1.x, r1.x, r1.x, l(1.000000)
mul r1.x, r1.x, r1.x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r1.x, -r1.x, l(1.000000)
log r1.x, r1.x
mul r1.x, r1.x, cb0[3].x
exp r1.x, r1.x
switch cb0[0].x
  case l(0)
  iadd r2.zw, cb0[0].yyyy, l(0, 0, 90, -270)
  ilt r1.w, l(360), r2.z
  movc r1.w, r1.w, r2.w, r2.z
  itof r2.z, cb0[0].y
  mul r2.z, r2.z, l(0.017453)
  sincos null, r2.z, r2.z
  mul r2.x, r1.y, r2.z
  itof r1.w, r1.w
  mul r1.w, r1.w, l(0.017453)
  sincos r1.w, null, r1.w
  mul r2.y, r1.z, r1.w
  break 
  case l(1)
  itof r1.w, cb0[0].y
  mul r1.w, r1.w, l(0.017453)
  sincos r3.x, r2.x, r1.w
  mov r2.y, r3.x
  break 
  case l(2)
  iadd r2.zw, cb0[0].yyyy, l(0, 0, 90, -270)
  ilt r1.w, l(360), r2.z
  movc r1.w, r1.w, r2.w, r2.z
  itof r2.z, cb0[0].y
  mul r2.z, r2.z, l(0.017453)
  sincos null, r2.z, r2.z
  mul r2.x, r1.y, r2.z
  itof r1.y, r1.w
  mul r1.y, r1.y, l(0.017453)
  sincos r1.y, null, r1.y
  mul r2.y, r1.z, r1.y
  mov r1.x, l(1.000000)
  break 
  case l(3)
  itof r1.y, cb0[0].y
  mul r1.y, r1.y, l(0.017453)
  sincos r3.x, r2.x, r1.y
  mov r2.y, r3.x
  mov r1.x, l(1.000000)
  break 
  default 
  mov r2.xy, l(0,0,0,0)
  break 
endswitch 
mul r1.y, r0.w, r1.x
movc r1.x, cb0[4].y, r1.y, r1.x
itof r1.y, cb0[0].w
add r1.z, r1.y, l(-1.000000)
mul r2.xy, r2.xyxx, r1.xxxx
mul r2.xy, r2.xyxx, l(0.000521, 0.000926, 0.000000, 0.000000)
add r1.w, cb0[0].z, cb0[0].z
mov r3.xyz, l(0,0,0,0)
mov r4.xyz, l(0,0,0,0)
mov r2.z, l(0)
loop 
  ge r2.w, r2.z, r1.y
  breakc_nz r2.w
  div r2.w, r2.z, r1.y
  mad r5.xyz, r2.wwww, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)
  mad_sat r5.xyz, |r5.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)
  div r2.w, r2.z, r1.z
  mad r2.w, r2.w, r1.w, -cb0[0].z
  mad r6.xy, r2.wwww, r2.xyxx, v1.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xyxx, t0.xyzw, s0, l(0.000000)
  mad r3.xyz, r6.xyzx, r5.xyzx, r3.xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  add r2.z, r2.z, l(1.000000)
endloop 
dp3 r1.y, r4.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
div r1.yzw, r3.xxyz, r1.yyyy
add r1.yzw, -r0.xxyz, r1.yyzw
mad r0.xyz, cb0[1].xxxx, r1.yzwy, r0.xyzx
add r1.y, -r1.x, l(1.000000)
mul r1.yzw, r0.xxyz, r1.yyyy
mad r1.xyz, cb0[2].xyzx, r1.xxxx, r1.yzwy
movc r1.w, cb0[1].y, l(1.000000), l(0)
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, r1.wwww, r1.xyzx, r0.xyzx
movc o0.xyz, cb0[4].wwww, r0.wwww, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 113 instruction slots used
