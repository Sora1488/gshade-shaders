//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float FocusPlane;                  // Offset:    0 Size:     4 [unused]
//   float FocusRange;                  // Offset:    4 Size:     4 [unused]
//   float FocusPlaneMaxRange;          // Offset:    8 Size:     4 [unused]
//   float BlurAngle;                   // Offset:   12 Size:     4 [unused]
//   float BlurLength;                  // Offset:   16 Size:     4 [unused]
//   float BlurQuality;                 // Offset:   20 Size:     4 [unused]
//   float ScaleFactor;                 // Offset:   24 Size:     4 [unused]
//   int BlurType;                      // Offset:   28 Size:     4
//   float2 FocusPoint;                 // Offset:   32 Size:     8
//   float3 FocusPointBlendColor;       // Offset:   48 Size:    12 [unused]
//   float FocusPointBlendFactor;       // Offset:   60 Size:     4 [unused]
//   bool FocusPointViewFilterCircleOnMouseDown;// Offset:   64 Size:     4 [unused]
//   bool FocusPointFadeBlurInFeatherBand;// Offset:   68 Size:     4 [unused]
//   float FilterCircleRadius;          // Offset:   72 Size:     4
//   float2 FilterCircleDeformFactors;  // Offset:   80 Size:     8
//   float FilterCircleRotationFactor;  // Offset:   88 Size:     4 [unused]
//   float FilterCircleFeather;         // Offset:   92 Size:     4 [unused]
//   float HighlightGain;               // Offset:   96 Size:     4 [unused]
//   float BlendFactor;                 // Offset:  100 Size:     4 [unused]
//   float2 MouseCoords;                // Offset:  104 Size:     8 [unused]
//   bool LeftMouseDown;                // Offset:  112 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float       
// TEXCOORD                 2   x           2     NONE   float       
// TEXCOORD                 3    y          2     NONE   float       
// TEXCOORD                 4     z         2     NONE   float       
// TEXCOORD                 5   xyzw        3     NONE   float       
// TEXCOORD                 6   xy          4     NONE   float   xy  
// TEXCOORD                 8     zw        4     NONE   float     zw
// TEXCOORD                 7   xy          5     NONE   float   xy  
// TEXCOORD                 9     z         5     NONE   float     z 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_input_ps linear v1.xy
dcl_input_ps linear v4.xy
dcl_input_ps linear v4.zw
dcl_input_ps linear v5.xy
dcl_input_ps linear v5.z
dcl_output o0.xyzw
dcl_temps 2
ine r0.x, cb0[1].w, l(1)
if_nz r0.x
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
add r0.xy, v1.xyxx, -v4.zwzz
add r0.xy, r0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
dp2 r1.x, r0.xyxx, v4.xyxx
dp2 r1.y, r0.xyxx, v5.xyxx
add r0.xy, -v4.zwzz, cb0[2].xyxx
add r0.xy, r0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mad r0.xy, r1.xyxx, cb0[5].xyxx, -r0.xyxx
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.x, r0.x
lt r0.y, r0.x, v5.z
lt r0.z, cb0[4].z, r0.x
add r0.w, -v5.z, cb0[4].z
add r0.x, r0.x, -v5.z
eq r1.x, r0.w, l(0.000000)
and r1.x, r1.x, l(0x3f800000)
add r0.w, r0.w, r1.x
div r0.x, r0.x, r0.w
movc r0.x, r0.z, l(1.000000), r0.x
movc o0.xyzw, r0.yyyy, l(0,0,0,0), r0.xxxx
ret 
// Approximately 25 instruction slots used
