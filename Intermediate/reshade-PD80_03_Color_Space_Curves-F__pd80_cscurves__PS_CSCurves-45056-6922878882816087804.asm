//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float2 pp;                         // Offset:    0 Size:     8
//   bool enable_dither;                // Offset:    8 Size:     4
//   float dither_strength;             // Offset:   12 Size:     4
//   int color_space;                   // Offset:   16 Size:     4
//   float pos0_shoulder_grey;          // Offset:   20 Size:     4
//   float pos1_shoulder_grey;          // Offset:   24 Size:     4
//   float pos0_toe_grey;               // Offset:   28 Size:     4
//   float pos1_toe_grey;               // Offset:   32 Size:     4
//   float colorsat;                    // Offset:   36 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__texNoiseRGB                  texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
mul r1.xy, v1.xyxx, l(3.750000, 2.109375, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t6.xyzw, s1
add r0.w, cb0[0].x, l(1.000000)
mad r1.xyzw, r0.wwww, l(0.618034, 0.618034, 0.618034, 0.618034), r1.xyzw
frc r1.xyzw, r1.xyzw
mad r1.xyzw, r1.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
mul r0.w, cb0[0].w, l(0.003922)
mul r1.xyzw, r0.wwww, r1.xyzw
movc r1.xyzw, cb0[0].zzzz, r1.xyzw, l(0,0,0,0)
add_sat r0.xyw, r0.yzyx, r1.yzyx
min r1.z, cb0[1].y, cb0[1].w
min r2.x, cb0[1].z, cb0[2].x
add r2.y, -r1.z, cb0[1].y
lt r2.z, l(0.000010), |r2.y|
movc r2.y, r2.z, r2.y, l(0.000010)
add r2.z, -r2.x, cb0[1].z
div r2.y, r2.z, r2.y
mul r2.z, r1.z, r2.y
mad r2.w, -r2.y, r1.z, r2.x
lt r3.x, l(0.000010), |r2.w|
movc r3.x, r3.x, r2.w, l(0.000010)
mul r2.z, r1.z, r2.z
mul r2.x, r2.x, r2.x
mul r3.y, r2.z, r2.x
mul r3.z, r3.x, r3.x
div r3.y, r3.y, r3.z
div r2.xz, r2.xxzx, r3.xxxx
add r3.xz, cb0[1].yyzy, l(-1.000000, 0.000000, -1.000000, 0.000000)
mad r3.w, r2.y, r3.x, -cb0[1].z
add r3.w, r3.w, l(1.000000)
lt r4.x, l(0.000010), |r3.w|
movc r3.w, r4.x, r3.w, l(0.000010)
mul r4.xy, r3.xzxx, r3.xzxx
mul r4.x, r2.y, r4.x
mul r4.x, r4.y, r4.x
mul r4.y, r3.w, r3.w
div r4.x, r4.x, r4.y
mul r4.y, r2.y, cb0[1].y
add r4.z, -cb0[1].y, l(1.000000)
mad r3.z, r4.y, r4.z, r3.z
mad r3.x, r2.y, r3.x, cb0[1].z
mad r3.x, -cb0[1].z, cb0[1].z, r3.x
div r3.xz, r3.xxzx, r3.wwww
add r3.w, cb0[2].y, l(1.000000)
switch cb0[1].x
  case l(0)
  min r4.y, r0.x, r0.w
  min r4.y, r0.y, r4.y
  add r5.xyz, r0.wxyw, -r4.yyyy
  add r4.z, r2.z, r4.y
  div r4.z, -r3.y, r4.z
  add r4.z, r2.x, r4.z
  mad r4.w, r2.y, r4.y, r2.w
  add r5.w, r3.z, r4.y
  div r5.w, -r4.x, r5.w
  add r5.w, r3.x, r5.w
  ge r6.x, r4.y, r1.z
  movc r4.z, r6.x, r4.w, r4.z
  ge r4.y, r4.y, cb0[1].y
  movc r4.y, r4.y, r5.w, r4.z
  mad_sat r0.xyw, r5.yzyx, r3.wwww, r4.yyyy
  break 
  case l(1)
  dp3 r5.x, l(0.357576, 0.180438, 0.412456, 0.000000), r0.xywx
  dp3 r5.y, l(0.715152, 0.072175, 0.212673, 0.000000), r0.xywx
  dp3 r5.z, l(0.119192, 0.950304, 0.019334, 0.000000), r0.xywx
  mul r4.yzw, r5.xxyz, l(0.000000, 1.052111, 1.000000, 0.918417)
  lt r6.xyz, l(0.008418, 0.008856, 0.009643, 0.000000), r5.xyzx
  log r4.yzw, r4.yyzw
  mul r4.yzw, r4.yyzw, l(0.000000, 0.333333, 0.333333, 0.333333)
  exp r4.yzw, r4.yyzw
  mad r5.x, r5.x, l(950.368164), l(16.000000)
  mul r5.x, r5.x, l(0.008621)
  movc r4.y, r6.x, r4.y, r5.x
  mad r5.xy, r5.yzyy, l(903.296326, 829.602722, 0.000000, 0.000000), l(16.000000, 16.000000, 0.000000, 0.000000)
  mul r5.xy, r5.xyxx, l(0.008621, 0.008621, 0.000000, 0.000000)
  movc r4.zw, r6.yyyz, r4.zzzw, r5.xxxy
  mad r5.x, r4.z, l(116.000000), l(-16.000000)
  add r4.y, -r4.z, r4.y
  add r4.z, -r4.w, r4.z
  mul r4.w, r5.x, l(0.010000)
  mul r4.z, r3.w, r4.z
  mad r5.y, r5.x, l(0.010000), r2.z
  div r5.y, -r3.y, r5.y
  add r5.y, r2.x, r5.y
  mad r5.z, r2.y, r4.w, r2.w
  mad r5.x, r5.x, l(0.010000), r3.z
  div r5.x, -r4.x, r5.x
  add r5.x, r3.x, r5.x
  ge r5.w, r4.w, r1.z
  movc r5.y, r5.w, r5.z, r5.y
  ge r4.w, r4.w, cb0[1].y
  movc r4.w, r4.w, r5.x, r5.y
  mul r5.x, r4.w, l(0.110706)
  mad r5.y, r4.w, l(100.000000), l(16.000000)
  mul r5.z, r5.y, l(0.008621)
  mad r4.y, r4.y, r3.w, r5.z
  mad r4.z, r5.y, l(0.008621), -r4.z
  mul r5.y, r4.y, r4.y
  mul r5.y, r4.y, r5.y
  lt r5.w, l(0.008856), r5.y
  mad r4.y, r4.y, l(116.000000), l(-16.000000)
  mul r4.y, r4.y, l(0.001107)
  movc r6.x, r5.w, r5.y, r4.y
  lt r4.y, l(0.080000), r4.w
  mul r4.w, r5.z, r5.z
  mul r4.w, r5.z, r4.w
  movc r6.y, r4.y, r4.w, r5.x
  mul r4.y, r4.z, r4.z
  mul r4.y, r4.z, r4.y
  lt r4.w, l(0.008856), r4.y
  mad r4.z, r4.z, l(116.000000), l(-16.000000)
  mul r4.z, r4.z, l(0.001107)
  movc r6.z, r4.w, r4.y, r4.z
  mul r4.yzw, r6.xxyz, l(0.000000, 0.950470, 1.000000, 1.088830)
  min r4.yzw, r4.yyzw, l(0.000000, 0.950470, 1.000000, 1.088830)
  max r4.yzw, r4.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  dp3_sat r0.w, l(3.240454, -1.537138, -0.498531, 0.000000), r4.yzwy
  dp3_sat r0.x, l(-0.969266, 1.876011, 0.041556, 0.000000), r4.yzwy
  dp3_sat r0.y, l(0.055643, -0.204026, 1.057225, 0.000000), r4.yzwy
  break 
  case l(2)
  max r5.xyw, r0.xyxw, l(0.000001, 0.000001, 0.000000, 0.000001)
  lt r4.y, r5.x, r5.y
  mov r6.xy, r5.yxyy
  mov r6.zw, l(0,0,-1.000000,0.666667)
  mov r7.xy, r6.yxyy
  mov r7.zw, l(0,0,0,-0.333333)
  movc r6.xyzw, r4.yyyy, r6.xyzw, r7.xyzw
  lt r4.y, r5.w, r6.x
  mov r5.xyz, r6.xywx
  mov r6.xyw, r5.wywx
  movc r5.xyzw, r4.yyyy, r5.xyzw, r6.xyzw
  min r4.y, r5.y, r5.w
  add r4.y, -r4.y, r5.x
  add r4.z, -r5.y, r5.w
  mad r4.w, r4.y, l(6.000000), l(0.000001)
  div r4.z, r4.z, r4.w
  add r4.z, r5.z, r4.z
  mov r6.x, |r4.z|
  mad r4.z, -r4.y, l(0.500000), r5.x
  mad r4.w, r4.z, l(2.000000), l(-1.000000)
  add r4.w, -|r4.w|, l(1.000001)
  div r4.y, r4.y, r4.w
  add r4.w, r2.z, r4.z
  div r4.w, -r3.y, r4.w
  add r4.w, r2.x, r4.w
  mad r5.x, r2.y, r4.z, r2.w
  add r5.y, r3.z, r4.z
  div r5.y, -r4.x, r5.y
  add r5.y, r3.x, r5.y
  ge r5.z, r4.z, r1.z
  movc r4.w, r5.z, r5.x, r4.w
  ge r4.z, r4.z, cb0[1].y
  movc r6.z, r4.z, r5.y, r4.w
  mul r6.y, r3.w, r4.y
  mov_sat r6.xyz, r6.xyzx
  mad r4.yzw, r6.xxxx, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)
  mad_sat r4.yzw, |r4.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)
  mad r5.x, r6.z, l(2.000000), l(-1.000000)
  add r5.x, -|r5.x|, l(1.000000)
  mul r5.x, r6.y, r5.x
  add r4.yzw, r4.yyzw, l(0.000000, -0.500000, -0.500000, -0.500000)
  mad r0.xyw, r4.zwzy, r5.xxxx, r6.zzzz
  break 
  case l(3)
  lt r4.y, r0.x, r0.y
  mov r5.xy, r0.yxyy
  mov r5.zw, l(0,0,-1.000000,0.666667)
  mov r6.xy, r5.yxyy
  mov r6.zw, l(0,0,0,-0.333333)
  movc r5.xyzw, r4.yyyy, r5.xyzw, r6.xyzw
  lt r4.y, r0.w, r5.x
  mov r0.xyz, r5.xywx
  mov r5.xyw, r0.wywx
  movc r5.xyzw, r4.yyyy, r0.xyzw, r5.xyzw
  min r0.z, r5.y, r5.w
  add r0.z, -r0.z, r5.x
  add r4.y, -r5.y, r5.w
  mad r4.z, r0.z, l(6.000000), l(0.000000)
  div r4.y, r4.y, r4.z
  add r4.y, r4.y, r5.z
  mov r6.x, |r4.y|
  add r4.y, r5.x, l(0.000000)
  div r0.z, r0.z, r4.y
  add r2.z, r2.z, r5.x
  div r2.z, -r3.y, r2.z
  add r2.x, r2.x, r2.z
  mad r2.y, r2.y, r5.x, r2.w
  add r2.z, r3.z, r5.x
  div r2.z, -r4.x, r2.z
  add r2.z, r3.x, r2.z
  ge r1.z, r5.x, r1.z
  movc r1.z, r1.z, r2.y, r2.x
  ge r2.x, r5.x, cb0[1].y
  movc r6.z, r2.x, r2.z, r1.z
  mul r6.y, r3.w, r0.z
  mov_sat r6.xyz, r6.xyzx
  add r2.xyz, r6.xxxx, l(1.000000, 0.666667, 0.333333, 0.000000)
  frc r2.xyz, r2.xyzx
  mad r2.xyz, r2.xyzx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -3.000000, -3.000000, 0.000000)
  add_sat r2.xyz, |r2.xyzx|, l(-1.000000, -1.000000, -1.000000, 0.000000)
  add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r2.xyz, r6.yyyy, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r0.xyw, r2.yzyx, r6.zzzz
  break 
  default 
  break 
endswitch 
add_sat o0.xyz, r1.wxyw, r0.wxyw
mov o0.w, l(1.000000)
ret 
// Approximately 214 instruction slots used
