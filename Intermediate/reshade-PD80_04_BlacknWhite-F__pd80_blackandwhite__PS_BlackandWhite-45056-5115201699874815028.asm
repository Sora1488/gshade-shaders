//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float2 pp;                         // Offset:    0 Size:     8
//   float2 pingpong;                   // Offset:    8 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__texNoiseRGB                  texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
mul r0.xy, v1.xyxx, l(3.750000, 2.109375, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t6.xyzw, s1
add r0.w, cb0[0].x, l(4.000000)
mad r0.xyz, r0.wwww, l(0.618034, 0.618034, 0.618034, 0.000000), r0.xyzx
frc r0.xyz, r0.xyzx
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
mov_sat r1.xyz, r1.xyzx
mad_sat r1.xyz, r0.zyxz, l(0.001961, 0.001961, 0.001961, 0.000000), r1.xyzx
max r1.xyw, r1.yzyx, l(0.000001, 0.000001, 0.000000, 0.000001)
lt r0.w, r1.x, r1.y
mov r2.xy, r1.yxyy
mov r3.xy, r2.yxyy
mov r2.zw, l(0,0,-1.000000,0.666667)
mov r3.zw, l(0,0,0,-0.333333)
movc r2.xyzw, r0.wwww, r2.xyzw, r3.xyzw
lt r0.w, r1.w, r2.x
mov r1.xyz, r2.xywx
mov r2.xyw, r1.wywx
movc r1.xyzw, r0.wwww, r1.xyzw, r2.xyzw
add r0.w, -r1.y, r1.w
min r1.y, r1.y, r1.w
add r1.y, -r1.y, r1.x
mad r1.w, r1.y, l(6.000000), l(0.000001)
div r0.w, r0.w, r1.w
add r0.w, r1.z, r0.w
mad r1.x, -r1.y, l(0.500000), r1.x
mad r1.z, -|r0.w|, l(6.000000), l(1.000000)
max r1.z, r1.z, l(0.000000)
add r1.w, r1.z, l(-0.500000)
lt r2.x, l(0.000000), r1.w
lt r1.w, r1.w, l(0.000000)
iadd r1.w, -r2.x, r1.w
itof r1.w, r1.w
add r2.x, r1.w, l(1.000000)
mul r2.x, r2.x, l(0.500000)
mad r1.z, -r1.w, r1.z, r2.x
add r1.z, r1.z, r1.z
max r1.z, r1.z, l(0.000000)
log r1.z, r1.z
mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 1.500000, 0.500000)
exp r1.z, r1.z
mad r1.z, -r1.w, r1.z, r2.x
add r2.xyzw, |r0.wwww|, l(-1.000000, -0.166667, -0.333333, -0.666667)
add r0.w, |r0.w|, l(-0.833333)
mul r0.w, r0.w, l(6.000000)
add r0.w, -|r0.w|, l(1.000000)
max r0.w, r0.w, l(0.000000)
mul r2.xyzw, r2.xyzw, l(6.000000, 6.000000, 6.000000, 6.000000)
add r2.xyzw, -|r2.xyzw|, l(1.000000, 1.000000, 1.000000, 1.000000)
max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
add r3.xyzw, r2.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
lt r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000), r3.xyzw
lt r3.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r3.xyzw, -r4.xyzw, r3.xyzw
itof r3.xyzw, r3.xyzw
add r4.xyzw, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mul r4.xyzw, r4.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
mad r2.xyzw, -r3.xyzw, r2.xyzw, r4.xyzw
mul r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
add r2.xyzw, r2.xyzw, r2.xyzw
max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
log r2.xyzw, r2.xyzw
mul r2.xyzw, r2.xyzw, l(1.500000, 1.500000, 1.500000, 1.500000)
exp r2.xyzw, r2.xyzw
mad r2.xyzw, -r3.xyzw, r2.xyzw, r4.xyzw
add r1.z, r1.z, r2.x
mul r2.xyz, r1.xxxx, r2.yzwy
mul r1.z, r1.x, r1.z
mad r1.w, r1.x, l(2.000000), l(-1.000000)
add r1.w, -|r1.w|, l(1.000001)
div r1.y, r1.y, r1.w
add r1.w, -r1.y, l(1.000000)
mad r1.y, r1.y, r1.w, r1.y
mul r1.z, r1.z, r1.y
add r1.w, -r1.x, l(1.000000)
mul r1.z, r1.w, r1.z
mad r1.z, r1.z, l(0.200000), r1.x
mul r2.xyz, r2.xyzx, r1.yyyy
mul r2.xyz, r1.wwww, r2.xyzx
mad r1.z, r2.x, l(0.400000), r1.z
mad r1.z, r2.y, l(0.600000), r1.z
mad r1.z, r2.z, l(-0.600000), r1.z
add r2.x, r0.w, l(-0.500000)
lt r2.y, l(0.000000), r2.x
lt r2.x, r2.x, l(0.000000)
iadd r2.x, -r2.y, r2.x
itof r2.x, r2.x
add r2.y, r2.x, l(1.000000)
mul r2.y, r2.y, l(0.500000)
mad r0.w, -r2.x, r0.w, r2.y
mul r2.x, r2.x, l(0.500000)
add r0.w, r0.w, r0.w
max r0.w, r0.w, l(0.000000)
log r0.w, r0.w
mul r0.w, r0.w, l(1.500000)
exp r0.w, r0.w
mad r0.w, -r2.x, r0.w, r2.y
mul r0.w, r1.x, r0.w
mul r0.w, r0.w, r1.y
mul r0.w, r1.w, r0.w
mad_sat r0.w, r0.w, l(-0.200000), r1.z
mad_sat o0.xyz, r0.xyzx, l(0.001961, 0.001961, 0.001961, 0.000000), r0.wwww
mov o0.w, l(1.000000)
ret 
// Approximately 105 instruction slots used
