//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__MeanAndVariance              texture  float4          2d            t10      1 
// __V__Maximum0                     texture  float4          2d            t12      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   x           0   TARGET   float   x   
// SV_TARGET                1   x           1   TARGET   float   x   
// SV_TARGET                2   x           2   TARGET   float   x   
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps linear v1.xy
dcl_output o0.x
dcl_output o1.x
dcl_output o2.x
dcl_temps 3
mov r0.x, l(0)
mov r0.zw, l(0,0,0,0)
mov r1.xy, l(0,-7,0,0)
loop 
  ige r1.z, r1.y, l(8)
  breakc_nz r1.z
  itof r1.z, r1.y
  mul r0.y, r1.z, l(0.003704)
  add r1.zw, r0.xxxy, v1.xxxy
  sample_indexable(texture2d)(float,float,float,float) r2.xy, r1.zwzz, t10.xyzw, s0
  add r0.zw, r0.zzzw, r2.xxxy
  sample_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t12.yxzw, s0
  max r1.x, r0.y, r1.x
  iadd r1.y, r1.y, l(1)
endloop 
mov o2.x, r1.x
mul r0.x, r0.z, r0.z
mul o0.x, r0.z, l(0.004444)
mad r0.x, -r0.x, l(0.004444), r0.w
mul o1.x, r0.x, l(0.004444)
ret 
// Approximately 21 instruction slots used
