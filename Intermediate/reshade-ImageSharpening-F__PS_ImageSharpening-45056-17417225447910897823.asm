//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float g_sldSharpen;                // Offset:    0 Size:     4
//   float g_sldDenoise;                // Offset:    4 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
sample_aoffimmi_indexable(-1,-1,0)(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
dp3 r0.x, r0.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
sample_aoffimmi_indexable(1,1,0)(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t0.wxyz, s0
dp3 r0.y, r0.yzwy, l(0.299000, 0.587000, 0.114000, 0.000000)
min r0.z, r0.y, r0.x
sample_aoffimmi_indexable(-1,1,0)(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
dp3 r0.w, r1.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
sample_aoffimmi_indexable(1,-1,0)(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
dp3 r1.x, r1.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
min r1.y, r0.w, r1.x
min r0.z, r0.z, r1.y
sample_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r1.yzw, v1.xyxx, t0.wxyz, s0
dp3 r1.y, r1.yzwy, l(0.299000, 0.587000, 0.114000, 0.000000)
sample_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t0.xyzw, s0
dp3 r1.z, r2.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
min r1.w, r1.z, r1.y
sample_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t0.xyzw, s0
dp3 r2.x, r2.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
sample_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r2.yzw, v1.xyxx, t0.wxyz, s0
dp3 r2.y, r2.yzwy, l(0.299000, 0.587000, 0.114000, 0.000000)
min r2.z, r2.y, r2.x
min r1.w, r1.w, r2.z
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t0.xyzw, s0
dp3 r2.z, r3.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
min r1.w, r1.w, r2.z
min r0.z, r0.z, r1.w
mul r1.w, r1.w, l(0.500000)
mad r0.z, r0.z, l(0.500000), r1.w
max r1.w, r0.y, r0.x
max r2.w, r0.w, r1.x
max r1.w, r1.w, r2.w
max r2.w, r1.z, r1.y
max r4.x, r2.y, r2.x
max r2.w, r2.w, r4.x
max r2.w, r2.z, r2.w
max r1.w, r1.w, r2.w
mul r2.w, r2.w, l(0.500000)
mad r1.w, r1.w, l(0.500000), r2.w
add r4.xy, r1.wwww, l(0.003906, -0.650000, 0.000000, 0.000000)
add r1.w, -r0.z, r1.w
div r0.z, r0.z, r4.x
max r2.w, r4.y, l(0.000000)
mul r2.w, r2.w, l(2.857143)
mad r2.w, -r2.w, r2.w, l(1.000000)
mul r2.w, r2.w, r2.w
min r0.z, r0.z, r2.w
mov_sat r4.xy, cb0[0].yxyy
mad r4.xy, r4.xyxx, l(-0.101000, -0.082418, 0.000000, 0.000000), l(0.001000, -0.071429, 0.000000, 0.000000)
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
mul r1.w, r1.w, r2.w
mul r1.w, r1.w, r1.w
min r0.z, r0.z, r1.w
mul r0.z, r4.y, r0.z
mad r1.y, r1.y, r0.z, r2.z
mad r1.y, r1.z, r0.z, r1.y
mad r1.y, r2.x, r0.z, r1.y
mad r1.y, r2.y, r0.z, r1.y
mul r1.z, r0.z, l(0.500000)
mad r0.z, r0.z, l(6.000000), l(1.000000)
mad r0.x, r0.x, r1.z, r1.y
mad r0.x, r0.y, r1.z, r0.x
mad r0.x, r0.w, r1.z, r0.x
mad r0.x, r1.x, r1.z, r0.x
div r0.x, r0.x, r0.z
add r0.x, -r2.z, r0.x
add o0.xyz, r0.xxxx, r3.xyzx
mov o0.w, r3.w
ret 
// Approximately 68 instruction slots used
