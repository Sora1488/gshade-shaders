//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__alInTex                      texture  float4          2d             t4      1 
// __V__detectLowTex                 texture  float4          2d            t10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
eq r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
and r1.x, r1.y, r1.x
and r1.x, r1.z, r1.x
if_nz r1.x
  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  ret 
endif 
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t4.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r2.xyz, l(0.500000, 0.500000, 0.000000, 0.000000), t10.xyzw, s0
mul r2.xyz, r2.xyzx, r2.xyzx
dp3 r2.x, r2.xyzx, l(0.013565, 0.038894, 0.003827, 0.000000)
sqrt r2.x, r2.x
mul r2.x, r2.x, l(1.250000)
mul r2.y, r2.x, r2.x
mad r2.x, r2.x, r2.x, l(1.000000)
mul r2.x, r2.x, r2.y
min r1.xyzw, r1.xyzw, l(0.032500, 0.032500, 0.032500, 0.032500)
mul r2.y, r2.x, l(13.125000)
add r2.z, r0.y, r0.x
add r2.z, r0.z, r2.z
mad r2.z, -r2.z, l(0.333333), l(1.000000)
mul r2.z, |r2.z|, |r2.z|
mad r2.y, -r2.y, r2.z, l(1.000000)
max r2.y, r2.y, l(0.000000)
mul r0.xyz, r0.xyzx, r2.yyyy
add r3.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mad r1.xyzw, -r1.xyzw, l(1.150000, 1.150000, 1.150000, 1.150000), l(1.000000, 1.000000, 1.000000, 1.000000)
mad r1.xyzw, -r3.xyzw, r1.xyzw, -r0.xyzw
mad r2.x, -r2.x, l(17.500000), l(5.000000)
mov_sat r2.y, r2.x
add r1.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mad r3.xyzw, r2.yyyy, r1.xyzw, r0.xyzw
add r2.y, r3.y, r3.x
add r2.y, r3.z, r2.y
lt r2.z, l(0.008000), r2.y
if_nz r2.z
  mov o0.xyzw, r3.xyzw
  ret 
else 
  mul_sat r2.x, r2.x, l(0.850000)
  mul r2.x, r2.y, r2.x
  mad o0.xyzw, r2.xxxx, r1.xyzw, r0.xyzw
  ret 
endif 
ret 
// Approximately 46 instruction slots used
