//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float threshold;                   // Offset:    0 Size:     4
//   int steps;                         // Offset:    4 Size:     4
//   bool test;                         // Offset:    8 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
dp3 r0.x, r0.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
movc r0.x, cb0[0].z, v1.x, r0.x
if_z cb0[0].y
  ge r0.y, cb0[0].x, r0.x
  movc r0.y, r0.y, l(0), l(1)
else 
  add r1.xyzw, v0.xxyy, v0.xxyy
  ge r1.xyzw, r1.xyzw, -r1.yyww
  movc r1.xyzw, r1.xyzw, l(2.000000,0.500000,2.000000,0.500000), l(-2.000000,-0.500000,-2.000000,-0.500000)
  mul r0.zw, r1.yyyw, v0.xxxy
  frc r0.zw, r0.zzzw
  mul r0.zw, r0.zzzw, r1.xxxz
  ge r0.zw, l(0.000000, 0.000000, 1.000000, 1.000000), r0.zzzw
  and r0.w, r0.w, r0.z
  movc r1.x, r0.w, l(0), l(1)
  add r1.yz, v0.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
  add r2.xyzw, r1.yyzz, r1.yyzz
  ge r2.xyzw, r2.xyzw, -r2.yyww
  movc r2.xyzw, r2.xyzw, l(2.000000,0.500000,2.000000,0.500000), l(-2.000000,-0.500000,-2.000000,-0.500000)
  mul r1.yz, r1.yyzy, r2.yywy
  frc r1.yz, r1.yyzy
  mul r1.yz, r1.yyzy, r2.xxzx
  ge r1.yz, l(0.000000, 1.000000, 1.000000, 0.000000), r1.yyzy
  and r1.z, r1.z, r1.y
  or r0.w, r0.w, r1.z
  movc r0.w, r0.w, l(0), l(1)
  ieq r1.z, cb0[0].y, l(1)
  if_nz r1.z
    ge r1.z, cb0[0].x, r0.x
    add r1.w, cb0[0].x, cb0[0].x
    ge r2.x, r1.w, r0.x
    lt r1.w, r1.w, r0.x
    movc r1.w, r1.w, l(1), r1.x
    movc r1.w, r2.x, r0.w, r1.w
    movc r0.y, r1.z, l(0), r1.w
  else 
    add r1.z, v0.y, l(-1.000000)
    add r1.w, r1.z, r1.z
    ge r1.w, r1.w, -r1.w
    movc r2.xy, r1.wwww, l(2.000000,0.500000,0,0), l(-2.000000,-0.500000,0,0)
    mul r1.z, r1.z, r2.y
    frc r1.z, r1.z
    mul r1.z, r1.z, r2.x
    ge r1.z, l(1.000000), r1.z
    ieq r1.w, cb0[0].y, l(2)
    if_nz r1.w
      and r1.y, r1.z, r1.y
      and r1.y, r1.y, l(1)
      ge r1.w, cb0[0].x, r0.x
      add r2.x, cb0[0].x, cb0[0].x
      ge r2.x, r2.x, r0.x
      mul r2.y, cb0[0].x, l(3.000000)
      lt r2.y, r2.y, r0.x
      movc r2.y, r2.y, l(1), r1.x
      movc r1.y, r2.x, r1.y, r2.y
      movc r0.y, r1.w, l(0), r1.y
    else 
      and r0.z, r0.z, r1.z
      and r0.z, r0.z, l(1)
      ge r1.y, cb0[0].x, r0.x
      add r1.z, cb0[0].x, cb0[0].x
      ge r1.z, r1.z, r0.x
      mul r2.xy, cb0[0].xxxx, l(3.000000, 4.000000, 0.000000, 0.000000)
      ge r1.w, r2.x, r0.x
      lt r0.x, r2.y, r0.x
      movc r0.x, r0.x, l(1), r1.x
      movc r0.x, r1.w, r0.w, r0.x
      movc r0.x, r1.z, r0.z, r0.x
      movc r0.y, r1.y, l(0), r0.x
    endif 
  endif 
endif 
itof o0.xyz, r0.yyyy
ret 
// Approximately 75 instruction slots used
