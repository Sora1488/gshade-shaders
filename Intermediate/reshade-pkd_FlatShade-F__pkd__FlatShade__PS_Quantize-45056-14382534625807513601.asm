//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int CFG_QUANT_ADJUSTORDER;         // Offset:    0 Size:     4
//   float CFG_QUANT_LUMALEVELS;        // Offset:    4 Size:     4
//   float CFG_QUANT_RGBLEVELS;         // Offset:    8 Size:     4
//   bool CFG_BACKGROUND_QUANT;         // Offset:   12 Size:     4
//   float CFG_FOREGROUND_LIMIT;        // Offset:   16 Size:     4
//   float CFG_QUANT_LUMALEVELS_BACKGROUND;// Offset:   20 Size:     4
//   float CFG_QUANT_RGBLEVELS_BACKGROUND;// Offset:   24 Size:     4
//   bool CFG_OUTLINE_ENABLED;          // Offset:   28 Size:     4 [unused]
//   float3 CFG_OUTLINE_COLOR;          // Offset:   32 Size:    12 [unused]
//   float CFG_OUTLINE_OUTER_WIDTH;     // Offset:   44 Size:     4 [unused]
//   float CFG_OUTLINE_INNER_WIDTH;     // Offset:   48 Size:     4 [unused]
//   int CFG_OUTLINE_FALLOFF;           // Offset:   52 Size:     4 [unused]
//   float CFG_OUTLINE_DEPTH_BOUNDARY_START;// Offset:   56 Size:     4 [unused]
//   float CFG_OUTLINE_DEPTH_BOUNDARY_END;// Offset:   60 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
sample_l_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t2.yzwx, s0, l(0.000000)
mad r1.x, -r0.w, l(999.000000), l(1000.000000)
div r0.w, r0.w, r1.x
ge r0.w, r0.w, cb0[1].x
ine r1.x, cb0[0].w, l(0)
and r0.w, r0.w, r1.x
movc r1.xy, r0.wwww, cb0[1].zyzz, cb0[0].zyzz
if_z cb0[0].x
  max r0.w, r0.z, r0.y
  max r0.w, r0.w, r0.x
  mul r1.z, r1.x, r0.w
  round_ni r1.w, r1.z
  div r1.w, r1.w, r1.x
  add r2.x, r0.w, -r1.w
  ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), |r2.x|
  round_pi r1.z, r1.z
  div r1.z, r1.z, r1.x
  movc r1.z, r2.x, r1.w, r1.z
  div r0.w, r1.z, r0.w
  mul r2.xyz, r0.wwww, r0.xyzx
  max r2.xyz, r2.yzxy, l(0.000001, 0.000001, 0.000001, 0.000000)
  lt r0.w, r2.x, r2.y
  mov r3.xy, r2.yxyy
  mov r3.zw, l(0,0,-1.000000,0.666667)
  mov r4.xy, r3.yxyy
  mov r4.zw, l(0,0,0,-0.333333)
  movc r3.xyzw, r0.wwww, r3.xyzw, r4.xyzw
  lt r0.w, r2.z, r3.x
  mov r2.xyw, r3.xwxz
  movc r2.xyz, r0.wwww, r2.xyzx, r2.zwxz
  min r0.w, r3.y, r2.z
  add r0.w, -r0.w, r2.x
  add r1.z, -r3.y, r2.z
  mad r1.w, r0.w, l(6.000000), l(0.000001)
  div r1.z, r1.z, r1.w
  add r1.z, r2.y, r1.z
  mad r1.w, -r0.w, l(0.500000), r2.x
  mad r2.x, r1.w, l(2.000000), l(-1.000000)
  add r2.x, -|r2.x|, l(1.000001)
  div r0.w, r0.w, r2.x
  div r2.x, l(64.000000), r1.y
  mul r1.w, r1.w, l(100.000000)
  div r1.w, r1.w, r2.x
  round_z r1.w, r1.w
  mul r1.w, r2.x, r1.w
  mad r2.xyz, |r1.zzzz|, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)
  mad_sat r2.xyz, |r2.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)
  add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  mul r1.z, r1.w, l(0.010000)
  mad r1.w, r1.w, l(0.020000), l(-1.000000)
  add r1.w, -|r1.w|, l(1.000000)
  mul r0.w, r0.w, r1.w
  mad o0.xyz, r2.xyzx, r0.wwww, r1.zzzz
else 
  max r0.xyz, r0.yzxy, l(0.000001, 0.000001, 0.000001, 0.000000)
  lt r1.z, r0.x, r0.y
  mov r2.xy, r0.yxyy
  mov r2.zw, l(0,0,-1.000000,0.666667)
  mov r3.xy, r2.yxyy
  mov r3.zw, l(0,0,0,-0.333333)
  movc r2.xyzw, r1.zzzz, r2.xyzw, r3.xyzw
  lt r1.z, r0.z, r2.x
  mov r0.xyw, r2.xwxz
  movc r0.xyz, r1.zzzz, r0.xyzx, r0.zwxz
  min r0.w, r2.y, r0.z
  add r0.w, -r0.w, r0.x
  add r0.z, -r2.y, r0.z
  mad r1.z, r0.w, l(6.000000), l(0.000001)
  div r0.z, r0.z, r1.z
  add r0.y, r0.y, r0.z
  mad r0.x, -r0.w, l(0.500000), r0.x
  mad r0.z, r0.x, l(2.000000), l(-1.000000)
  add r0.z, -|r0.z|, l(1.000001)
  div r0.z, r0.w, r0.z
  div r0.w, l(64.000000), r1.y
  mul r0.x, r0.x, l(100.000000)
  div r0.x, r0.x, r0.w
  round_z r0.x, r0.x
  mul r0.x, r0.w, r0.x
  mad r1.yzw, |r0.yyyy|, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)
  mad_sat r1.yzw, |r1.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)
  add r1.yzw, r1.yyzw, l(0.000000, -0.500000, -0.500000, -0.500000)
  mul r0.y, r0.x, l(0.010000)
  mad r0.x, r0.x, l(0.020000), l(-1.000000)
  add r0.x, -|r0.x|, l(1.000000)
  mul r0.x, r0.z, r0.x
  mad r0.xyz, r1.yzwy, r0.xxxx, r0.yyyy
  max r0.w, r0.z, r0.y
  max r0.w, r0.w, r0.x
  mul r1.y, r1.x, r0.w
  round_ni r1.z, r1.y
  div r1.z, r1.z, r1.x
  add r1.w, r0.w, -r1.z
  ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), |r1.w|
  round_pi r1.y, r1.y
  div r1.x, r1.y, r1.x
  movc r1.x, r1.w, r1.z, r1.x
  div r0.w, r1.x, r0.w
  mul o0.xyz, r0.wwww, r0.xyzx
endif 
ret 
// Approximately 102 instruction slots used
