//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__texSSAONoise                 texture  float4          2d             t4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 9
lt r0.xy, l(1.000000, 1.000000, 0.000000, 0.000000), v1.xyxx
or r0.x, r0.y, r0.x
discard_nz r0.x
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t2.xyzw, s0, l(0.000000)
mad r0.y, -r0.x, l(999.000000), l(1000.000000)
div r0.z, r0.x, r0.y
add r1.xyzw, v1.xyxy, l(0.000000, 0.001000, 0.001000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t2.yzwx, s0, l(0.000000)
mad r1.x, -r0.w, l(999.000000), l(1000.000000)
div r0.w, r0.w, r1.x
sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t2.xyzw, s0, l(0.000000)
mad r1.y, -r1.x, l(999.000000), l(1000.000000)
div r1.x, r1.x, r1.y
add r2.y, -r0.z, r0.w
add r2.x, -r0.z, r1.x
mul r1.xy, r2.xyxx, l(0.001000, 0.001000, 0.000000, 0.000000)
mov r1.z, l(0.000001)
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r1.xyzx, l(0.333000, 0.333000, 0.333000, 0.000000)
mul o0.w, r0.w, l(0.100000)
lt r0.w, l(0.600000), r0.z
if_nz r0.w
  mov o0.xyz, l(0.500000,0.500000,0.500000,0)
else 
  sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t4.xyzw, s1, l(0.000000)
  add r1.xyzw, r1.xyzz, l(-0.500000, -0.500000, -0.500000, 0.500000)
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
  mul r2.xy, r1.yxyy, r1.yxyy
  mul r1.w, r1.y, -r0.w
  mul r3.z, r1.x, r1.w
  mad r3.xy, r2.xyxx, r0.wwww, r1.zzzz
  mad r0.w, r0.z, l(10.000000), l(1.000000)
  div r0.w, l(100.000000), r0.w
  mov r3.w, r1.x
  mov r2.xy, r3.zyzz
  mov r2.z, r1.y
  mul r1.xyz, r1.xyzx, l(-1.000000, -1.000000, 1.000000, 0.000000)
  mov r0.xy, v1.xyxx
  mov r4.xy, l(0,0.005000,0,0)
  mov r1.w, l(0)
  mov r2.w, l(-1)
  loop 
    breakc_z r2.w
    mov r4.zw, r4.yyyx
    mov r3.y, l(-1)
    loop 
      ilt r5.x, l(1), r3.y
      breakc_nz r5.x
      itof r5.x, r3.y
      mov r6.xy, r4.zwzz
      mov r5.w, l(-1)
      loop 
        ilt r6.z, l(1), r5.w
        breakc_nz r6.z
        itof r5.y, r5.w
        mov r6.zw, r6.xxxy
        mov r7.x, l(-1)
        loop 
          ilt r7.y, l(1), r7.x
          breakc_nz r7.y
          itof r5.z, r7.x
          dp3 r7.y, r5.xyzx, r5.xyzx
          rsq r7.y, r7.y
          mul r7.yzw, r5.xxyz, r7.yyyy
          mul r6.z, r6.z, l(1.150000)
          mul r7.yzw, r6.zzzz, r7.yyzw
          dp3 r8.x, r7.yzwy, r3.xzwx
          dp3 r8.y, r7.yzwy, r2.xyzx
          dp3 r5.z, r7.yzwy, r1.xyzx
          mul r8.z, r0.z, r5.z
          add r7.yzw, r0.xxyz, r8.xxyz
          sample_l_indexable(texture2d)(float,float,float,float) r5.z, r7.yzyy, t2.yzxw, s0, l(0.000000)
          mad r7.y, -r5.z, l(999.000000), l(1000.000000)
          div r5.z, r5.z, r7.y
          ge r7.y, r5.z, l(10000000.000000)
          add r7.z, r6.w, l(1.000000)
          add r8.x, r0.z, -r5.z
          mul_sat r8.x, r0.w, |r8.x|
          lt r5.z, r7.w, r5.z
          and r7.w, r5.z, l(0x3f800000)
          movc r5.z, r5.z, l(-0.500000), l(0.500000)
          mad r5.z, r8.x, r5.z, r7.w
          add r5.z, r5.z, r6.w
          movc r6.w, r7.y, r7.z, r5.z
          iadd r7.x, r7.x, l(2)
        endloop 
        mov r6.xy, r6.zwzz
        iadd r5.w, r5.w, l(2)
      endloop 
      mov r4.zw, r6.xxxy
      iadd r3.y, r3.y, l(2)
    endloop 
    mov r4.xy, r4.wzww
    iadd r1.w, r1.w, l(1)
    itof r3.y, r1.w
    lt r2.w, r3.y, l(2.000000)
  endloop 
  mul o0.xyz, r4.xxxx, l(0.062500, 0.062500, 0.062500, 0.000000)
endif 
ret 
// Approximately 102 instruction slots used
