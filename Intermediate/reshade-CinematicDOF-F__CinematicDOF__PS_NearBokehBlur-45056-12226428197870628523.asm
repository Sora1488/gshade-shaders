//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s1                              sampler      NA          NA             s1      1 
// __s2                              sampler      NA          NA             s2      1 
// __V__CinematicDOF__texCDCoCBlurred    texture  float4          2d            t18      1 
// __V__CinematicDOF__texCDBuffer2    texture  float4          2d            t22      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     z         1     NONE   float     z 
// TEXCOORD                 2      w        1     NONE   float       
// TEXCOORD                 3   x           2     NONE   float   x   
// TEXCOORD                 4    y          2     NONE   float       
// TEXCOORD                 5     z         2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t18
dcl_resource_texture2d (float,float,float,float) t22
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v2.x
dcl_output o0.xyzw
dcl_temps 10
sample_l_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t22.xyzw, s1, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.xy, v1.xyxx, t18.xyzw, s2, l(0.000000)
lt r0.w, l(0.000000), r1.x
if_nz r0.w
  max r0.w, v1.z, l(1.000000)
  add r1.z, r0.w, l(1.000000)
  mul r2.xyz, r0.xyzx, r1.xxxx
  mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r1.w, r1.x, v2.x
  div r0.w, r1.w, r0.w
  mul r3.xy, r0.wwww, l(0.000521, 0.000926, 0.000000, 0.000000)
  add r3.zw, v1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
  dp2 r1.w, r3.zwzz, r3.zwzz
  rsq r1.w, r1.w
  mul r3.zw, r1.wwww, r3.zzzw
  max r1.w, r3.w, l(-0.500000)
  min r1.w, r1.w, l(0.500000)
  min r2.w, |r3.z|, |r1.w|
  max r3.w, |r3.z|, |r1.w|
  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
  mul r2.w, r2.w, r3.w
  mul r3.w, r2.w, r2.w
  mad r4.x, r3.w, l(0.020835), l(-0.085133)
  mad r4.x, r3.w, r4.x, l(0.180141)
  mad r4.x, r3.w, r4.x, l(-0.330299)
  mad r3.w, r3.w, r4.x, l(0.999866)
  mul r4.x, r2.w, r3.w
  lt r4.y, |r3.z|, |r1.w|
  mad r4.x, r4.x, l(-2.000000), l(1.570796)
  and r4.x, r4.y, r4.x
  mad r2.w, r2.w, r3.w, r4.x
  lt r3.w, r3.z, -r3.z
  and r3.w, r3.w, l(0xc0490fdb)
  add r2.w, r2.w, r3.w
  min r3.w, r3.z, r1.w
  max r1.w, r3.z, r1.w
  lt r3.z, r3.w, -r3.w
  ge r1.w, r1.w, -r1.w
  and r1.w, r1.w, r3.z
  movc r1.w, r1.w, -r2.w, r2.w
  add r1.w, r1.w, l(-3.141593)
  sincos r4.x, r5.x, r1.w
  mov r6.x, -r4.x
  mov r6.y, r5.x
  mov r6.z, r4.x
  mov r4.xyz, r2.xyzx
  mov r3.zw, r3.xxxy
  mov r1.w, l(0.500000)
  mov r2.w, l(7.000000)
  mov r4.w, l(0)
  loop 
    ge r5.x, r4.w, r1.z
    breakc_nz r5.x
    div r5.x, l(6.283185), r2.w
    div r5.y, r4.w, r1.z
    add r5.z, -r5.y, l(1.000000)
    mad r5.y, r5.z, l(0.500000), r5.y
    mov r7.xyz, r4.xyzx
    mov r5.z, r1.w
    mov r5.w, r5.x
    mov r6.w, l(0)
    loop 
      ge r7.w, r6.w, r2.w
      breakc_nz r7.w
      sincos r8.x, r9.x, r5.w
      mov r9.y, r8.x
      dp2 r8.x, r9.yxyy, r6.xyxx
      dp2 r8.y, r9.yxyy, r6.yzyy
      mad r8.xy, r8.xyxx, r3.zwzz, v1.xyxx
      sample_l_indexable(texture2d)(float,float,float,float) r8.xyz, r8.xyxx, t22.xyzw, s1, l(0.000000)
      mad r7.xyz, r8.xyzx, r5.yyyy, r7.xyzx
      add r5.zw, r5.yyyx, r5.zzzw
      add r6.w, r6.w, l(1.000000)
    endloop 
    mov r4.xyz, r7.xyzx
    mov r1.w, r5.z
    add r2.w, r2.w, l(7.000000)
    mad r3.zw, r0.wwww, l(0.000000, 0.000000, 0.000521, 0.000926), r3.zzzw
    add r4.w, r4.w, l(1.000000)
  endloop 
  eq r0.w, r1.w, l(0.000000)
  and r0.w, r0.w, l(0x3f800000)
  add r0.w, r0.w, r1.w
  div o0.xyz, r4.xyzx, r0.wwww
  lt r0.w, l(0.100000), r1.x
  ge r1.z, l(0.000000), r1.y
  movc r1.z, r1.z, l(2.000000), l(1.000000)
  mul r1.z, r1.x, r1.z
  max r1.x, -r1.y, r1.x
  movc r0.w, r0.w, r1.z, r1.x
  mul_sat o0.w, r0.w, l(0.400000)
else 
  mov o0.xyz, r0.xyzx
  mov o0.w, l(0)
endif 
ret 
// Approximately 96 instruction slots used
