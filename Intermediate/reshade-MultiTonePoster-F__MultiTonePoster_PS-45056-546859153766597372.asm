//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float4 Color1;                     // Offset:    0 Size:    16
//   int Pattern12;                     // Offset:   16 Size:     4
//   int Width12;                       // Offset:   20 Size:     4
//   float4 Color2;                     // Offset:   32 Size:    16
//   int Pattern23;                     // Offset:   48 Size:     4
//   int Width23;                       // Offset:   52 Size:     4
//   float4 Color3;                     // Offset:   64 Size:    16
//   int Pattern34;                     // Offset:   80 Size:     4
//   int Width34;                       // Offset:   84 Size:     4
//   float4 Color4;                     // Offset:   96 Size:    16
//   float fUIStrength;                 // Offset:  112 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 2
dcl_indexableTemp x0[7], 4
dcl_indexableTemp x1[12], 4
mov x1[0].x, l(0.500000)
ishl r0.x, cb0[1].y, l(1)
itof r0.x, r0.x
mul r0.yz, r0.xxxx, v0.xxyx
ge r0.yz, r0.yyzy, -r0.yyzy
movc r0.xy, r0.yzyy, r0.xxxx, -r0.xxxx
div r0.zw, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xxxy
mul r0.zw, r0.zzzw, v0.xxxy
frc r0.zw, r0.zzzw
mul r0.xy, r0.zwzz, r0.xyxx
itof r0.z, cb0[1].y
ge r0.xy, r0.zzzz, r0.xyxx
and r0.xy, r0.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
mov x1[1].x, r0.x
mov x1[2].x, r0.y
add r0.x, r0.y, r0.x
ge r0.x, l(0.000000), r0.x
mov x1[4].x, l(0.500000)
ishl r0.y, cb0[3].y, l(1)
itof r0.y, r0.y
mul r0.zw, r0.yyyy, v0.xxxy
ge r0.zw, r0.zzzw, -r0.zzzw
movc r0.yz, r0.zzwz, r0.yyyy, -r0.yyyy
div r1.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r0.yzyy
mul r1.xy, r1.xyxx, v0.xyxx
frc r1.xy, r1.xyxx
mul r0.yz, r0.yyzy, r1.xxyx
itof r0.w, cb0[3].y
ge r0.yz, r0.wwww, r0.yyzy
and r0.xyz, r0.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mov x1[5].x, r0.y
mov x1[6].x, r0.z
add r0.y, r0.z, r0.y
ge r0.y, l(0.000000), r0.y
mov x1[8].x, l(0.500000)
ishl r0.z, cb0[5].y, l(1)
itof r0.z, r0.z
mul r1.xy, r0.zzzz, v0.xyxx
ge r1.xy, r1.xyxx, -r1.xyxx
movc r0.zw, r1.xxxy, r0.zzzz, -r0.zzzz
div r1.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r0.zwzz
mul r1.xy, r1.xyxx, v0.xyxx
frc r1.xy, r1.xyxx
mul r0.zw, r0.zzzw, r1.xxxy
itof r1.x, cb0[5].y
ge r0.zw, r1.xxxx, r0.zzzw
and r0.yzw, r0.yyzw, l(0, 0x3f800000, 0x3f800000, 0x3f800000)
mov x1[9].x, r0.z
mov x1[10].x, r0.w
add r0.z, r0.w, r0.z
ge r0.z, l(0.000000), r0.z
and r0.z, r0.z, l(0x3f800000)
mov x1[3].x, r0.x
mov x1[7].x, r0.y
mov x1[11].x, r0.z
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
add r1.xyz, -r0.xyzx, cb0[0].xyzx
mad r1.xyz, cb0[0].wwww, r1.xyzx, r0.xyzx
mov x0[0].xyz, r1.xyzx
add r0.w, r1.z, cb0[2].w
mul r0.w, r0.w, l(0.500000)
mov r1.x, cb0[1].x
mov r1.x, x1[r1.x + 0].x
add r1.yzw, -cb0[0].xxyz, cb0[2].xxyz
mad r1.xyz, r1.xxxx, r1.yzwy, cb0[0].xyzx
add r1.xyz, -r0.xyzx, r1.xyzx
mad r1.xyz, r0.wwww, r1.xyzx, r0.xyzx
mov x0[1].xyz, r1.xyzx
add r1.xyz, -r0.xyzx, cb0[2].xyzx
mad r1.xyz, cb0[2].wwww, r1.xyzx, r0.xyzx
mov x0[2].xyz, r1.xyzx
add r0.w, r1.z, cb0[4].w
mul r0.w, r0.w, l(0.500000)
iadd r1.x, cb0[3].x, l(4)
mov r1.x, x1[r1.x + 0].x
add r1.yzw, -cb0[2].xxyz, cb0[4].xxyz
mad r1.xyz, r1.xxxx, r1.yzwy, cb0[2].xyzx
add r1.xyz, -r0.xyzx, r1.xyzx
mad r1.xyz, r0.wwww, r1.xyzx, r0.xyzx
mov x0[3].xyz, r1.xyzx
add r1.xyz, -r0.xyzx, cb0[4].xyzx
mad r1.xyz, cb0[4].wwww, r1.xyzx, r0.xyzx
mov x0[4].xyz, r1.xyzx
add r0.w, r1.z, cb0[6].w
mul r0.w, r0.w, l(0.500000)
iadd r1.x, cb0[5].x, l(8)
mov r1.x, x1[r1.x + 0].x
add r1.yzw, -cb0[4].xxyz, cb0[6].xxyz
mad r1.xyz, r1.xxxx, r1.yzwy, cb0[4].xyzx
add r1.xyz, -r0.xyzx, r1.xyzx
mad r1.xyz, r0.wwww, r1.xyzx, r0.xyzx
mov x0[5].xyz, r1.xyzx
add r1.xyz, -r0.xyzx, cb0[6].xyzx
mad r1.xyz, cb0[6].wwww, r1.xyzx, r0.xyzx
mov x0[6].xyz, r1.xyzx
dp3 r0.w, r0.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
mul r0.w, r0.w, l(7.000000)
round_ni r0.w, r0.w
ftoi r0.w, r0.w
mov r1.xyz, x0[r0.w + 0].xyzx
add r1.xyz, -r0.xyzx, r1.xyzx
mad o0.xyz, cb0[7].xxxx, r1.xyzx, r0.xyzx
ret 
// Approximately 103 instruction slots used
