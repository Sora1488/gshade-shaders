//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float fMXAOAmbientOcclusionAmount; // Offset:    0 Size:     4
//   float fMXAOSampleRadius;           // Offset:    4 Size:     4 [unused]
//   float iMXAOSampleCount;            // Offset:    8 Size:     4 [unused]
//   float iMXAOBayerDitherLevel;       // Offset:   12 Size:     4 [unused]
//   float fMXAONormalBias;             // Offset:   16 Size:     4 [unused]
//   bool bMXAOSmoothNormalsEnable;     // Offset:   20 Size:     4 [unused]
//   float fMXAOBlurSharpness;          // Offset:   24 Size:     4
//   float fMXAOBlurSteps;              // Offset:   28 Size:     4
//   bool bMXAODebugViewEnable;         // Offset:   32 Size:     4
//   float fMXAOFadeoutStart;           // Offset:   36 Size:     4
//   float fMXAOFadeoutEnd;             // Offset:   40 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__texColorBypass               texture  float4          2d             t4      1 
// __V__texDistance                  texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t6.xyzw, s0, l(0.000000)
mul r0.w, r0.w, l(0.500000)
mad r2.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mov r2.z, l(1.000000)
mul r1.yzw, r1.xxxx, r2.xxyz
dp3 r2.x, r1.yzwy, r1.yzwy
rsq r2.x, r2.x
mul r1.yzw, r1.yyzw, r2.xxxx
dp3 r1.y, r0.xyzx, r1.yzwy
mov_sat r1.y, -r1.y
round_z r1.z, cb0[1].w
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
mov r2.x, l(0.500000)
mov r2.y, r0.w
mov r1.w, l(-1)
loop 
  ilt r2.z, l(1), r1.w
  breakc_nz r2.z
  itof r2.z, r1.w
  mov r3.xy, r2.xyxx
  mov r2.w, l(1.000000)
  loop 
    lt r3.z, r1.z, r2.w
    breakc_nz r3.z
    mad r3.z, r2.w, l(2.000000), l(-0.500000)
    mul r3.z, r2.z, r3.z
    mad r3.zw, r3.zzzz, l(0.000000, 0.000000, 0.000000, 0.000926), v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
    mad r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r3.z, r3.zwzz, t6.yzxw, s0, l(0.000000)
    add r3.z, -r1.x, r3.z
    dp3 r3.w, r4.xyzx, r4.xyzx
    rsq r3.w, r3.w
    mul r4.xyz, r3.wwww, r4.xyzx
    dp3_sat r3.w, r4.xyzx, r0.xyzx
    add r3.w, -r3.w, l(1.000000)
    mul r3.z, |r3.z|, cb0[1].z
    mul r3.z, r1.y, r3.z
    mul r3.z, r3.z, l(5.000000)
    rcp r3.z, r3.z
    mul r3.w, r3.w, cb0[1].z
    mul r3.w, r3.w, l(10.000000)
    rcp r3.w, r3.w
    mov_sat r3.zw, r3.zzzw
    min r3.z, r3.z, r3.w
    mad r3.y, r4.w, r3.z, r3.y
    add r3.x, r3.z, r3.x
    add r2.w, r2.w, l(1.000000)
  endloop 
  mov r2.xy, r3.xyxx
  iadd r1.w, r1.w, l(2)
endloop 
div_sat r0.x, r2.y, r2.x
sample_l_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t2.yxzw, s0, l(0.000000)
mad r0.z, -r0.y, l(999.000000), l(1000.000000)
div r0.y, r0.y, r0.z
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t4.xyzw, s0
mov_sat r1.xyzw, r1.xyzw
dp3 r0.z, r1.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
mad r0.x, -r0.x, r0.x, l(1.000000)
mul r0.w, cb0[0].x, l(4.000000)
log r0.x, r0.x
mul r0.xz, r0.xxzx, r0.wwzw
exp r0.x, r0.x
add r0.x, -r0.x, l(1.000000)
mad r0.z, r0.z, -r0.x, r0.x
movc r0.x, cb0[2].x, r0.x, r0.z
max r0.zw, cb0[2].yyyz, l(0.000000, 0.000000, 0.000100, 0.000100)
max r0.y, r0.y, l(0.000100)
add r0.yw, -r0.zzzz, r0.yyyw
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul_sat r0.y, r0.z, r0.y
mad r0.z, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.z
mad r0.x, r0.y, -r0.x, r0.x
add_sat r0.x, -r0.x, l(1.000000)
mul r0.yzw, r0.xxxx, r1.xxyz
movc o0.xyz, cb0[2].xxxx, r0.xxxx, r0.yzwy
mov o0.w, r1.w
ret 
// Approximately 85 instruction slots used
