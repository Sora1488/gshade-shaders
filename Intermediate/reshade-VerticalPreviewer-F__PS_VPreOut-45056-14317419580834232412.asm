//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool VPreToggle;                   // Offset:    0 Size:     4
//   int cLayerVPre_Angle;              // Offset:    4 Size:     4
//   float cLayerVPre_Scale;            // Offset:    8 Size:     4
//   float cLayerVPre_PosX;             // Offset:   12 Size:     4
//   float cLayerVPre_PosY;             // Offset:   16 Size:     4
//   int cLayerVPre_Composition;        // Offset:   20 Size:     4 [unused]
//   float4 UIGridColor;                // Offset:   32 Size:    16 [unused]
//   float UIGridLineWidth;             // Offset:   48 Size:     4 [unused]
//   int cLayerVPre_CompositionARatio;  // Offset:   52 Size:     4 [unused]
//   float4 UIGridColorARatio;          // Offset:   64 Size:    16 [unused]
//   float UIGridLineWidthARatio;       // Offset:   80 Size:     4 [unused]
//   float cLayer_Blend_BGFill;         // Offset:   84 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__texVoid                      texture  float4          2d             t4      1 
// __V__texDrawARatio                texture  float4          2d             t8      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
if_nz cb0[0].x
  sample_indexable(texture2d)(float,float,float,float) o0.xyzw, v1.xyxx, t0.xyzw, s0
else 
  switch cb0[0].y
    case l(0)
    mov r0.x, l(-1.570796)
    break 
    case l(1)
    mov r0.x, l(0)
    break 
    case l(2)
    mov r0.x, l(1.570796)
    break 
    case l(3)
    mov r0.x, l(3.141593)
    break 
    case l(4)
    mov r0.x, l(0)
    break 
    default 
    mov r0.x, l(0)
    break 
  endswitch 
  sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t8.xyzw, s0
  switch cb0[0].y
    case l(4)
    break 
    default 
    mul r0.y, cb0[0].z, cb0[0].z
    mul r0.yz, r0.yyyy, l(0.000000, -0.777778, 0.437500, 0.000000)
    div r0.yz, l(1.000000, 1.000000, 1.000000, 1.000000), r0.yyzy
    sincos r2.x, r3.x, r0.x
    mul r2.x, r2.x, l(-0.777778)
    sincos r0.x, null, -r0.x
    mul r2.w, r0.x, l(0.437500)
    mul r2.yz, r3.xxxx, l(0.000000, -0.777778, 0.437500, 0.000000)
    mov r3.xz, v1.xxyx
    mov r3.y, -cb0[0].w
    dp2 r3.x, r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    mov r3.w, -cb0[1].x
    dp2 r3.y, r3.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
    dp2 r0.x, r3.xyxx, r2.ywyy
    dp2 r0.w, r3.xyxx, r2.xzxx
    mul r0.x, r0.y, r0.x
    mul r0.y, r0.z, r0.w
    add r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t4.xyzw, s0
    mov_sat r0.zw, r0.xxxy
    eq r0.zw, r0.zzzw, r0.xxxy
    and r0.z, r0.w, r0.z
    and r0.z, r0.z, l(0x3f800000)
    mul r0.w, r0.z, r2.w
    sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyxx, t8.xyzw, s0
    add r0.x, cb0[5].y, l(0.500000)
    ne r0.y, cb0[5].y, l(0.000000)
    mul r4.xyz, r1.xyzx, r0.xxxx
    add r5.xyz, r4.xyzx, r4.xyzx
    add r6.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r6.xyz, r6.xyzx, r6.xyzx
    add r4.w, -r0.x, l(1.000000)
    mad r6.xyz, -r6.xyzx, r4.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
    ge r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, l(0x3f800000)
    mad r4.xyz, -r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r6.xyzx
    mad r4.xyz, r0.xxxx, r4.xyzx, r5.xyzx
    movc r1.xyz, r0.yyyy, r4.xyzx, r1.xyzx
    mad r2.xyzw, r2.xyzw, r0.zzzz, -r1.xyzw
    mad r2.xyzw, r0.wwww, r2.xyzw, r1.xyzw
    mad r1.xyzw, r3.xyzw, r0.zzzz, r2.xyzw
    break 
  endswitch 
  mov o0.xyzw, r1.xyzw
endif 
ret 
// Approximately 74 instruction slots used
