//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int Buffer1;                       // Offset:    0 Size:     4 [unused]
//   bool InvertMask;                   // Offset:    4 Size:     4
//   bool ShowMask;                     // Offset:    8 Size:     4 [unused]
//   int Buffer2;                       // Offset:   12 Size:     4 [unused]
//   bool FilterColor;                  // Offset:   16 Size:     4
//   bool ShowSelectedHue;              // Offset:   20 Size:     4 [unused]
//   float Value;                       // Offset:   24 Size:     4
//   float ValueRange;                  // Offset:   28 Size:     4
//   float ValueEdge;                   // Offset:   32 Size:     4
//   float Hue;                         // Offset:   36 Size:     4
//   float HueRange;                    // Offset:   40 Size:     4
//   float Saturation;                  // Offset:   44 Size:     4
//   float SaturationRange;             // Offset:   48 Size:     4
//   int Buffer3;                       // Offset:   52 Size:     4 [unused]
//   bool FilterDepth;                  // Offset:   56 Size:     4
//   float FocusDepth;                  // Offset:   60 Size:     4
//   float FocusRangeDepth;             // Offset:   64 Size:     4
//   float FocusEdgeDepth;              // Offset:   68 Size:     4
//   bool Spherical;                    // Offset:   72 Size:     4
//   int Sphere_FieldOfView;            // Offset:   76 Size:     4
//   float Sphere_FocusHorizontal;      // Offset:   80 Size:     4
//   float Sphere_FocusVertical;        // Offset:   84 Size:     4
//   int Buffer4;                       // Offset:   88 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
add r0.xy, v1.xyxx, -cb0[5].xyxx
mul r0.xy, r0.xyxx, l(1920.000000, 1080.000000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, r0.xyxx
add r0.x, r0.y, r0.x
sqrt r0.x, r0.x
itof r0.y, cb0[4].w
mul r0.y, r0.y, l(0.000521)
mul r0.x, r0.y, r0.x
mul r0.x, r0.x, l(0.017453)
sincos null, r0.x, r0.x
mul r0.y, cb0[3].w, cb0[3].w
sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t2.yzxw, s0, l(0.000000)
mad r0.w, -r0.z, l(999.000000), l(1000.000000)
div r0.z, r0.z, r0.w
mad r0.y, r0.z, r0.z, r0.y
dp2 r0.w, cb0[3].wwww, r0.zzzz
add r0.z, r0.z, -cb0[3].w
mad r0.x, -r0.w, r0.x, r0.y
sqrt r0.x, r0.x
movc r0.x, cb0[4].z, r0.x, |r0.z|
add r0.y, r0.x, -cb0[4].x
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[4].y
mul_sat r0.y, r0.z, r0.y
mad r0.z, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.z
min r0.y, r0.y, l(1.000000)
add r0.y, -r0.y, l(1.000000)
add r0.z, cb0[4].y, cb0[4].x
lt r0.x, r0.z, r0.x
movc r0.x, r0.x, l(0), r0.y
movc r0.y, cb0[3].z, l(0), l(1.000000)
max r0.x, r0.y, r0.x
mov r1.zw, l(0,0,-1.000000,0.666667)
mov r2.zw, l(0,0,1.000000,-1.000000)
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t0.wxyz, s0
ge r3.x, r0.z, r0.w
and r3.x, r3.x, l(0x3f800000)
mov r1.xy, r0.wzww
add r2.xy, r0.zwzz, -r1.xyxx
mad r1.xyzw, r3.xxxx, r2.xywz, r1.xywz
mov r2.z, r1.w
ge r3.x, r0.y, r1.x
and r3.x, r3.x, l(0x3f800000)
mov r1.w, r0.y
mov o0.xyz, r0.yzwy
mov r2.xyw, r1.wywx
add r2.xyzw, -r1.xyzw, r2.xyzw
mad r1.xyzw, r3.xxxx, r2.xyzw, r1.xyzw
min r0.y, r1.y, r1.w
add r0.y, -r0.y, r1.x
mad r0.z, r0.y, l(6.000000), l(0.000000)
add r0.w, -r1.y, r1.w
div r0.z, r0.w, r0.z
add r0.z, r0.z, r1.z
add r0.z, |r0.z|, -cb0[2].y
add r0.w, -|r0.z|, l(1.000000)
add r1.y, r1.x, l(0.000000)
add r1.x, r1.x, -cb0[1].z
add r1.x, |r1.x|, -cb0[1].w
div r0.y, r0.y, r1.y
mul r1.y, r0.y, r0.y
add r0.y, r0.y, -cb0[2].w
ge r0.y, cb0[3].x, |r0.y|
mul r1.yz, r1.yyyy, l(0.000000, -288.538818, -144.269409, 0.000000)
exp r1.yz, r1.yyzy
add r1.yz, r1.yyzy, cb0[2].zzzz
lt r0.w, r0.w, r1.z
lt r0.z, |r0.z|, r1.y
or r0.z, r0.w, r0.z
and r0.yz, r0.yyzy, l(0, 1, 1, 0)
imul null, r0.y, r0.z, r0.y
itof r0.y, r0.y
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[2].x
mul_sat r0.z, r0.z, r1.x
mad r0.w, r0.z, l(-2.000000), l(3.000000)
mul r0.z, r0.z, r0.z
mad r0.z, -r0.w, r0.z, l(1.000000)
mul r0.y, r0.z, r0.y
movc r0.z, cb0[1].x, l(0), l(1.000000)
max r0.y, r0.z, r0.y
mul r0.z, r0.x, r0.y
mad r0.x, -r0.y, r0.x, l(1.000000)
movc r0.x, cb0[0].y, r0.x, l(0)
movc r0.y, cb0[0].y, l(0), r0.z
add o0.w, r0.x, r0.y
ret 
// Approximately 87 instruction slots used
