//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float iUILumaLevels;               // Offset:    0 Size:     4
//   int iUIStepType;                   // Offset:    4 Size:     4
//   float fUIStepContinuity;           // Offset:    8 Size:     4
//   float fUISlope;                    // Offset:   12 Size:     4
//   bool iUIDebugOverlayPosterizeLevels;// Offset:   16 Size:     4
//   float fUITint;                     // Offset:   20 Size:     4
//   float fUIStrength;                 // Offset:   24 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
dp3 r0.w, r0.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
add r1.xyz, -r0.wwww, r0.xyzx
round_z r1.w, cb0[0].x
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r2.y, r0.w, r1.w
round_ni r2.z, r2.y
frc r2.y, r2.y
ieq r2.w, cb0[0].y, l(1)
if_nz r2.w
  mad r3.x, r2.y, l(-2.000000), l(3.000000)
  mul r3.y, r2.y, r2.y
  mul r3.x, r3.y, r3.x
  mul r3.x, r2.x, r3.x
else 
  ieq r3.y, cb0[0].y, l(2)
  if_nz r3.y
    add r3.y, r2.y, l(-0.500000)
    mul r3.y, r3.y, -cb0[0].w
    mul r3.y, r3.y, l(1.442695)
    exp r3.y, r3.y
    add r3.y, r3.y, l(1.000000)
    div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
    mul r3.x, r2.x, r3.y
  else 
    ieq r3.y, cb0[0].y, l(3)
    lt r3.z, r2.y, l(0.500000)
    log r3.w, r2.y
    mul r3.w, r3.w, cb0[0].w
    exp r3.w, r3.w
    exp r4.x, cb0[0].w
    mul r3.w, r3.w, r4.x
    mul r3.w, r2.x, r3.w
    mul r3.w, r3.w, l(0.500000)
    add r4.y, -r2.y, l(1.000000)
    log r4.y, r4.y
    mul r4.y, r4.y, cb0[0].w
    exp r4.y, r4.y
    mul r4.x, r4.x, r4.y
    mad r4.x, -r4.x, l(0.500000), l(1.000000)
    mul r4.x, r2.x, r4.x
    movc r3.z, r3.z, r3.w, r4.x
    mul r2.y, r2.x, r2.y
    movc r3.x, r3.y, r3.z, r2.y
  endif 
endif 
mul r2.y, r2.z, r2.x
mad r2.y, cb0[0].z, r3.x, r2.y
max r2.z, r0.z, r0.y
max r2.z, r0.x, r2.z
add r2.z, -r2.z, l(1.000000)
add r3.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r3.xyz, -r2.zzzz, r3.xyzx
add r2.z, -r2.z, l(1.000000)
div r3.xyz, r3.xyzx, r2.zzzz
add_sat r3.xyz, r3.xyzx, l(0.200000, -0.100000, -0.200000, 0.000000)
add r3.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r1.xyz, r1.xyzx, r2.yyyy
mul r4.xyz, r1.xyzx, r3.xyzx
add r5.xyz, r4.xyzx, r4.xyzx
add r6.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r6.xyz, r6.xyzx, r6.xyzx
add r3.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r3.xyz, -r6.xyzx, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
ge r0.w, r0.w, l(0.500000)
and r0.w, r0.w, l(0x3f800000)
mad r3.xyz, -r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r3.xyzx
mad r3.xyz, r0.wwww, r3.xyzx, r5.xyzx
add r3.xyz, -r1.xyzx, r3.xyzx
mad r1.xyz, cb0[1].yyyy, r3.xyzx, r1.xyzx
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, cb0[1].zzzz, r1.xyzx, r0.xyzx
if_nz cb0[1].x
  mul r0.w, r1.w, v1.x
  round_ni r1.x, r0.w
  frc r0.w, r0.w
  if_nz r2.w
    mad r1.y, r0.w, l(-2.000000), l(3.000000)
    mul r1.z, r0.w, r0.w
    mul r1.y, r1.z, r1.y
    mul r1.y, r2.x, r1.y
  else 
    ieq r1.z, cb0[0].y, l(2)
    if_nz r1.z
      add r1.z, r0.w, l(-0.500000)
      mul r1.z, r1.z, -cb0[0].w
      mul r1.z, r1.z, l(1.442695)
      exp r1.z, r1.z
      add r1.z, r1.z, l(1.000000)
      div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
      mul r1.y, r2.x, r1.z
    else 
      ieq r1.z, cb0[0].y, l(3)
      lt r1.w, r0.w, l(0.500000)
      log r2.y, r0.w
      mul r2.y, r2.y, cb0[0].w
      exp r2.y, r2.y
      exp r2.z, cb0[0].w
      mul r2.y, r2.z, r2.y
      mul r2.y, r2.x, r2.y
      mul r2.y, r2.y, l(0.500000)
      add r2.w, -r0.w, l(1.000000)
      log r2.w, r2.w
      mul r2.w, r2.w, cb0[0].w
      exp r2.w, r2.w
      mul r2.z, r2.z, r2.w
      mad r2.z, -r2.z, l(0.500000), l(1.000000)
      mul r2.z, r2.x, r2.z
      movc r1.w, r1.w, r2.y, r2.z
      mul r0.w, r2.x, r0.w
      movc r1.y, r1.z, r1.w, r0.w
    endif 
  endif 
  mul r0.w, r1.x, r2.x
  mad r0.w, cb0[0].z, r1.y, r0.w
  add r0.w, -r0.w, l(1.000000)
  add r0.w, -r0.w, v1.y
  mul r0.w, |r0.w|, l(-1558.110596)
  exp r0.w, r0.w
  add r1.xyz, -r0.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)
  mad o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
else 
  mov o0.xyz, r0.xyzx
endif 
ret 
// Approximately 125 instruction slots used
