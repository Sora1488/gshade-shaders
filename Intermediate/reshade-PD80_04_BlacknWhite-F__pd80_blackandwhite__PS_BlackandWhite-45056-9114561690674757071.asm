//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float2 pp;                         // Offset:    0 Size:     8
//   bool enable_dither;                // Offset:    8 Size:     4
//   float dither_strength;             // Offset:   12 Size:     4
//   float curve_str;                   // Offset:   16 Size:     4
//   bool show_clip;                    // Offset:   20 Size:     4
//   int bw_mode;                       // Offset:   24 Size:     4
//   float redchannel;                  // Offset:   28 Size:     4
//   float yellowchannel;               // Offset:   32 Size:     4
//   float greenchannel;                // Offset:   36 Size:     4
//   float cyanchannel;                 // Offset:   40 Size:     4
//   float bluechannel;                 // Offset:   44 Size:     4
//   float magentachannel;              // Offset:   48 Size:     4
//   bool use_tint;                     // Offset:   52 Size:     4
//   float tinthue;                     // Offset:   56 Size:     4
//   float tintsat;                     // Offset:   60 Size:     4
//   float2 pingpong;                   // Offset:   64 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__texNoiseRGB                  texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
mov_sat r0.xyz, r0.xyzx
mul r1.xy, v1.xyxx, l(3.750000, 2.109375, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t6.xyzw, s1
add r0.w, cb0[0].x, l(4.000000)
mad r1.xyz, r0.wwww, l(0.618034, 0.618034, 0.618034, 0.000000), r1.xyzx
frc r1.xyz, r1.xyzx
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mul r0.w, cb0[0].w, l(0.003922)
mul r1.xyz, r0.wwww, r1.xyzx
movc r1.xyz, cb0[0].zzzz, r1.xyzx, l(0,0,0,0)
add_sat r0.xyz, r0.xyzx, r1.zyxz
switch cb0[1].z
  case l(0)
  mov r2.xyzw, l(0.200000,0.500000,-0.200000,-0.600000)
  mov r3.xy, l(-1.000000,-0.200000,0,0)
  break 
  case l(1)
  mov r2.xyzw, l(-0.500000,0.500000,1.200000,-0.200000)
  mov r3.xy, l(-1.000000,-0.500000,0,0)
  break 
  case l(2)
  mov r2.xyzw, l(-0.200000,0.400000,-0.600000,0.500000)
  mov r3.xy, l(1.000000,-0.200000,0,0)
  break 
  case l(3)
  mov r2.xyzw, l(0.500000,1.200000,-0.500000,-1.000000)
  mov r3.xy, l(-1.500000,-1.000000,0,0)
  break 
  case l(4)
  mov r2.xyzw, l(-1.000000,1.000000,1.200000,-0.200000)
  mov r3.xy, l(-1.500000,-1.000000,0,0)
  break 
  case l(5)
  mov r2.xyzw, l(-0.700000,0.400000,-1.200000,0.700000)
  mov r3.xy, l(1.200000,-0.200000,0,0)
  break 
  case l(6)
  mov r2.xyzw, l(-1.350000,2.350000,1.350000,-1.350000)
  mov r3.xy, l(-1.600000,-1.070000,0,0)
  break 
  case l(7)
  mov r2.xyzw, l(-1.000000,-1.000000,-1.000000,-1.000000)
  mov r3.xy, l(-1.000000,-1.000000,0,0)
  break 
  case l(8)
  mov r2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  mov r3.xy, l(1.000000,1.000000,0,0)
  break 
  case l(9)
  mov r2.xyzw, l(-0.700000,0.900000,0.600000,0.100000)
  mov r3.xy, l(-0.400000,-0.400000,0,0)
  break 
  case l(10)
  mov r2.xyzw, l(0.200000,0.400000,0.600000,0)
  mov r3.xy, l(-0.600000,-0.200000,0,0)
  break 
  case l(11)
  mov r2.xyzw, l(-0.300000,1.000000,-0.300000,-0.600000)
  mov r3.xy, l(-1.000000,-0.600000,0,0)
  break 
  case l(12)
  mov r2.xyzw, l(-0.300000,2.600000,-0.300000,-1.200000)
  mov r3.xy, l(-0.600000,-0.400000,0,0)
  break 
  case l(13)
  mov r2.x, cb0[1].w
  mov r2.yzw, cb0[2].xxyz
  mov r3.x, cb0[2].w
  mov r3.y, cb0[3].x
  break 
  default 
  mov r2.x, cb0[1].w
  mov r2.yzw, cb0[2].xxyz
  mov r3.x, cb0[2].w
  mov r3.y, cb0[3].x
  break 
endswitch 
max r0.xyw, r0.yzyx, l(0.000001, 0.000001, 0.000000, 0.000001)
lt r1.w, r0.x, r0.y
mov r4.xy, r0.yxyy
mov r4.zw, l(0,0,-1.000000,0.666667)
mov r5.xy, r4.yxyy
mov r5.zw, l(0,0,0,-0.333333)
movc r4.xyzw, r1.wwww, r4.xyzw, r5.xyzw
lt r1.w, r0.w, r4.x
mov r0.xyz, r4.xywx
mov r4.xyw, r0.wywx
movc r0.xyzw, r1.wwww, r0.xyzw, r4.xyzw
min r1.w, r0.y, r0.w
add r1.w, r0.x, -r1.w
add r0.y, -r0.y, r0.w
mad r0.w, r1.w, l(6.000000), l(0.000001)
div r0.y, r0.y, r0.w
add r0.y, r0.z, r0.y
mad r0.x, -r1.w, l(0.500000), r0.x
mad r0.z, r0.x, l(2.000000), l(-1.000000)
add r0.z, -|r0.z|, l(1.000001)
div r0.z, r1.w, r0.z
mad r1.w, -|r0.y|, l(6.000000), l(1.000000)
max r1.w, r1.w, l(0.000000)
add r3.z, r1.w, l(-0.500000)
lt r3.w, l(0.000000), r3.z
lt r3.z, r3.z, l(0.000000)
iadd r3.z, -r3.w, r3.z
itof r3.z, r3.z
add r3.w, r3.z, l(1.000000)
mul r3.w, r3.w, l(0.500000)
mul r4.x, r3.z, l(0.500000)
mad r1.w, -r3.z, r1.w, r3.w
add r1.w, r1.w, r1.w
max r1.w, r1.w, l(0.000000)
log r1.w, r1.w
mul r1.w, r1.w, cb0[1].x
exp r1.w, r1.w
mad r1.w, -r4.x, r1.w, r3.w
add r4.xyzw, |r0.yyyy|, l(-1.000000, -0.166667, -0.333333, -0.500000)
mul r4.xyzw, r4.xyzw, l(6.000000, 6.000000, 6.000000, 6.000000)
add r4.xyzw, -|r4.xyzw|, l(1.000000, 1.000000, 1.000000, 1.000000)
max r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
add r5.xyzw, r4.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
lt r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000), r5.xyzw
lt r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r5.xyzw, -r6.xyzw, r5.xyzw
itof r5.xyzw, r5.xyzw
add r6.xyzw, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mul r6.xyzw, r6.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
mul r7.xyzw, r5.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
mad r4.xyzw, -r5.xyzw, r4.xyzw, r6.xyzw
add r4.xyzw, r4.xyzw, r4.xyzw
max r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
log r4.xyzw, r4.xyzw
mul r4.xyzw, r4.xyzw, cb0[1].xxxx
exp r4.xyzw, r4.xyzw
mad r4.xyzw, -r7.xyzw, r4.xyzw, r6.xyzw
add r1.w, r1.w, r4.x
add r3.zw, |r0.yyyy|, l(0.000000, 0.000000, -0.666667, -0.833333)
mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 6.000000, 6.000000)
add r3.zw, -|r3.zzzw|, l(0.000000, 0.000000, 1.000000, 1.000000)
max r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
add r5.xy, r3.zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
lt r5.zw, l(0.000000, 0.000000, 0.000000, 0.000000), r5.xxxy
lt r5.xy, r5.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r5.xy, -r5.zwzz, r5.xyxx
itof r5.xy, r5.xyxx
add r5.zw, r5.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r5.zw, r5.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r6.xy, r5.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r3.zw, -r5.xxxy, r3.zzzw, r5.zzzw
add r3.zw, r3.zzzw, r3.zzzw
max r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
log r3.zw, r3.zzzw
mul r3.zw, r3.zzzw, cb0[1].xxxx
exp r3.zw, r3.zzzw
mad r3.zw, -r6.xxxy, r3.zzzw, r5.zzzw
add r0.yw, -r0.zzzx, l(0.000000, 1.000000, 0.000000, 1.000000)
mad r0.y, r0.z, r0.y, r0.z
mul r0.z, r2.x, r1.w
mul r0.z, r0.z, r0.x
mul r0.z, r0.y, r0.z
mad r0.z, r0.z, r0.w, r0.x
mul r2.xyz, r2.yzwy, r4.yzwy
mul r2.xyz, r0.xxxx, r2.xyzx
mul r2.xyz, r0.yyyy, r2.xyzx
mad r0.z, r2.x, r0.w, r0.z
mad r0.z, r2.y, r0.w, r0.z
mad r0.z, r2.z, r0.w, r0.z
mul r2.xy, r3.xyxx, r3.zwzz
mul r2.xy, r0.xxxx, r2.xyxx
mul r0.xy, r0.yyyy, r2.xyxx
mad r0.x, r0.x, r0.w, r0.z
mad_sat r0.x, r0.y, r0.w, r0.x
mad r0.yzw, cb0[3].zzzz, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)
mad_sat r0.yzw, |r0.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)
mad r1.w, r0.x, l(2.000000), l(-1.000000)
add r1.w, -|r1.w|, l(1.000000)
mul r1.w, r1.w, cb0[3].w
add r0.yzw, r0.yyzw, l(0.000000, -0.500000, -0.500000, -0.500000)
mul r0.yzw, r1.wwww, r0.yyzw
movc r0.yzw, cb0[3].yyyy, r0.yyzw, l(0,0,0,0)
add r0.xyz, r0.yzwy, r0.xxxx
min r0.w, r0.y, r0.x
min r0.w, r0.z, r0.w
ge r1.w, r0.w, l(0.980000)
add r0.w, r0.w, l(-0.980000)
mul_sat r0.w, r0.w, l(50.000050)
mad r2.x, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r2.x
add r2.xyz, -r0.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)
mad r2.xyz, r0.wwww, r2.xyzx, r0.xyzx
movc r2.xyz, r1.wwww, r2.xyzx, r0.xyzx
max r0.w, r2.y, r2.x
max r0.w, r2.z, r0.w
ge r1.w, l(0.010000), r0.w
mul_sat r0.w, r0.w, l(100.000000)
mad r2.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r2.w
add r3.xyz, r2.xyzx, l(-0.000000, -0.000000, -1.000000, 0.000000)
mad r3.xyz, r0.wwww, r3.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
movc r2.xyz, r1.wwww, r3.xyzx, r2.xyzx
movc r0.xyz, cb0[1].yyyy, r2.xyzx, r0.xyzx
add_sat o0.xyz, r1.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 207 instruction slots used
