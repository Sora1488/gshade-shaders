//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int chromaSubType;                 // Offset:    0 Size:     4
//   bool showChroma;                   // Offset:    4 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 1
if_z cb0[0].x
  add r0.x, v0.x, v0.x
  ge r0.x, r0.x, -r0.x
  movc r0.xy, r0.xxxx, l(2.000000,0.500000,0,0), l(-2.000000,-0.500000,0,0)
  mul r0.y, r0.y, v0.x
  frc r0.y, r0.y
  mul r0.x, r0.y, r0.x
  ge r0.x, l(1.000000), r0.x
  if_nz r0.x
    sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
    mov o0.xyz, r0.xyzx
    ret 
  endif 
else 
  ieq r0.x, cb0[0].x, l(1)
  if_nz r0.x
    add r0.xyzw, v0.xxyy, v0.xxyy
    ge r0.xyzw, r0.xyzw, -r0.yyww
    movc r0.xyzw, r0.xyzw, l(2.000000,0.500000,2.000000,0.500000), l(-2.000000,-0.500000,-2.000000,-0.500000)
    mul r0.yw, r0.yyyw, v0.xxxy
    frc r0.yw, r0.yyyw
    mul r0.xy, r0.ywyy, r0.xzxx
    ge r0.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r0.xyxx
    and r0.x, r0.y, r0.x
    if_nz r0.x
      sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
      mov o0.xyz, r0.xyzx
      ret 
    endif 
  else 
    ieq r0.x, cb0[0].x, l(2)
    if_nz r0.x
      mul r0.x, v0.x, l(4.000000)
      ge r0.x, r0.x, -r0.x
      movc r0.xy, r0.xxxx, l(4.000000,0.250000,0,0), l(-4.000000,-0.250000,0,0)
      mul r0.y, r0.y, v0.x
      frc r0.y, r0.y
      mul r0.x, r0.y, r0.x
      ge r0.x, l(1.000000), r0.x
      if_nz r0.x
        sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
        mov o0.xyz, r0.xyzx
        ret 
      endif 
    else 
      mul r0.xyzw, v0.xxyy, l(3.000000, 3.000000, 3.000000, 3.000000)
      ge r0.xyzw, r0.xyzw, -r0.yyww
      movc r0.xyzw, r0.xyzw, l(3.000000,0.333333,3.000000,0.333333), l(-3.000000,-0.333333,-3.000000,-0.333333)
      mul r0.yw, r0.yyyw, v0.xxxy
      frc r0.yw, r0.yyyw
      mul r0.xy, r0.ywyy, r0.xzxx
      ge r0.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r0.xyxx
      and r0.x, r0.y, r0.x
      if_nz r0.x
        sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
        mov o0.xyz, r0.xyzx
        ret 
      endif 
    endif 
  endif 
endif 
mov o0.xyz, l(0,0,0,0)
ret 
// Approximately 63 instruction slots used
