//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int Buffer1;                       // Offset:    0 Size:     4 [unused]
//   uint RotationAngle;                // Offset:    4 Size:     4
//   float BrightnessThresholdStart;    // Offset:    8 Size:     4 [unused]
//   float BrightnessThresholdEnd;      // Offset:   12 Size:     4 [unused]
//   float GradientStrength;            // Offset:   16 Size:     4 [unused]
//   float MaskingNoise;                // Offset:   20 Size:     4 [unused]
//   float NoiseSize;                   // Offset:   24 Size:     4 [unused]
//   bool ReverseSort;                  // Offset:   28 Size:     4 [unused]
//   bool InvertMask;                   // Offset:   32 Size:     4 [unused]
//   bool ShowMask;                     // Offset:   36 Size:     4 [unused]
//   bool HotsamplingMode;              // Offset:   40 Size:     4 [unused]
//   int Buffer2;                       // Offset:   44 Size:     4 [unused]
//   bool FilterColor;                  // Offset:   48 Size:     4 [unused]
//   bool ShowSelectedHue;              // Offset:   52 Size:     4 [unused]
//   float Value;                       // Offset:   56 Size:     4 [unused]
//   float ValueRange;                  // Offset:   60 Size:     4 [unused]
//   float Hue;                         // Offset:   64 Size:     4 [unused]
//   float HueRange;                    // Offset:   68 Size:     4 [unused]
//   float Saturation;                  // Offset:   72 Size:     4 [unused]
//   float SaturationRange;             // Offset:   76 Size:     4 [unused]
//   int Buffer3;                       // Offset:   80 Size:     4 [unused]
//   bool FilterDepth;                  // Offset:   84 Size:     4 [unused]
//   float FocusDepth;                  // Offset:   88 Size:     4 [unused]
//   float FocusRangeDepth;             // Offset:   92 Size:     4 [unused]
//   bool Spherical;                    // Offset:   96 Size:     4 [unused]
//   int Sphere_FieldOfView;            // Offset:  100 Size:     4 [unused]
//   float Sphere_FocusHorizontal;      // Offset:  104 Size:     4 [unused]
//   float Sphere_FocusVertical;        // Offset:  108 Size:     4 [unused]
//   int Buffer4;                       // Offset:  112 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ColorSorter__texMask         texture  float4          2d             t8      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
ieq r0.xyzw, cb0[0].yyyy, l(90, 180, 270, 0)
or r0.w, r0.x, r0.w
or r0.w, r0.y, r0.w
or r0.w, r0.z, r0.w
ieq r1.x, cb0[0].y, l(360)
or r0.w, r0.w, r1.x
if_z r0.w
  add r0.w, -v1.y, l(1.000000)
  iadd r1.x, cb0[0].y, l(180)
  utof r1.x, r1.x
  mul r1.y, r1.x, l(0.002778)
  round_ni r1.y, r1.y
  mad r1.x, -r1.y, l(360.000000), r1.x
  ftou r1.x, r1.x
  utof r1.x, r1.x
  mul r1.x, r1.x, l(0.017453)
  sincos r1.x, r2.x, r1.x
  add r1.y, -r1.x, r2.x
  add r1.z, r1.x, r2.x
  min r1.w, -r1.x, l(0.000000)
  max r2.y, -r1.x, l(0.000000)
  min r1.w, r2.x, r1.w
  max r2.y, r2.x, r2.y
  min r1.w, r1.y, r1.w
  max r2.y, r1.y, r2.y
  add r2.y, -r1.w, r2.y
  mad r1.w, v1.x, r2.y, r1.w
  div r3.y, |r1.w|, |r1.x|
  mul r3.z, r2.x, r3.y
  lt r2.y, l(0.000000), r1.w
  lt r2.z, r1.w, -r1.x
  and r2.w, r2.z, r2.y
  lt r3.w, r1.w, l(0.000000)
  lt r4.x, -r1.x, r1.w
  and r4.y, r3.w, r4.x
  or r2.w, r2.w, r4.y
  mov r3.x, l(0)
  movc r4.yzw, r2.wwww, r3.xxyz, l(0,1000.000000,1000.000000,1000.000000)
  movc r3.xyz, r2.wwww, r3.xyzx, l(-1000.000000,-1000.000000,-1000.000000,0)
  div r5.x, |r1.w|, |r2.x|
  mul r5.z, r1.x, r5.x
  lt r2.w, r1.w, r2.x
  and r2.y, r2.w, r2.y
  lt r5.w, r2.x, r1.w
  and r3.w, r3.w, r5.w
  or r2.y, r2.y, r3.w
  lt r3.w, r5.z, r4.w
  and r3.w, r2.y, r3.w
  mov r5.y, l(0)
  movc r4.yzw, r3.wwww, r5.xxyz, r4.yyzw
  lt r3.w, r3.z, r5.z
  and r2.y, r2.y, r3.w
  movc r3.xyz, r2.yyyy, r5.xyzx, r3.xyzx
  add r2.y, -r1.w, -r1.x
  add r3.w, -r1.y, -r1.x
  div r5.x, |r2.y|, |r3.w|
  add r2.y, -r5.x, l(1.000000)
  mul r3.w, r1.z, r5.x
  mad r5.z, r2.y, r2.x, r3.w
  lt r2.y, r1.w, r1.y
  and r3.w, r2.y, r4.x
  lt r4.x, r1.y, r1.w
  and r2.z, r2.z, r4.x
  or r2.z, r2.z, r3.w
  lt r3.w, r5.z, r4.w
  and r3.w, r2.z, r3.w
  mov r5.y, l(1.000000)
  movc r4.yzw, r3.wwww, r5.xxyz, r4.yyzw
  lt r3.w, r3.z, r5.z
  and r2.z, r2.z, r3.w
  movc r3.xyz, r2.zzzz, r5.xyzx, r3.xyzx
  add r1.yw, -r1.yyyw, r2.xxxx
  div r5.y, |r1.w|, |r1.y|
  add r1.y, -r5.y, l(1.000000)
  mul r1.z, r1.z, r5.y
  mad r1.x, r1.y, r1.x, r1.z
  and r1.y, r2.y, r5.w
  and r1.z, r2.w, r4.x
  or r1.y, r1.z, r1.y
  lt r1.z, r1.x, r4.w
  and r1.z, r1.z, r1.y
  mov r5.x, l(1.000000)
  movc r1.zw, r1.zzzz, r5.xxxy, r4.yyyz
  lt r1.x, r3.z, r1.x
  and r1.x, r1.x, r1.y
  movc r1.xy, r1.xxxx, r5.xyxx, r3.xyxx
  mul r1.zw, r1.zzzw, v1.yyyy
  mad r1.xy, r0.wwww, r1.xyxx, r1.zwzz
else 
  movc r0.xw, r0.xxxx, v1.yyyx, v1.xxxy
  add r2.xyzw, -v1.xyyx, l(1.000000, 1.000000, 1.000000, 1.000000)
  movc r0.xy, r0.yyyy, r2.xyxx, r0.xwxx
  movc r1.xy, r0.zzzz, r2.zwzz, r0.xyxx
endif 
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r1.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t8.yzwx, s1
mov o0.xyzw, r0.xyzw
ret 
// Approximately 98 instruction slots used
