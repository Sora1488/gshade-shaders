//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool UseAutoFocus;                 // Offset:    0 Size:     4
//   bool UseMouseDrivenAutoFocus;      // Offset:    4 Size:     4
//   float2 AutoFocusPoint;             // Offset:    8 Size:     8
//   float AutoFocusTransitionSpeed;    // Offset:   16 Size:     4 [unused]
//   float ManualFocusPlane;            // Offset:   20 Size:     4 [unused]
//   float FocalLength;                 // Offset:   24 Size:     4 [unused]
//   float FNumber;                     // Offset:   28 Size:     4 [unused]
//   bool ShowOutOfFocusPlaneOnMouseDown;// Offset:   32 Size:     4
//   float3 OutOfFocusPlaneColor;       // Offset:   36 Size:    12
//   float OutOfFocusPlaneColorTransparency;// Offset:   48 Size:     4
//   float3 FocusPlaneColor;            // Offset:   52 Size:    12
//   float4 FocusCrosshairColor;        // Offset:   64 Size:    16
//   float FarPlaneMaxBlur;             // Offset:   80 Size:     4 [unused]
//   float NearPlaneMaxBlur;            // Offset:   84 Size:     4 [unused]
//   float BlurQuality;                 // Offset:   88 Size:     4 [unused]
//   float BokehBusyFactor;             // Offset:   92 Size:     4 [unused]
//   float PostBlurSmoothing;           // Offset:   96 Size:     4
//   float HighlightAnamorphicFactor;   // Offset:  100 Size:     4 [unused]
//   float HighlightAnamorphicSpreadFactor;// Offset:  104 Size:     4 [unused]
//   float HighlightAnamorphicAlignmentFactor;// Offset:  108 Size:     4 [unused]
//   float HighlightBoost;              // Offset:  112 Size:     4 [unused]
//   float HighlightGammaFactor;        // Offset:  116 Size:     4 [unused]
//   float HighlightSharpeningFactor;   // Offset:  120 Size:     4 [unused]
//   int HighlightShape;                // Offset:  124 Size:     4 [unused]
//   float HighlightShapeRotationAngle; // Offset:  128 Size:     4 [unused]
//   float HighlightShapeGamma;         // Offset:  132 Size:     4 [unused]
//   bool MitigateUndersampling;        // Offset:  136 Size:     4 [unused]
//   bool ShowCoCValues;                // Offset:  140 Size:     4
//   float2 MouseCoords;                // Offset:  144 Size:     8
//   bool LeftMouseDown;                // Offset:  152 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __s2                              sampler      NA          NA             s2      1 
// __s3                              sampler      NA          NA             s3      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__CinematicDOF__texCDCoC       texture  float4          2d             t8      1 
// __V__CinematicDOF__texCDBuffer4    texture  float4          2d            t26      1 
// __V__CinematicDOF__texCDBuffer5    texture  float4          2d            t28      1 
// __V__CinematicDOF__texCDNoise     texture  float4          2d            t30      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     z         1     NONE   float       
// TEXCOORD                 2      w        1     NONE   float       
// TEXCOORD                 3   x           2     NONE   float       
// TEXCOORD                 4    y          2     NONE   float    y  
// TEXCOORD                 5     z         2     NONE   float     z 
// TEXCOORD                 6      w        2     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 0.132980, 0, 0},
                              { 1.458430, 0.232276, 0, 0},
                              { 3.403985, 0.135326, 0, 0},
                              { 5.351806, 0.051156, 0, 0},
                              { 7.302941, 0.012539, 0, 0},
                              { 9.258160, 0.001991, 0, 0} }
dcl_constantbuffer CB0[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t26
dcl_resource_texture2d (float,float,float,float) t28
dcl_resource_texture2d (float,float,float,float) t30
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.y
dcl_input_ps linear v2.z
dcl_input_ps linear v2.w
dcl_output o0.xyzw
dcl_temps 7
if_nz cb0[8].w
  sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t8.xyzw, s2
  ge r0.y, l(0.002125), r0.x
  movc r1.xyz, r0.yyyy, l(0,0,1.000000,0), r0.xxxx
  mov r1.w, l(1.000000)
  lt r0.y, r0.x, l(0.000000)
  mov r2.x, -r0.x
  mov r2.yzw, l(0,0,0,1.000000)
  movc o0.xyzw, r0.yyyy, r2.xyzw, r1.xyzw
  ret 
endif 
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t8.xyzw, s2, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t28.wxyz, s1, l(0.000000)
dp3 r1.x, r0.yzwy, l(0.300000, 0.590000, 0.110000, 0.000000)
lt r1.yz, |r0.xxxx|, l(0.000000, 0.200000, 0.001062, 0.000000)
lt r1.w, cb0[6].x, l(0.010000)
or r1.y, r1.w, r1.y
lt r1.x, r1.x, l(0.300000)
or r1.x, r1.x, r1.y
if_z r1.x
  mul r1.xyw, r0.yzyw, l(0.132980, 0.132980, 0.000000, 0.132980)
  mul r2.xy, cb0[6].xxxx, l(0.000000, 0.000926, 0.000000, 0.000000)
  mov r3.xyz, r1.xywx
  mov r2.z, l(1)
  loop 
    ige r2.w, r2.z, l(6)
    breakc_nz r2.w
    mad r4.xy, r2.xyxx, icb[r2.z + 0].xxxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t8.yzwx, s2, l(0.000000)
    lt r2.w, |r2.w|, l(0.200000)
    and r3.w, r2.w, l(0x3f800000)
    mul r5.xyz, r0.yzwy, r3.wwww
    sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t28.xyzw, s1, l(0.000000)
    movc r2.w, r2.w, l(0), l(1.000000)
    mul r4.xyz, r2.wwww, r4.xyzx
    mul r4.xyz, r4.xyzx, icb[r2.z + 0].yyyy
    mad r4.xyz, r5.xyzx, icb[r2.z + 0].yyyy, r4.xyzx
    add r4.xyz, r3.xyzx, r4.xyzx
    mad r5.xy, -r2.xyxx, icb[r2.z + 0].xxxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t8.yzwx, s2, l(0.000000)
    lt r2.w, |r2.w|, l(0.200000)
    and r3.w, r2.w, l(0x3f800000)
    mul r6.xyz, r0.yzwy, r3.wwww
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyxx, t28.xyzw, s1, l(0.000000)
    movc r2.w, r2.w, l(0), l(1.000000)
    mul r5.xyz, r2.wwww, r5.xyzx
    mul r5.xyz, r5.xyzx, icb[r2.z + 0].yyyy
    mad r5.xyz, r6.xyzx, icb[r2.z + 0].yyyy, r5.xyzx
    add r3.xyz, r4.xyzx, r5.xyzx
    iadd r2.z, r2.z, l(1)
  endloop 
  mov r0.yzw, r3.xxyz
  mov_sat r0.yzw, r0.yyzw
endif 
sample_indexable(texture2d)(float,float,float,float) r1.xyw, v1.xyxx, t26.xywz, s1
mul r2.xy, v1.xyxx, l(3.750000, 2.109375, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t30.xyzw, s3
mad r2.x, r2.x, l(0.003922), l(-0.001961)
add_sat r0.yzw, r0.yyzw, r2.xxxx
mul r2.x, |r0.x|, l(4.000000)
min r2.x, r2.x, l(1.000000)
movc r1.z, r1.z, l(0), r2.x
add r0.yzw, -r1.xxyw, r0.yyzw
mad r1.xyz, r1.zzzz, r0.yzwy, r1.xywx
ine r0.y, cb0[2].x, l(0)
ine r0.z, cb0[9].z, l(0)
and r0.y, r0.z, r0.y
if_nz r0.y
  sample_l_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t2.yxzw, s0, l(0.000000)
  mad r0.z, -r0.y, l(999.000000), l(1000.000000)
  div r0.y, r0.y, r0.z
  mul r0.y, r0.y, l(1000000.000000)
  lt r0.z, r0.y, v2.z
  lt r0.w, l(0.000000), v2.w
  lt r0.y, v2.w, r0.y
  and r0.y, r0.y, r0.w
  or r0.y, r0.y, r0.z
  lt r0.x, |r0.x|, v2.y
  movc r0.xzw, r0.xxxx, cb0[3].yyzw, r1.xxyz
  movc r0.xyz, r0.yyyy, cb0[2].yzwy, r0.xzwx
  mov r0.w, l(1.000000)
  mov r1.w, l(1.000000)
  add r0.xyzw, r0.xyzw, -r1.xyzw
  mad r0.xyzw, cb0[3].xxxx, r0.xyzw, r1.xyzw
  mul r2.xy, cb0[9].xyxx, l(0.000521, 0.000926, 0.000000, 0.000000)
  movc r2.xy, cb0[0].yyyy, r2.xyxx, cb0[0].zwzz
  add r2.xy, -r2.xyxx, v1.xyxx
  mul r2.xy, |r2.xyxx|, l(-2769.974365, -1558.110596, 0.000000, 0.000000)
  exp r2.xy, r2.xyxx
  mul r2.xy, r2.xyxx, cb0[4].wwww
  add r3.xyzw, -r0.xyzw, cb0[4].xyzw
  mad r3.xyzw, r2.xxxx, r3.xyzw, r0.xyzw
  add r4.xyzw, -r3.xyzw, cb0[4].xyzw
  mad r2.xyzw, r2.yyyy, r4.xyzw, r3.xyzw
  movc o0.xyzw, cb0[0].xxxx, r2.xyzw, r0.xyzw
else 
  mov o0.xyz, r1.xyzx
  mov o0.w, l(1.000000)
endif 
ret 
// Approximately 100 instruction slots used
