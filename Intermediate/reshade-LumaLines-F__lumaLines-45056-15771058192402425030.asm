//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int lineDensity;                   // Offset:    0 Size:     4
//   float blackThreshold;              // Offset:    4 Size:     4
//   float whiteThreshold;              // Offset:    8 Size:     4
//   bool blend;                        // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
dp3 r0.w, r0.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
itof r1.x, cb0[0].x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r1.y, -r1.x, l(1.000000)
ge r1.z, r1.y, r1.x
add r2.xyzw, v1.xyxy, l(0.000521, 0.000000, -0.000521, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xyxx, t0.xyzw, s0, l(0.000000)
dp3 r1.w, r3.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.zwzz, t0.xyzw, s0, l(0.000000)
dp3 r2.x, r2.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
add r3.xyzw, v1.xyxy, l(0.000000, 0.000926, 0.000000, -0.000926)
sample_l_indexable(texture2d)(float,float,float,float) r2.yzw, r3.xyxx, t0.wxyz, s0, l(0.000000)
dp3 r2.y, r2.yzwy, l(0.333333, 0.333333, 0.333333, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r3.zwzz, t0.xyzw, s0, l(0.000000)
dp3 r2.z, r3.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
mov r2.w, l(0)
mov r3.xy, r1.xzxx
loop 
  breakc_z r3.y
  ge r3.z, r3.x, r0.w
  ge r3.w, r3.x, r1.w
  movc r3.w, r3.w, l(0), l(1)
  ieq r3.z, r3.z, l(0)
  iadd r3.w, r3.z, r3.w
  iadd r3.w, r2.w, r3.w
  ge r4.x, r3.x, r2.x
  movc r4.x, r4.x, l(0), l(1)
  iadd r4.x, r3.z, r4.x
  iadd r3.w, r3.w, r4.x
  ge r4.x, r3.x, r2.y
  movc r4.x, r4.x, l(0), l(1)
  iadd r4.x, r3.z, r4.x
  iadd r3.w, r3.w, r4.x
  ge r4.x, r3.x, r2.z
  movc r4.x, r4.x, l(0), l(1)
  iadd r3.z, r3.z, r4.x
  iadd r2.w, r3.z, r3.w
  add r3.x, r1.x, r3.x
  ge r3.y, r1.y, r3.x
endloop 
ge r1.xy, cb0[0].yzyy, r0.wwww
and r1.xy, r1.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
itof r0.w, r2.w
max r0.w, r1.x, r0.w
min r0.w, r1.y, r0.w
if_nz cb0[0].w
  add r1.x, -r0.w, l(1.000000)
  mul o0.xyz, r0.xyzx, r1.xxxx
  ret 
else 
  add o0.xyz, -r0.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
  ret 
endif 
ret 
// Approximately 55 instruction slots used
