//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float frametime;                   // Offset:    0 Size:     4
//   int framecount;                    // Offset:    4 Size:     4
//   int random;                        // Offset:    8 Size:     4
//   bool bDebug;                       // Offset:   12 Size:     4 [unused]
//   float fPeviousDepth;               // Offset:   16 Size:     4
//   bool bBrightnessOpacity;           // Offset:   20 Size:     4
//   float fDepthMultiplier;            // Offset:   24 Size:     4
//   bool bFrameAccuAuto;               // Offset:   28 Size:     4
//   int iFrameAccu;                    // Offset:   32 Size:     4
//   float fSkyDepth;                   // Offset:   36 Size:     4
//   float fWeaponDepth;                // Offset:   40 Size:     4
//   int iRayPreciseHit;                // Offset:   44 Size:     4
//   int iRayPreciseHitSteps;           // Offset:   48 Size:     4
//   float fRayStepPrecision;           // Offset:   52 Size:     4
//   float fRayStepMultiply;            // Offset:   56 Size:     4
//   float fRayHitDepthThreshold;       // Offset:   60 Size:     4
//   float fRayBounce;                  // Offset:   64 Size:     4
//   float fFadePower;                  // Offset:   68 Size:     4
//   float fSaturateColor;              // Offset:   72 Size:     4
//   float fSaturateColorPower;         // Offset:   76 Size:     4
//   float fAOMultiplier;               // Offset:   80 Size:     4 [unused]
//   int iAODistance;                   // Offset:   84 Size:     4
//   bool bNormalWeight;                // Offset:   88 Size:     4 [unused]
//   int iSmoothRadius;                 // Offset:   92 Size:     4 [unused]
//   int iSmoothLod;                    // Offset:   96 Size:     4 [unused]
//   float fSmoothPass;                 // Offset:  100 Size:     4 [unused]
//   float fSmoothDepthThreshold;       // Offset:  104 Size:     4 [unused]
//   float fSmoothNormalThreshold;      // Offset:  108 Size:     4 [unused]
//   float fSourceColor;                // Offset:  112 Size:     4 [unused]
//   float fSourceDesat;                // Offset:  116 Size:     4 [unused]
//   float fLightMult;                  // Offset:  120 Size:     4 [unused]
//   float fLightOffset;                // Offset:  124 Size:     4 [unused]
//   float fMaxLight;                   // Offset:  128 Size:     4 [unused]
//   float fLightNormalize;             // Offset:  132 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__DHRTGI__blueNoiseTex         texture  float4          2d             t4      1 
// __V__DHRTGI__normalTex            texture  float4          2d             t6      1 
// __V__DHRTGI__previousDepthTex     texture  float4          2d             t8      1 
// __V__DHRTGI__resultTex            texture  float4          2d            t28      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t28
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 25
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t2.xyzw, s0, l(0.000000)
mad r0.y, -r0.x, l(999.000000), l(1000.000000)
div r0.z, r0.x, r0.y
lt r0.w, cb0[2].y, r0.z
if_nz r0.w
  mov o0.xyzw, l(0,0,0,0)
  mov o1.xyzw, l(0,0,0,0)
  mov o2.xyzw, l(0,0,0,0)
  ret 
endif 
add r1.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r0.xy, r0.zzzz, r1.xyxx
mul r0.w, cb0[1].z, l(1875.000000)
mov r1.xy, l(1920.000000,1080.000000,0,0)
round_z r1.zw, r0.wwww
mul r2.xyz, r0.xyzx, r1.xyzx
imul null, r0.w, cb0[0].z, cb0[0].y
itof r0.w, r0.w
mul r3.xy, r0.wwww, l(1.414214, 3.141593, 0.000000, 0.000000)
round_z r3.xy, r3.xyxx
mul r4.xyzw, r3.xyxy, l(512.000000, 512.000000, 512.000000, 512.000000)
ge r4.xyzw, r4.xyzw, -r4.zwzw
movc r4.xyzw, r4.xyzw, l(512.000000,512.000000,0.001953,0.001953), l(-512.000000,-512.000000,-0.001953,-0.001953)
mul r3.xy, r3.xyxx, r4.zwzz
frc r3.xy, r3.xyxx
mul r3.xy, r3.xyxx, r4.xyxx
round_z r3.xy, r3.xyxx
mad r3.xy, v1.xyxx, l(1920.000000, 1080.000000, 0.000000, 0.000000), r3.xyxx
mul r4.xyzw, r3.xyxy, l(512.000000, 512.000000, 512.000000, 512.000000)
ge r4.xyzw, r4.xyzw, -r4.zwzw
movc r4.xyzw, r4.xyzw, l(512.000000,512.000000,0.001953,0.001953), l(-512.000000,-512.000000,-0.001953,-0.001953)
mul r3.xy, r3.xyxx, r4.zwzz
frc r3.xy, r3.xyxx
mul r3.xy, r3.xyxx, r4.xyxx
mul r3.xy, r3.xyxx, l(0.001953, 0.001953, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t4.xyzw, s1
add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r0.w, r2.xyzx, r3.xyzx
add r0.w, r0.w, r0.w
mad r3.xyz, r3.xyzx, -r0.wwww, r2.xyzx
div r0.w, l(10.000000), cb0[0].x
round_ne r0.w, r0.w
max r0.w, r0.w, l(1.000000)
itof r3.w, cb0[2].x
movc r0.w, cb0[1].w, r0.w, r3.w
div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r5.x, cb0[3].w, l(0.020000)
mad r0.w, cb0[3].z, l(0.100000), l(1.000000)
div r6.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[3].y
mul r6.yzw, r3.xxyz, r6.xxxx
lt r3.x, r0.z, cb0[2].z
mul r3.y, r1.w, cb0[2].z
mad r7.xyz, r0.xyzx, r1.xyzx, r6.yzwy
div r8.xyz, r7.xyzx, r1.xyzx
div r3.zw, r8.xxxy, r8.zzzz
add r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
not r5.w, r3.x
sample_l_indexable(texture2d)(float,float,float,float) r7.w, r3.zwzz, t2.yzwx, s0, l(0.000000)
mad r8.x, -r7.w, l(999.000000), l(1000.000000)
div r7.w, r7.w, r8.x
mad r5.y, r7.w, r1.w, -r7.z
ge r7.w, l(0.000000), r5.y
not r9.z, r7.w
if_nz r7.w
  div r8.xyw, r2.xyxz, r1.xyxz
  div r8.xy, r8.xyxx, r8.wwww
  add r8.xy, r8.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r8.xyw, r8.xyxx, t6.xywz, s0, l(0.000000)
  add r8.xyw, r8.xyxw, l(-0.500000, -0.500000, 0.000000, -0.500000)
  add r8.xyw, r8.xyxw, r8.xyxw
  dp3 r7.w, r6.yzwy, r8.xywx
  add r7.w, r7.w, r7.w
  mad r6.yzw, r8.xxyw, -r7.wwww, r6.yyzw
  mad r7.xyz, r0.xyzx, r1.xyzx, r6.yzwy
  mov r7.w, l(0)
  mov r8.xy, l(0,0,0,0)
else 
  ge r11.xy, r3.zwzz, l(0.000000, 0.000000, 0.000000, 0.000000)
  ge r3.zw, l(0.000000, 0.000000, 1.000000, 1.000000), r3.zzzw
  and r3.z, r3.z, r11.x
  and r3.z, r11.y, r3.z
  and r3.z, r3.w, r3.z
  ge r3.w, r8.z, l(0.000000)
  and r3.z, r3.w, r3.z
  ge r3.w, l(1.000000), r8.z
  and r3.z, r3.w, r3.z
  not r3.z, r3.z
  lt r3.w, r7.z, r3.y
  or r3.w, r3.w, r5.w
  and r8.y, r3.w, r3.z
  if_nz r8.y
    mov r2.w, l(0)
    mov r10.xyzw, r2.xyzw
    mov r7.xyz, r2.xyzx
  endif 
  not r2.w, r8.y
  lt r3.z, r5.x, |r5.y|
  and r7.w, r2.w, r3.z
  mov r8.x, r8.y
endif 
not r3.zw, r8.yyyx
and r2.w, r3.z, r3.w
lt r3.z, r5.x, cb0[3].w
if_nz r3.z
  mul r5.x, cb0[3].w, l(0.040000)
endif 
mul r11.xyzw, r0.wwww, r6.xyzw
movc r11.xyzw, r2.wwww, r11.xyzw, r6.xyzw
mov r5.z, l(0)
mul r9.x, cb0[3].w, l(0.020000)
mov r9.yw, l(0,0,0,1.000000)
movc r5.xyz, r2.wwww, r5.xyzx, r9.xyzx
lt r2.w, r6.x, l(1920.000000)
div r2.xyz, r2.xyzx, r1.xyzx
div r2.xy, r2.xyxx, r2.zzzz
add r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t6.xyzw, s0, l(0.000000)
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r2.xyz, r2.xyzx, r2.xyzx
itof r3.z, cb0[3].x
div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r3.z
iadd r3.w, cb0[3].x, l(-1)
ilt r6.y, l(0), r3.w
mov r12.w, l(0)
mov r13.xyzw, r10.xyzw
mov r14.xyzw, l(0,0,0,0)
mov r8.yzw, r11.yyzw
mov r12.xyz, r7.xyzx
mov r6.z, r11.x
mov r6.w, r6.x
mov r15.xz, r5.xxyx
mov r15.w, r7.w
mov r16.x, r5.z
mov r16.y, r2.w
mov r16.z, r8.x
loop 
  mov r16.z, l(0)
  breakc_z r16.y
  add r17.xyz, r8.yzwy, r12.xyzx
  add r6.w, r6.z, r6.w
  div r18.xyz, r17.xyzx, r1.xyzx
  div r18.xy, r18.xyxx, r18.zzzz
  add r18.xy, r18.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r16.w, r18.xyxx, t2.yzwx, s0, l(0.000000)
  mad r17.w, -r16.w, l(999.000000), l(1000.000000)
  div r16.w, r16.w, r17.w
  mad r17.w, r16.w, r1.w, -r17.z
  ge r18.w, l(0.000000), r17.w
  and r18.w, r16.x, r18.w
  if_nz r18.w
    dp3 r18.w, r8.yzwy, r2.xyzx
    add r18.w, r18.w, r18.w
    mad r8.yzw, r2.xxyz, -r18.wwww, r8.yyzw
    mad r12.xyz, r0.xyzx, r1.xyzx, r8.yzwy
    mov r15.z, r17.w
    mov r16.z, l(0)
  else 
    ge r19.xy, r18.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
    ge r18.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r18.xyxx
    and r18.x, r18.x, r19.x
    and r18.x, r19.y, r18.x
    and r18.x, r18.y, r18.x
    ge r18.y, r18.z, l(0.000000)
    and r18.x, r18.y, r18.x
    ge r18.y, l(1.000000), r18.z
    and r18.x, r18.y, r18.x
    not r18.x, r18.x
    lt r18.y, r17.z, r3.y
    or r18.y, r5.w, r18.y
    and r18.x, r18.y, r18.x
    if_nz r15.w
      not r18.y, r18.x
      lt r18.z, l(0.000000), r17.w
      lt r18.w, r17.w, l(0.000000)
      iadd r18.z, -r18.z, r18.w
      lt r18.w, l(0.000000), r15.z
      lt r19.x, r15.z, l(0.000000)
      iadd r18.w, -r18.w, r19.x
      itof r18.zw, r18.zzzw
      ne r18.z, r18.w, r18.z
      and r18.y, r18.z, r18.y
      if_nz r18.y
        mov r14.yzw, r17.xxyz
        mov r19.xyz, r8.yzwy
        mov r15.y, r6.w
        mov r15.z, r17.w
        mov r18.y, r6.z
        mov r18.z, l(0)
        loop 
          ige r19.w, r18.z, cb0[2].w
          breakc_nz r19.w
          mul r20.xyz, r3.zzzz, r19.xyzx
          mul r19.w, r3.z, r18.y
          mov r21.xyz, r14.yzwy
          mov r22.xy, r15.yzyy
          mov r20.w, l(0)
          mov r21.w, l(0)
          mov r22.z, r6.y
          loop 
            breakc_z r22.z
            mad r21.xyz, -r19.xyzx, r3.zzzz, r21.xyzx
            mad r22.x, -r18.y, r3.z, r22.x
            mad r22.y, r16.w, r1.w, -r21.z
            lt r22.w, l(0.000000), r22.y
            lt r23.x, r22.y, l(0.000000)
            iadd r22.w, -r22.w, r23.x
            itof r22.w, r22.w
            eq r21.w, r18.w, r22.w
            iadd r20.w, r20.w, l(1)
            not r22.w, r21.w
            ilt r23.x, r20.w, r3.w
            and r22.z, r22.w, r23.x
          endloop 
          mad r23.xyz, r19.xyzx, r3.zzzz, r21.xyzx
          mad r24.x, r18.y, r3.z, r22.x
          mad r24.y, r16.w, r1.w, -r23.z
          movc r14.yzw, r21.wwww, r23.xxyz, r21.xxyz
          movc r15.yz, r21.wwww, r24.xxyx, r22.xxyx
          iadd r18.z, r18.z, l(1)
          mov r19.xyz, r20.xyzx
          mov r18.y, r19.w
        endloop 
        mov r6.w, r15.y
        mov r12.xyz, r14.yzwy
        mov r14.x, l(-1)
      else 
        mov r12.xyz, r17.xyzx
        mov r15.z, r17.w
      endif 
      ge r16.w, r15.x, |r15.z|
      or r16.w, r18.x, r16.w
      if_nz r16.w
        movc r9.xyz, r14.xxxx, r14.yzwy, r12.xyzx
        mov r13.xyzw, r9.xyzw
        mov r16.z, l(-1)
        break 
      endif 
      mov r15.w, l(-1)
      mov r16.z, r16.w
    else 
      if_nz r18.x
        mov r13.xyzw, r12.xyzw
        mov r16.z, l(-1)
        break 
      endif 
      lt r15.w, r15.x, |r17.w|
      mov r12.xyz, r17.xyzx
      mov r15.z, r17.w
      mov r16.z, r18.x
    endif 
  endif 
  mul r6.z, r0.w, r6.z
  lt r9.x, r15.x, cb0[3].w
  mad r9.y, cb0[3].w, l(0.020000), r15.x
  movc r15.x, r9.x, r9.y, r15.x
  mul r8.yzw, r0.wwww, r8.yyzw
  lt r16.y, r6.w, l(1920.000000)
  mov r16.x, l(0)
endloop 
and r2.xyzw, r13.xyzw, r16.zzzz
div r3.yzw, r2.xxyz, r1.xxyz
div r3.yz, r3.yyzy, r3.wwww
add r3.yz, r3.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r3.yzyy, t0.xyzw, s0, l(0.000000)
lt r5.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[4].xzxx
if_nz r5.x
  sample_l_indexable(texture2d)(float,float,float,float) r5.xzw, r3.yzyy, t28.xwyz, s0, l(0.000000)
  mad_sat r4.xyz, r5.xzwx, cb0[4].xxxx, r4.xyzx
endif 
if_nz r5.y
  min r0.w, r4.z, r4.y
  min r0.w, r0.w, r4.x
  max r5.xy, r4.zyzz, r4.yxyy
  max r5.xy, r4.xzxx, r5.xyxx
  add r1.w, r0.w, r5.x
  add r0.w, -r0.w, r5.x
  ne r5.x, r0.w, l(0.000000)
  add r5.z, r1.w, l(-1.000000)
  add r5.z, -|r5.z|, l(1.000000)
  div r0.w, r0.w, r5.z
  and r0.w, r0.w, r5.x
  lt r0.w, l(0.100000), r0.w
  lt r1.w, l(0.200000), r1.w
  and r0.w, r0.w, r1.w
  lt r1.w, l(0.000000), r5.y
  div r5.xyz, r4.xyzx, r5.yyyy
  max r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  log r5.xyz, r5.xyzx
  mul r5.xyz, r5.xyzx, cb0[4].wwww
  exp r5.xyz, r5.xyzx
  add r5.w, -cb0[4].z, l(1.000000)
  mul r6.xyz, r4.xyzx, r5.wwww
  mad r5.xyz, cb0[4].zzzz, r5.xyzx, r6.xyzx
  movc r5.xyz, r1.wwww, r5.xyzx, r4.xyzx
  movc r4.xyz, r0.wwww, r5.xyzx, r4.xyzx
endif 
eq r0.w, r2.w, l(0.000000)
if_nz r0.w
  mov o0.xyzw, r4.xyzw
  mov r5.xy, l(0,0,0,0)
else 
  max r0.w, r4.y, r4.x
  max r0.w, r4.z, r0.w
  mad r1.xyz, -r0.xyzx, r1.xyzx, r2.xyzx
  dp3 r0.x, r1.xyzx, r1.xyzx
  sqrt r0.x, r0.x
  mad r0.y, r0.x, l(0.020000), l(1.000000)
  mul r1.x, cb0[4].y, l(0.050000)
  log r0.y, r0.y
  mul r0.y, r0.y, r1.x
  exp r0.y, r0.y
  div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
  add r0.y, r0.y, l(0.100000)
  sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t8.xyzw, s0
  add r0.z, -r0.z, r1.x
  lt r0.z, cb0[1].x, |r0.z|
  mul r1.x, r4.w, l(5.000000)
  movc r0.z, r0.z, r1.x, r4.w
  mul r1.x, r0.w, r0.z
  movc r1.y, cb0[1].y, r1.x, r0.z
  mul r0.y, r0.y, r2.w
  mul o0.xyz, r4.xyzx, r0.yyyy
  itof r0.y, cb0[5].y
  lt r0.z, r0.y, r0.x
  div r0.x, r0.x, r0.y
  add r0.x, r0.x, r0.w
  movc r1.x, r0.z, l(1.000000), r0.x
  movc r5.xy, r3.xxxx, l(1.000000,1.000000,0,0), r1.xyxx
  mov o0.w, r1.y
endif 
mov o1.w, l(1.000000)
mov o1.xyz, r3.yzwy
mov o2.xw, r5.xxxy
mov o2.yz, l(0,0,0,0)
ret 
// Approximately 338 instruction slots used
