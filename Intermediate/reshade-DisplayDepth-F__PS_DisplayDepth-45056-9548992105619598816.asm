//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int iUIPresentType;                // Offset:    0 Size:     4
//   int Depth_help;                    // Offset:    4 Size:     4 [unused]
//   int Advanced_help;                 // Offset:    8 Size:     4 [unused]
//   bool bUIUseLivePreview;            // Offset:   12 Size:     4
//   float2 fUIScale;                   // Offset:   16 Size:     8
//   int2 iUIOffset;                    // Offset:   24 Size:     8
//   bool bUIShowOffset;                // Offset:   32 Size:     4
//   float fUIFarPlane;                 // Offset:   36 Size:     4
//   float fUIDepthMultiplier;          // Offset:   40 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   x   
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.x, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 6
ieq r0.xy, cb0[0].xxxx, l(1, 2, 0, 0)
if_z cb0[0].w
  sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t2.yzxw, s0, l(0.000000)
  mad r0.w, -r0.z, l(999.000000), l(1000.000000)
  div r0.z, r0.z, r0.w
else 
  div r1.xy, v1.xyxx, cb0[1].xyxx
  itof r1.zw, cb0[1].zzzw
  mad r2.x, -r1.z, l(0.000521), r1.x
  mad r2.y, r1.w, l(0.000926), r1.y
  sample_l_indexable(texture2d)(float,float,float,float) r0.w, r2.xyxx, t2.yzwx, s0, l(0.000000)
  mul r0.w, r0.w, cb0[2].z
  add r1.x, cb0[2].y, l(-1.000000)
  mad r1.x, -r0.w, r1.x, cb0[2].y
  div r0.z, r0.w, r1.x
endif 
add r1.xyzw, v1.xyxy, l(-0.000000, -0.000926, 0.000521, 0.000000)
if_z cb0[0].w
  sample_l_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t2.yzwx, s0, l(0.000000)
  mad r2.x, -r0.w, l(999.000000), l(1000.000000)
  div r0.w, r0.w, r2.x
else 
  div r2.xy, v1.xyxx, cb0[1].xyxx
  itof r2.zw, cb0[1].zzzw
  mad r3.x, -r2.z, l(0.000521), r2.x
  mad r3.y, r2.w, l(0.000926), r2.y
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r3.xyxx, t2.xyzw, s0, l(0.000000)
  mul r2.x, r2.x, cb0[2].z
  add r2.y, cb0[2].y, l(-1.000000)
  mad r2.y, -r2.x, r2.y, cb0[2].y
  div r0.w, r2.x, r2.y
endif 
add r2.xz, v1.yyxy, l(-0.500000, 0.000000, -0.500000, 0.000000)
mov r2.y, l(1.000000)
mul r2.xyz, r0.wwww, r2.xyzx
if_z cb0[0].w
  sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t2.yzwx, s0, l(0.000000)
  mad r2.w, -r0.w, l(999.000000), l(1000.000000)
  div r0.w, r0.w, r2.w
else 
  div r1.xy, r1.xyxx, cb0[1].xyxx
  itof r3.xy, cb0[1].zwzz
  mad r4.x, -r3.x, l(0.000521), r1.x
  mad r4.y, r3.y, l(0.000926), r1.y
  sample_l_indexable(texture2d)(float,float,float,float) r1.x, r4.xyxx, t2.xyzw, s0, l(0.000000)
  mul r1.x, r1.x, cb0[2].z
  add r1.y, cb0[2].y, l(-1.000000)
  mad r1.y, -r1.x, r1.y, cb0[2].y
  div r0.w, r1.x, r1.y
endif 
add r3.yz, v1.xxyx, l(0.000000, -0.500000, -0.500926, 0.000000)
mov r3.x, l(1.000000)
if_z cb0[0].w
  sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t2.xyzw, s0, l(0.000000)
  mad r1.y, -r1.x, l(999.000000), l(1000.000000)
  div r1.x, r1.x, r1.y
else 
  div r1.yz, r1.zzwz, cb0[1].xxyx
  itof r4.xy, cb0[1].zwzz
  mad r5.x, -r4.x, l(0.000521), r1.y
  mad r5.y, r4.y, l(0.000926), r1.z
  sample_l_indexable(texture2d)(float,float,float,float) r1.y, r5.xyxx, t2.yxzw, s0, l(0.000000)
  mul r1.y, r1.y, cb0[2].z
  add r1.z, cb0[2].y, l(-1.000000)
  mad r1.z, -r1.y, r1.z, cb0[2].y
  div r1.x, r1.y, r1.z
endif 
add r4.xz, v1.yyxy, l(-0.500000, 0.000000, -0.499479, 0.000000)
mov r4.y, l(1.000000)
mad r1.yzw, -r3.xxyz, r0.wwww, r2.yyzx
mad r2.xyz, -r4.xyzx, r1.xxxx, r2.xyzx
mul r3.xyz, r1.yzwy, r2.xyzx
mad r1.xyz, r1.wyzw, r2.yzxy, -r3.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mad r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
dp2 r0.w, v1.xyxx, l(120.250000, 300.250000, 0.000000, 0.000000)
frc r0.w, r0.w
mad r2.xyz, r0.wwww, l(-0.003922, 0.003922, -0.003922, 0.000000), r0.zzzz
add r2.xyz, r2.xyzx, l(0.001961, -0.001961, 0.001961, 0.000000)
movc r0.xzw, r0.xxxx, r1.xxyz, r2.zzyz
ge r1.w, v0.x, l(960.000000)
and r1.w, r1.w, l(0x3f800000)
add r2.xyz, -r1.xyzx, r2.xyzx
mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
movc r0.xyz, r0.yyyy, r1.xyzx, r0.xzwx
if_nz cb0[2].x
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
  mul r2.xyz, r0.xyzx, r1.xyzx
  add r3.xyz, r2.xyzx, r2.xyzx
  add r4.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r4.xyz, r4.xyzx, r4.xyzx
  add r1.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r1.xyz, -r4.xyzx, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  max r0.w, r0.z, r0.y
  max r0.w, r0.w, r0.x
  lt r0.w, r0.w, l(0.500000)
  movc r0.w, r0.w, l(0), l(1.000000)
  mad r1.xyz, -r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r1.xyzx
  mad o0.xyz, r0.wwww, r1.xyzx, r3.xyzx
else 
  mov o0.xyz, r0.xyzx
endif 
ret 
// Approximately 105 instruction slots used
