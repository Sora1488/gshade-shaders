//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float2 pp;                         // Offset:    0 Size:     8
//   bool enable_dither;                // Offset:    8 Size:     4
//   float dither_strength;             // Offset:   12 Size:     4
//   float black_in_grey;               // Offset:   16 Size:     4
//   float white_in_grey;               // Offset:   20 Size:     4
//   float pos0_shoulder_grey;          // Offset:   24 Size:     4
//   float pos1_shoulder_grey;          // Offset:   28 Size:     4
//   float pos0_toe_grey;               // Offset:   32 Size:     4
//   float pos1_toe_grey;               // Offset:   36 Size:     4
//   float black_out_grey;              // Offset:   40 Size:     4
//   float white_out_grey;              // Offset:   44 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__texNoiseRGB                  texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
mul r0.xy, v1.xyxx, l(3.750000, 2.109375, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t6.xyzw, s1
add r1.x, cb0[0].x, l(1.000000)
mad r0.xyzw, r1.xxxx, l(0.618034, 0.618034, 0.618034, 0.618034), r0.xyzw
frc r0.xyzw, r0.xyzw
mad r0.xyzw, r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r0.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
mul r1.x, cb0[0].w, l(0.003922)
mul r0.xyzw, r0.xyzw, r1.xxxx
movc r0.xyzw, cb0[0].zzzz, r0.xyzw, l(0,0,0,0)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
add_sat r0.xyz, r0.yzxy, r1.xyzx
mad_sat r1.xy, cb0[1].xyxx, l(0.003922, 0.003922, 0.000000, 0.000000), r0.wwww
mad_sat r1.zw, cb0[2].zzzw, l(0.000000, 0.000000, 0.003922, 0.003922), r0.wwww
add r0.xyz, r0.xyzx, -r1.xxxx
add r0.w, -r1.x, r1.y
max r0.xyzw, r0.xyzw, l(0.000000, 0.000000, 0.000000, 0.000001)
div r0.xyz, r0.xyzx, r0.wwww
min r1.xy, cb0[1].zwzz, cb0[2].xyxx
add r2.xy, -r1.xyxx, cb0[1].zwzz
lt r0.w, l(0.000010), |r2.x|
movc r0.w, r0.w, r2.x, l(0.000010)
div r0.w, r2.y, r0.w
mul r2.x, r1.x, r0.w
mul r2.x, r1.x, r2.x
mad r2.y, -r0.w, r1.x, r1.y
lt r2.z, l(0.000010), |r2.y|
movc r2.z, r2.z, r2.y, l(0.000010)
mad r3.xyz, r0.wwww, r0.xyzx, r2.yyyy
div r2.y, r2.x, r2.z
add r4.xyz, r0.xyzx, r2.yyyy
mul r1.y, r1.y, r1.y
ge r5.xyz, r0.xyzx, r1.xxxx
mul r1.x, r2.x, r1.y
mul r2.x, r2.z, r2.z
div r1.xy, r1.xyxx, r2.xzxx
div r2.xyz, -r1.xxxx, r4.xyzx
add r2.xyz, r1.yyyy, r2.xyzx
movc r2.xyz, r5.xyzx, r3.xyzx, r2.xyzx
ge r3.xyz, r0.xyzx, cb0[1].zzzz
mul r1.x, r0.w, cb0[1].z
add r1.y, -cb0[1].z, l(1.000000)
add r4.xy, cb0[1].zwzz, l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r1.x, r1.x, r1.y, r4.y
mad r1.y, r0.w, r4.x, -cb0[1].w
add r1.y, r1.y, l(1.000000)
lt r2.w, l(0.000010), |r1.y|
movc r1.y, r2.w, r1.y, l(0.000010)
div r1.x, r1.x, r1.y
add r0.xyz, r0.xyzx, r1.xxxx
mul r4.yz, r4.xxyx, r4.xxyx
mad r1.x, r0.w, r4.x, cb0[1].w
mul r0.w, r0.w, r4.y
mul r0.w, r4.z, r0.w
mad r1.x, -cb0[1].w, cb0[1].w, r1.x
div r1.x, r1.x, r1.y
mul r1.y, r1.y, r1.y
div r0.w, r0.w, r1.y
div r0.xyz, -r0.wwww, r0.xyzx
add r0.xyz, r1.xxxx, r0.xyzx
movc r0.xyz, r3.xyzx, r0.xyzx, r2.xyzx
add r0.w, -r1.z, r1.w
max r0.w, r0.w, l(0.000000)
mad o0.xyz, r0.xyzx, r0.wwww, r1.zzzz
mov o0.w, l(1.000000)
ret 
// Approximately 66 instruction slots used
