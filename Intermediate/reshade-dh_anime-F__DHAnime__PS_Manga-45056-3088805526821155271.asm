//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int iBlackLineThickness;           // Offset:    0 Size:     4
//   float fBlackLineThreshold;         // Offset:    4 Size:     4
//   float iSurfaceBlur;                // Offset:    8 Size:     4 [unused]
//   float fSaturation;                 // Offset:   12 Size:     4
//   float iShadingSteps;               // Offset:   16 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// __V__DHAnime__normalTex           texture  float4          2d             t4      1 
// __V__DHAnime__blurTex             texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
ilt r0.x, l(0), cb0[0].x
if_nz r0.x
  ineg r0.x, cb0[0].x
  imul null, r0.y, cb0[0].x, cb0[0].x
  itof r0.y, r0.y
  sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t2.yzxw, s0, l(0.000000)
  mad r0.w, -r0.z, l(999.000000), l(1000.000000)
  div r0.z, r0.z, r0.w
  mul r0.z, r0.z, l(1000.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t4.xyzw, s0, l(0.000000)
  add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  mov r0.w, r0.x
  loop 
    ilt r1.w, cb0[0].x, r0.w
    breakc_nz r1.w
    itof r2.x, r0.w
    mov r1.w, r0.x
    loop 
      ilt r2.z, cb0[0].x, r1.w
      breakc_nz r2.z
      itof r2.y, r1.w
      dp2 r2.z, r2.xyxx, r2.xyxx
      ge r2.z, r0.y, r2.z
      if_nz r2.z
        mad r2.yz, r2.xxyx, l(0.000000, 0.000521, 0.000926, 0.000000), v1.xxyx
        sample_l_indexable(texture2d)(float,float,float,float) r2.w, r2.yzyy, t2.yzwx, s0, l(0.000000)
        mad r3.x, -r2.w, l(999.000000), l(1000.000000)
        div r2.w, r2.w, r3.x
        mul r2.w, r2.w, l(1000.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r2.yzyy, t4.xyzw, s0, l(0.000000)
        add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
        add r3.xyz, r3.xyzx, r3.xyzx
        div r2.y, r0.z, r2.w
        ge r2.y, cb0[0].y, r2.y
        mad r3.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r3.xyzx
        lt r3.xyz, l(0.100000, 0.100000, 0.100000, 0.000000), |r3.xyzx|
        or r2.z, r3.y, r3.x
        or r2.z, r3.z, r2.z
        and r2.y, r2.z, r2.y
        if_nz r2.y
          mov o0.xyzw, l(0,0,0,1.000000)
          ret 
        endif 
      endif 
      iadd r1.w, r1.w, l(1)
    endloop 
    iadd r0.w, r0.w, l(1)
  endloop 
endif 
sample_l_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t6.xyzw, s0, l(0.000000)
min r0.w, r0.z, r0.y
min r0.w, r0.w, r0.x
max r1.x, r0.z, r0.y
max r1.x, r0.x, r1.x
add r1.y, r0.w, r1.x
mul r1.z, r1.y, l(0.500000)
add r0.w, -r0.w, r1.x
ne r1.w, r0.w, l(0.000000)
add r2.xyz, -r0.zxyz, r1.xxxx
div r2.xyz, r2.xyzx, r0.wwww
add r2.xyz, -r2.zxyz, r2.xyzx
add r2.xyz, r2.xyzx, l(6.000000, 2.000000, 4.000000, 0.000000)
ge r0.xyz, r0.xyzx, r1.xxxx
and r0.xyz, r0.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r0.xyz, r2.xyzx, r0.xyzx
max r0.x, r0.x, r0.z
max r0.x, r0.x, r0.y
mul r0.x, r0.x, l(0.166667)
frc r0.x, r0.x
add r0.z, r1.y, l(-1.000000)
add r0.z, -|r0.z|, l(1.000000)
div r0.y, r0.w, r0.z
and r0.xy, r0.xyxx, r1.wwww
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[1].x
div r0.z, r1.z, r0.z
round_ne r0.z, r0.z
div r0.z, r0.z, cb0[1].x
mul_sat r0.y, r0.y, cb0[0].w
mad r1.xyz, r0.xxxx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)
mad_sat r1.xyz, |r1.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)
add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mad r0.x, r0.z, l(2.000000), l(-1.000000)
add r0.x, -|r0.x|, l(1.000000)
mul r0.x, r0.y, r0.x
mad o0.xyz, r1.xyzx, r0.xxxx, r0.zzzz
mov o0.w, l(1.000000)
ret 
// Approximately 87 instruction slots used
