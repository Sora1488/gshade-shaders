//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int Ascii_spacing;                 // Offset:    0 Size:     4
//   int Ascii_font;                    // Offset:    4 Size:     4
//   int Ascii_font_color_mode;         // Offset:    8 Size:     4
//   float3 Ascii_font_color;           // Offset:   16 Size:    12
//   float3 Ascii_background_color;     // Offset:   32 Size:    12
//   bool Ascii_swap_colors;            // Offset:   44 Size:     4
//   bool Ascii_invert_brightness;      // Offset:   48 Size:     4
//   bool Ascii_dithering;              // Offset:   52 Size:     4
//   float Ascii_dithering_intensity;   // Offset:   56 Size:     4
//   bool Ascii_dithering_debug_gradient;// Offset:   60 Size:     4
//   float timer;                       // Offset:   64 Size:     4 [unused]
//   float framecount;                  // Offset:   68 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 7
dcl_indexableTemp x0[16], 4
dcl_indexableTemp x1[13], 4
ieq r0.x, cb0[0].y, l(1)
movc r0.yzw, r0.xxxx, l(0,5.000000,5.000000,0.062500), l(0,3.000000,5.000000,0.076923)
itof r1.x, cb0[0].x
add r1.xy, r0.yzyy, r1.xxxx
div r1.zw, l(0.000000, 0.000000, 1920.000000, 1080.000000), r1.xxxy
mul r1.zw, r1.zzzw, v1.xxxy
round_z r2.xy, r1.zwzz
mul r2.xy, r1.xyxx, r2.xyxx
mul r3.xy, r2.xyxx, l(0.000521, 0.000926, 0.000000, 0.000000)
mad r4.xyzw, r2.xyxy, l(0.000521, 0.000926, 0.000521, 0.000926), l(0.000781, 0.001389, 0.001823, 0.003241)
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r4.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r4.xwxx, t0.xyzw, s0
add r5.xyz, r5.xyzx, r6.xyzx
mad r3.zw, r2.xxxy, l(0.000000, 0.000000, 0.000521, 0.000926), l(0.000000, 0.000000, 0.000781, 0.005093)
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r3.zwzz, t0.xyzw, s0
add r5.xyz, r5.xyzx, r6.xyzx
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r4.zyzz, t0.xyzw, s0
add r5.xyz, r5.xyzx, r6.xyzx
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.zwzz, t0.xyzw, s0
add r4.xyz, r4.xyzx, r5.xyzx
add r5.xyzw, r3.xyxw, l(0.002865, 0.005093, 0.001823, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r5.zwzz, t0.xyzw, s0
add r4.xyz, r4.xyzx, r6.xyzx
mad r2.xyzw, r2.xyxy, l(0.000521, 0.000926, 0.000521, 0.000926), l(0.002865, 0.001389, 0.002865, 0.003241)
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r2.xyxx, t0.xyzw, s0
add r4.xyz, r4.xyzx, r6.xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.zwzz, t0.xyzw, s0
add r2.xyz, r2.xyzx, r4.xyzx
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r5.xyxx, t0.xyzw, s0
add r2.xyz, r2.xyzx, r4.xyzx
mul r2.xyz, r2.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000)
dp3 r2.w, r2.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
add r3.z, -r2.w, l(1.000000)
movc r2.w, cb0[3].x, r3.z, r2.w
movc r2.w, cb0[3].w, r3.x, r2.w
frc r1.zw, r1.zzzw
mul r1.xy, r1.xyxx, r1.zwzz
round_z r1.xy, r1.xyxx
mad r1.z, r0.y, r1.y, r1.x
dp2 r1.w, r3.xyxx, l(12.989800, 78.233002, 0.000000, 0.000000)
sincos r1.w, null, r1.w
mad r1.w, r1.w, l(43758.542969), r3.y
frc r1.w, r1.w
mul r3.x, r0.w, cb0[3].z
mul r3.y, r3.x, l(0.500000)
mad r1.w, r3.x, r1.w, -r3.y
add r1.w, r1.w, r2.w
movc r1.w, cb0[3].y, r1.w, r2.w
if_nz r0.x
  mov x0[0].x, l(4194304.000000)
  mov x0[1].x, l(131200.000000)
  mov x0[2].x, l(324.000000)
  mov x0[3].x, l(330.000000)
  mov x0[4].x, l(283712.000000)
  mov x0[5].x, l(12650880.000000)
  mov x0[6].x, l(4532768.000000)
  mov x0[7].x, l(13191552.000000)
  mov x0[8].x, l(10648704.000000)
  mov x0[9].x, l(11195936.000000)
  mov x0[10].x, l(15218734.000000)
  mov x0[11].x, l(15255086.000000)
  mov x0[12].x, l(15252014.000000)
  mov x0[13].x, l(32294446.000000)
  mov x0[14].x, l(15324974.000000)
  mov x0[15].x, l(11512810.000000)
  ge r3.xyzw, r1.wwww, l(0.125000, 0.187500, 0.250000, 0.312500)
  and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r0.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftoi r0.x, r0.x
  ge r3.xyzw, r1.wwww, l(0.375000, 0.437500, 0.500000, 0.562500)
  and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r2.w, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftoi r2.w, r2.w
  iadd r0.x, r0.x, r2.w
  ge r3.xyzw, r1.wwww, l(0.625000, 0.687500, 0.750000, 0.812500)
  and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r2.w, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftoi r2.w, r2.w
  iadd r0.x, r0.x, r2.w
  ge r3.xyz, r1.wwww, l(0.875000, 0.937500, 1.000000, 0.000000)
  and r3.xyz, r3.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
  dp3 r2.w, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  ftoi r2.w, r2.w
  iadd r0.x, r0.x, r2.w
  mov r0.x, x0[r0.x + 0].x
else 
  mov x1[0].x, l(4096.000000)
  mov x1[1].x, l(1040.000000)
  mov x1[2].x, l(5136.000000)
  mov x1[3].x, l(5200.000000)
  mov x1[4].x, l(2728.000000)
  mov x1[5].x, l(11088.000000)
  mov x1[6].x, l(14478.000000)
  mov x1[7].x, l(11114.000000)
  mov x1[8].x, l(23213.000000)
  mov x1[9].x, l(15211.000000)
  mov x1[10].x, l(23533.000000)
  mov x1[11].x, l(31599.000000)
  mov x1[12].x, l(31727.000000)
  ge r3.xyzw, r1.wwww, l(0.153846, 0.230769, 0.307692, 0.384615)
  and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r2.w, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftoi r2.w, r2.w
  ge r3.xyzw, r1.wwww, l(0.461538, 0.538462, 0.615385, 0.692308)
  and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r3.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftoi r3.x, r3.x
  iadd r2.w, r2.w, r3.x
  ge r3.xyzw, r1.wwww, l(0.769231, 0.846154, 0.923077, 1.000000)
  and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r3.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftoi r3.x, r3.x
  iadd r2.w, r2.w, r3.x
  mov r0.x, x1[r2.w + 0].x
endif 
ge r0.w, r0.w, r1.w
movc r0.w, r0.w, l(0), l(1.000000)
add r1.z, -r1.z, l(-1.000000)
exp r1.z, r1.z
mul r0.x, r0.x, r1.z
frc r0.x, r0.x
ge r0.x, r0.x, l(0.500000)
and r0.x, r0.w, r0.x
max r3.xy, r1.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.yz, r0.yyzy, r3.xxyx
ne r0.yz, r1.xxyx, r0.yyzy
or r0.y, r0.z, r0.y
movc r0.x, r0.y, l(0), r0.x
if_nz cb0[2].w
  switch cb0[0].z
    case l(1)
    ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
    movc r0.yzw, r1.xxxx, cb0[2].xxyz, cb0[1].xxyz
    break 
    case l(2)
    eq r1.x, r0.x, l(0.000000)
    movc r0.yzw, r1.xxxx, cb0[1].xxyz, r2.xxyz
    break 
    default 
    ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
    movc r0.yzw, r1.xxxx, cb0[2].xxyz, cb0[1].xxyz
    break 
  endswitch 
else 
  switch cb0[0].z
    case l(1)
    ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
    mul r1.yzw, r1.wwww, cb0[1].xxyz
    movc r0.yzw, r1.xxxx, r1.yyzw, cb0[2].xxyz
    break 
    case l(2)
    eq r1.x, r0.x, l(0.000000)
    movc r0.yzw, r1.xxxx, cb0[2].xxyz, r2.xxyz
    break 
    default 
    ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
    movc r0.yzw, r0.xxxx, cb0[1].xxyz, cb0[2].xxyz
    break 
  endswitch 
endif 
mov_sat o0.xyz, r0.yzwy
ret 
// Approximately 162 instruction slots used
