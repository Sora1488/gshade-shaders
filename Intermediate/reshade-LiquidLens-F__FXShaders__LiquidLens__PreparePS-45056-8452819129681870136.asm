//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int _908;                          // Offset:    0 Size:     4 [unused]
//   float Brightness;                  // Offset:    4 Size:     4
//   float Saturation;                  // Offset:    8 Size:     4
//   float Threshold;                   // Offset:   12 Size:     4
//   int Tonemapper;                    // Offset:   16 Size:     4
//   float BlurSize;                    // Offset:   20 Size:     4 [unused]
//   float BlurSigma;                   // Offset:   24 Size:     4 [unused]
//   float FisheyeAmount;               // Offset:   28 Size:     4 [unused]
//   float FisheyeZoom;                 // Offset:   32 Size:     4 [unused]
//   int FisheyeScaleType;              // Offset:   36 Size:     4 [unused]
//   float TintAmount;                  // Offset:   40 Size:     4 [unused]
//   float4 Tint1;                      // Offset:   48 Size:    16 [unused]
//   float4 Tint2;                      // Offset:   64 Size:    16 [unused]
//   float4 Tint3;                      // Offset:   80 Size:    16 [unused]
//   float4 Tint4;                      // Offset:   96 Size:    16 [unused]
//   float4 Tint5;                      // Offset:  112 Size:    16 [unused]
//   float4 Tint6;                      // Offset:  128 Size:    16 [unused]
//   float4 Tint7;                      // Offset:  144 Size:    16 [unused]
//   float Scale1;                      // Offset:  160 Size:     4 [unused]
//   float Scale2;                      // Offset:  164 Size:     4 [unused]
//   float Scale3;                      // Offset:  168 Size:     4 [unused]
//   float Scale4;                      // Offset:  172 Size:     4 [unused]
//   float Scale5;                      // Offset:  176 Size:     4 [unused]
//   float Scale6;                      // Offset:  180 Size:     4 [unused]
//   float Scale7;                      // Offset:  184 Size:     4 [unused]
//   bool ShowLens;                     // Offset:  188 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __srgbV__FXShaders__LiquidLens__BackBufferTex    texture  float4          2d             t1      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
add r0.xy, -v1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t1.xyzw, s0
switch cb0[1].x
  case l(1)
  mad r2.xyz, -r0.xyzx, l(0.150000, 0.150000, 0.150000, 0.000000), l(0.005000, 0.005000, 0.005000, 0.000000)
  mad r3.xyz, r0.xyzx, l(0.150000, 0.150000, 0.150000, 0.000000), l(-0.005000, -0.005000, -0.005000, 0.000000)
  mul r4.xyz, r0.xyzx, l(0.072000, 0.072000, 0.072000, 0.000000)
  mad r5.xyz, r0.xyzx, l(0.045000, 0.045000, 0.045000, 0.000000), l(-0.042000, -0.042000, -0.042000, 0.000000)
  mul r4.xyz, r4.xyzx, r5.xyzx
  mad r3.xyz, |r3.xyzx|, |r3.xyzx|, -r4.xyzx
  sqrt r3.xyz, r3.xyzx
  add r2.xyz, r2.xyzx, -r3.xyzx
  mad r3.xyz, r0.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000), l(-0.280000, -0.280000, -0.280000, 0.000000)
  mul r3.xyz, r3.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000)
  div r1.xyz, r2.xyzx, r3.xyzx
  mov r1.xyz, |r1.xyzx|
  break 
  case l(2)
  mad r2.xyz, -r0.xyzx, l(0.432951, 0.432951, 0.432951, 0.000000), l(0.024579, 0.024579, 0.024579, 0.000000)
  mad r3.xyz, r0.xyzx, l(0.432951, 0.432951, 0.432951, 0.000000), l(-0.024579, -0.024579, -0.024579, 0.000000)
  mad r4.xyz, r0.xyzx, l(0.983729, 0.983729, 0.983729, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mul r5.xyz, r4.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
  mad r6.xyz, r0.xyzx, l(0.238081, 0.238081, 0.238081, 0.000000), l(0.000091, 0.000091, 0.000091, 0.000000)
  mul r5.xyz, r5.xyzx, r6.xyzx
  mad r3.xyz, |r3.xyzx|, |r3.xyzx|, -r5.xyzx
  sqrt r3.xyz, r3.xyzx
  add r2.xyz, r2.xyzx, -r3.xyzx
  add r3.xyz, r4.xyzx, r4.xyzx
  div r1.xyz, r2.xyzx, r3.xyzx
  mov r1.xyz, |r1.xyzx|
  break 
  case l(3)
  mad r2.xyz, r0.xyzx, l(0.590000, 0.590000, 0.590000, 0.000000), l(-0.030000, -0.030000, -0.030000, 0.000000)
  mad r3.xyz, r0.xyzx, l(1.405600, 1.405600, 1.405600, 0.000000), l(0.000900, 0.000900, 0.000900, 0.000000)
  mad r3.xyz, -r0.xyzx, l(0.035400, 0.035400, 0.035400, 0.000000), r3.xyzx
  mul r4.xyz, r0.xyzx, r0.xyzx
  mad r3.xyz, -r4.xyzx, l(1.360800, 1.360800, 1.360800, 0.000000), r3.xyzx
  mad r3.xyz, r4.xyzx, l(0.348100, 0.348100, 0.348100, 0.000000), r3.xyzx
  sqrt r3.xyz, r3.xyzx
  add r2.xyz, r2.xyzx, r3.xyzx
  mad r3.xyz, -r0.xyzx, l(2.430000, 2.430000, 2.430000, 0.000000), l(2.510000, 2.510000, 2.510000, 0.000000)
  add r3.xyz, r3.xyzx, r3.xyzx
  div r1.xyz, r2.xyzx, r3.xyzx
  break 
  case l(4)
  mul r2.xyz, r0.xyzx, l(-0.155000, -0.155000, -0.155000, 0.000000)
  max r3.xyz, r0.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
  add r3.xyz, r3.xyzx, l(-1.019000, -1.019000, -1.019000, 0.000000)
  div r1.xyz, r2.xyzx, r3.xyzx
  break 
  case l(5)
  max r1.w, r0.z, r0.y
  max r1.w, r0.x, r1.w
  add r1.w, -r1.w, l(1.000000)
  max r1.w, r1.w, l(0.100000)
  rcp r1.w, r1.w
  mul r1.xyz, r0.xyzx, r1.wwww
  break 
  default 
  add r2.xyz, r0.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  min r2.xyz, r2.xyzx, l(-0.100000, -0.100000, -0.100000, 0.000000)
  div r1.xyz, r0.xyzx, r2.xyzx
  mov r1.xyz, -r1.xyzx
  break 
endswitch 
dp3 r0.x, r1.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
add r1.xyz, -r0.xxxx, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[0].zzzz, r0.xxxx
switch cb0[1].x
  case l(1)
  mul r1.y, cb0[0].w, l(0.072000)
  mad r1.z, -cb0[0].w, l(0.150000), l(0.005000)
  mad r2.xyz, cb0[0].wwww, l(0.150000, 0.045000, 0.300000, 0.000000), l(-0.005000, -0.042000, -0.280000, 0.000000)
  mul r1.y, r1.y, r2.y
  mad r1.y, |r2.x|, |r2.x|, -r1.y
  sqrt r1.y, r1.y
  add r1.y, -r1.y, r1.z
  mul r1.z, r2.z, l(0.300000)
  div r1.x, r1.y, r1.z
  mov r1.x, |r1.x|
  break 
  case l(2)
  mad r1.y, -cb0[0].w, l(0.432951), l(0.024579)
  mad r2.xyz, cb0[0].wwww, l(0.432951, 0.983729, 0.238081, 0.000000), l(-0.024579, -1.000000, 0.000091, 0.000000)
  mul r1.z, r2.y, l(4.000000)
  mul r1.z, r2.z, r1.z
  mad r1.z, |r2.x|, |r2.x|, -r1.z
  sqrt r1.z, r1.z
  add r1.y, -r1.z, r1.y
  add r1.z, r2.y, r2.y
  div r1.x, r1.y, r1.z
  mov r1.x, |r1.x|
  break 
  case l(3)
  mad r1.yz, cb0[0].wwww, l(0.000000, 0.590000, 1.405600, 0.000000), l(0.000000, -0.030000, 0.000900, 0.000000)
  mad r1.z, -cb0[0].w, l(0.035400), r1.z
  mul r1.w, cb0[0].w, cb0[0].w
  mad r1.z, -r1.w, l(1.360800), r1.z
  mad r1.z, r1.w, l(0.348100), r1.z
  sqrt r1.z, r1.z
  add r1.y, r1.z, r1.y
  mad r1.z, -cb0[0].w, l(2.430000), l(2.510000)
  add r1.z, r1.z, r1.z
  div r1.x, r1.y, r1.z
  break 
  case l(4)
  mul r1.y, cb0[0].w, l(-0.155000)
  max r1.z, cb0[0].w, l(0.010000)
  add r1.z, r1.z, l(-1.019000)
  div r1.x, r1.y, r1.z
  break 
  case l(5)
  add r1.y, -cb0[0].w, l(1.000000)
  max r1.y, r1.y, l(0.100000)
  rcp r1.y, r1.y
  mul r1.x, r1.y, cb0[0].w
  break 
  default 
  add r1.y, cb0[0].w, l(-1.000000)
  min r1.y, r1.y, l(-0.100000)
  div r1.x, cb0[0].w, r1.y
  mov r1.x, -r1.x
  break 
endswitch 
ge r1.xyz, r0.xyzx, r1.xxxx
and r1.xyz, r1.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r0.xyz, r0.xyzx, r1.xyzx
mul o0.xyz, r0.xyzx, cb0[0].yyyy
mov o0.w, r0.w
ret 
// Approximately 131 instruction slots used
